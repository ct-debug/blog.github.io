{
    "version": "https://jsonfeed.org/version/1",
    "title": "My blog",
    "subtitle": "Record my learning bit by bit",
    "icon": "https://blog.debugsrc.top/images/favicon.ico",
    "description": "春风桃李花开夜 秋雨梧桐叶落时(｀・ω・´)",
    "home_page_url": "https://blog.debugsrc.top",
    "items": [
        {
            "id": "https://blog.debugsrc.top/2019/01/01/Apache%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/",
            "url": "https://blog.debugsrc.top/2019/01/01/Apache%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/",
            "title": "Apache远程命令执行漏洞",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h1 id=\"apache远程命令执行漏洞\"><a class=\"anchor\" href=\"#apache远程命令执行漏洞\">#</a> Apache 远程命令执行漏洞</h1>\n<h2 id=\"一-shtml\"><a class=\"anchor\" href=\"#一-shtml\">#</a> 一、SHTML</h2>\n<h3 id=\"sthtml简介\"><a class=\"anchor\" href=\"#sthtml简介\">#</a> sthtml 简介：</h3>\n<blockquote>\n<p>shtml 是一种基于 SSI 技术的文件，也就是 (Server Side Include) SSI 服务器端包含指令，一些 Web Server 如果有 SSI 功能的话就会对 shtml 文件特殊招待，服务器会先扫一次 shtml 文件看没有特殊的 SSI 指令存在，如果有的话就按 Web Server 设定规则解释 SSI 指令，解释完后跟一般 html 一起调去客户端。</p>\n</blockquote>\n<h3 id=\"html或htm与shtml或shtm的关系\"><a class=\"anchor\" href=\"#html或htm与shtml或shtm的关系\">#</a> html 或 htm 与 shtml 或 shtm 的关系：</h3>\n<blockquote>\n<p>html 或者 htm 是一种静态的页面格式，也就是说不需要服务器解析其中的脚本，或者说里面没有服务器端执行的脚本，而 shtml 或者 shtm 由于它基于 SSI 技术，当有服务器端可执行脚本时被当作一种动态编程语言来看待，就如 asp、jsp 或者 php 一样。当 shtml 或者 shtm 中不包含服务器端可执行脚本时其作用和 html 或者 htm 是一样的。</p>\n</blockquote>\n<h2 id=\"二-ssi指令\"><a class=\"anchor\" href=\"#二-ssi指令\">#</a> 二、SSI 指令</h2>\n<h3 id=\"1ssiserver-side-include的简写服务器端嵌入或者服务器端包含\"><a class=\"anchor\" href=\"#1ssiserver-side-include的简写服务器端嵌入或者服务器端包含\">#</a> 1.SSI：（Server Side Include）的简写，服务器端嵌入或者服务器端包含。</h3>\n<blockquote>\n<p>通过在文档中加入 SSI 指令，服务器端在输出文档之前会解析 SSI 指令，并把解析完的结果和文档一同输出给客户端。</p>\n</blockquote>\n<h3 id=\"2ssi的指令格式为\"><a class=\"anchor\" href=\"#2ssi的指令格式为\">#</a> 2.SSI 的指令格式为：</h3>\n<p><code>&lt;!-- #directive parameter=&quot;value&quot; --&gt;</code></p>\n<blockquote>\n<p><code>&lt;!-- --&gt;</code> ：是 HTML 语法中表示注释，当 WEB 服务器不支持 SSI 时，会忽略这些信息。<br />\n <code>directive</code> ：指令名<br />\n <code>parameter</code> ：指令参数<br />\n <code>value</code> ：指令参数值</p>\n</blockquote>\n<blockquote>\n<p>SSI 的指令格式形如 HTML 注释。在将内容发送到浏览器之前，可以使用 SSI 指令将文本、图形或应用程序信息包含到网页中，如果 Web 服务器开启了 SSI 功能模块，并且页面包含可以解析的指令，那么 Web 服务器就会解析这个指令。若服务端没开启 SSI 功能模块或者开启了 SSI 功能模块，但是页面包含的指令不是可以解析的指令，那么将当做注释处理。</p>\n</blockquote>\n<h3 id=\"3ssi包含的指令有\"><a class=\"anchor\" href=\"#3ssi包含的指令有\">#</a> 3.SSI 包含的指令有:</h3>\n<blockquote>\n<p>config：修改 SSI 的默认设置<br />\n echo：显示环境变量<br />\n exec：执行 CGI 脚本<br />\n flastmod ：显示指定文件的最后修改日期<br />\n fsize：显示指定文件的大小<br />\n include：把其它文档插入到当前被解析的文档中</p>\n</blockquote>\n<h2 id=\"三-漏洞复现\"><a class=\"anchor\" href=\"#三-漏洞复现\">#</a> 三、漏洞复现</h2>\n<h3 id=\"1环境\"><a class=\"anchor\" href=\"#1环境\">#</a> 1. 环境</h3>\n<p><img data-src=\"/2019/01/01/Apache%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/%E9%9D%B6%E5%9C%BA%E7%8E%AF%E5%A2%83.png\" class=\"\" title=\"靶场环境\"></p>\n<h3 id=\"2web页面httpip8080uploadphp\"><a class=\"anchor\" href=\"#2web页面httpip8080uploadphp\">#</a> 2.web 页面 http://ip:8080/upload.php</h3>\n<p><img data-src=\"/2019/01/01/Apache%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/web.png\" class=\"\" title=\"web\"></p>\n<h3 id=\"3上传1shtml文件\"><a class=\"anchor\" href=\"#3上传1shtml文件\">#</a> 3. 上传 1.shtml 文件</h3>\n<p><img data-src=\"/2019/01/01/Apache%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/1.shtml.png\" class=\"\" title=\"1.shtml\"></p>\n<h3 id=\"4上传成功\"><a class=\"anchor\" href=\"#4上传成功\">#</a> 4. 上传成功</h3>\n<p><img data-src=\"/2019/01/01/Apache%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/%E4%B8%8A%E4%BC%A0%E6%88%90%E5%8A%9F.png\" class=\"\" title=\"上传成功\"></p>\n<h3 id=\"5访问httpip80801shtml\"><a class=\"anchor\" href=\"#5访问httpip80801shtml\">#</a> 5. 访问 http://ip:8080/1.shtml</h3>\n<p><img data-src=\"/2019/01/01/Apache%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/%E8%AE%BF%E9%97%AE1.shtml%E6%88%90%E5%8A%9F.png\" class=\"\" title=\"访问1.shtml成功\"></p>\n<h3 id=\"6服务器验证\"><a class=\"anchor\" href=\"#6服务器验证\">#</a> 6. 服务器验证</h3>\n<p><img data-src=\"/2019/01/01/Apache%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%96%87%E4%BB%B6%E5%86%85%E5%AE%B9.png\" class=\"\" title=\"服务器文件内容\"></p>\n",
            "tags": [
                "网络安全",
                "学习笔记",
                "Apache",
                "远程命令执行",
                "漏洞复现"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/CentOS%208.2%20ftp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/",
            "url": "https://blog.debugsrc.top/2019/01/01/CentOS%208.2%20ftp%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/",
            "title": "CentOS8.2 ftp服务器搭建",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h1 id=\"centos-82-ftp服务器搭建\"><a class=\"anchor\" href=\"#centos-82-ftp服务器搭建\">#</a> CentOS 8.2 ftp 服务器搭建</h1>\n<h2 id=\"安装vsftpd\"><a class=\"anchor\" href=\"#安装vsftpd\">#</a> 安装 vsftpd</h2>\n<p><code>yum install -y vsftpd</code></p>\n<ul>\n<li>\n<p>配置文件目录 <code>/etc/vsftpd</code></p>\n</li>\n<li>\n<p>主配置文件 <code>/etc/vsftpd/vsftpd.conf</code></p>\n</li>\n<li>\n<p>不允许访问 FTP 服务器的用户 <code>/etc/vsftpd/ftpusers</code></p>\n</li>\n<li>\n<p>允许访问 FTP 服务器的用户 <code>/etc/vsftpd/user_list</code></p>\n</li>\n<li>\n<p>启动服务 <code>systemctl start vsftpd.service</code></p>\n</li>\n<li>\n<p>重启服务 <code>systemctl restart vsftpd.service</code></p>\n</li>\n<li>\n<p>开机自启 <code>systemctl enable vsftpd.service</code></p>\n</li>\n<li>\n<p>查看服务状态 <code>systemctl status vsftpd.service</code></p>\n<h2 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h2>\n</li>\n<li>\n<p>pasv 模式即被动模式<br />\n <code>pasv_min_port=65400</code> pasv 最小端口<br />\n <code>pasv_max_port=65420</code> pasv 最大端口</p>\n</li>\n<li>\n<p>建立一个 ftp 用户，此用户不能登陆系统，且只能访问自己主目录下的文件<br />\n <code>useradd -d /var/ftp/test -g ftp -s /sbin/nologin ftpuser</code></p>\n</li>\n</ul>\n<blockquote>\n<p>-d 指定用户主目录。-g 指定用户分组。-s /sbin/nologin 禁止用户登陆系统。ftpuser 新建用户的用户名</p>\n</blockquote>\n<ul>\n<li>\n<p>设置密码<br />\n <code>passwd ftpuser</code></p>\n</li>\n<li>\n<p>建立用户以后，需要配置用户可登陆名单，并将新建用户添加进入 ftp 可登陆名单中</p>\n</li>\n<li>\n<p>配置用户名单的方式是：打开配置文件，找到如下两行，去掉其注释符号<br />\n <code>chroot_list_enable=YES</code> <br />\n <code>chroot_list_file=/etc/vsftpd/chroot_list</code></p>\n</li>\n<li>\n<p>只有名单中的用户可以登陆系统</p>\n<h2 id=\"配置防火墙\"><a class=\"anchor\" href=\"#配置防火墙\">#</a> 配置防火墙</h2>\n</li>\n<li>\n<p>简单粗暴直接关闭 <code>systemctl stop firewalld</code></p>\n</li>\n</ul>\n",
            "tags": [
                "环境搭建",
                "学习笔记",
                "FTP"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/kali%20Linux%202020%E7%89%88%E6%9B%B4%E6%96%B0%E6%BA%90%E5%8F%8A%E4%B8%AD%E6%96%87%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "url": "https://blog.debugsrc.top/2019/01/01/kali%20Linux%202020%E7%89%88%E6%9B%B4%E6%96%B0%E6%BA%90%E5%8F%8A%E4%B8%AD%E6%96%87%E8%AE%BE%E7%BD%AE%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/",
            "title": "kali Linux 2020版更新源及中文设置问题解决方案",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h1 id=\"kali-linux-2020版\"><a class=\"anchor\" href=\"#kali-linux-2020版\">#</a> kali linux 2020 版</h1>\n<h2 id=\"将kali的更新源切换成国内的源\"><a class=\"anchor\" href=\"#将kali的更新源切换成国内的源\">#</a> 将 kali 的更新源切换成国内的源</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">su</span> - //root权限</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>kali      //密码</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> leafpad //安装文本编辑器</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">vim</span> /etc/apt/sources.list //打开文件</pre></td></tr></table></figure><blockquote>\n<p>将默认的源文件替换<br />\n（下面介绍替换的具体操作，熟悉 Linux 操作指令）<br />\n输入 i 进入编辑模式（编辑的就是刚打开的 sources.list 文件）<br />\n将旧的源文件删掉或者注释掉（里面除了原来的更新源都是注释，不用怕删掉不该删的）<br />\n将新的更新源复制粘贴到该文件中，注意 Linux 终端下粘贴快捷键是：Ctrl + Shift + V<br />\n 按 ESC 退出编辑模式，按 ： 再按 wq 保存，回车就完成了</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt-get</span> update <span class=\"token operator\">&amp;</span> <span class=\"token function\">apt-get</span> upgrade //更新</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">apt-get</span> dist-upgrade</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">apt-get</span> clean</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>查看系统版本  命令：lsb_release -a</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>查看内核版本  命令：uname -r</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>更新源：</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">#中科大</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#阿里云</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">#清华大学</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>deb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">#浙大</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>deb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">#东软大学</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</pre></td></tr><tr><td data-num=\"27\"></td><td><pre> </pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">#官方源</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>deb http://http.kali.org/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>deb-src http://http.kali.org/kali kali-rolling main non-free contrib</pre></td></tr><tr><td data-num=\"31\"></td><td><pre> </pre></td></tr><tr><td data-num=\"32\"></td><td><pre>deb http://mirrors.163.com/debian/ jessie main non-free contrib</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>deb http://mirrors.163.com/debian/ jessie-updates main non-free contrib</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>deb http://mirrors.163.com/debian/ jessie-backports main non-free contrib</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>deb-src http://mirrors.163.com/debian/ jessie main non-free contrib</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>deb-src http://mirrors.163.com/debian/ jessie-updates main non-free contrib</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>deb-src http://mirrors.163.com/debian/ jessie-backports main non-free contrib</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>deb http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>deb-src http://mirrors.163.com/debian-security/ jessie/updates main non-free contrib</pre></td></tr></table></figure><h2 id=\"中文设置问题解决方案\"><a class=\"anchor\" href=\"#中文设置问题解决方案\">#</a> 中文设置问题解决方案</h2>\n<p>1. 在 root 用户下直接输入 “dpkg-reconfigure locales” 命令，如果是 kali 普通用户则输入 “sudo dpkg-reconfigure locales” 然后输入密码 kali</p>\n<p>2. 先找到 en_US.UTF-8，空格键取消它，然后再找到 zh_CN.UTF-8，空格键选中</p>\n<p>3. 单击确定后，下一界面，选择 zh_CN.UTF-8，确定</p>\n<p>4. 然后 reboot 重启生效</p>\n<p>5. 重启后会出现乱码，再次打开终端，输入 “apt-get install ttf-wqy-microhei ttf-wqy-zenhei xfonts-wqy” 下载中文字体</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">#安装中文字体：(1)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> xfonts-intl-chinese</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">#输入当前用户密码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">#安装中文字体：(2)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> ttf-wqy-microhei</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">#输入当前用户密码</span></pre></td></tr></table></figure><p>6. 之后 reboot 重启，重启后就完成了 kali 的中文配置</p>\n",
            "tags": [
                "编程",
                "学习笔记",
                "kali",
                "Linux"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "url": "https://blog.debugsrc.top/2019/01/01/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/",
            "title": "Java面向对象基础知识",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h1 id=\"java面向对象实例\"><a class=\"anchor\" href=\"#java面向对象实例\">#</a> Java 面向对象实例：</h1>\n<h2 id=\"1-java继承\"><a class=\"anchor\" href=\"#1-java继承\">#</a> 1. Java 继承</h2>\n<h3 id=\"11-继承的概念\"><a class=\"anchor\" href=\"#11-继承的概念\">#</a> 1.1 继承的概念</h3>\n<blockquote>\n<p>继承在本职上是特殊 —— 一般的关系，即常说的 is-a 关系。子类继承父类，表明子类是一种特殊的父类，并且具有父类所不具有的一些属性或方法。通过 extends 关键字可以声明一个类是从另外一个类继承而来的。</p>\n</blockquote>\n<h3 id=\"12-继承的特性\"><a class=\"anchor\" href=\"#12-继承的特性\">#</a> 1.2 继承的特性</h3>\n<ol>\n<li>子类拥有父类非 private 的属性，方法；</li>\n<li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展；</li>\n<li>子类可以用自己的方式实现父类的方法；</li>\n<li>Java 的继承是单继承，这是 Java 继承区别于 C++ 继承的一个特性；</li>\n<li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系）。</li>\n</ol>\n<h3 id=\"13-继承关键字\"><a class=\"anchor\" href=\"#13-继承关键字\">#</a> 1.3 继承关键字</h3>\n<ol>\n<li>使用 extends 和 implements 来实现继承，所有的类都是继承于 java.lang.Object，当一个类没有继承的两个关键字，则默认继承 Object；</li>\n<li>一个子类只能拥有一个父类，所以 extends 只能继承一个类；</li>\n<li>使用 implements 关键字变相的使 Java 具有多继承的特性，为类继承接口，可以同时继承多个接口；</li>\n<li>通过 super 关键字来实现对父类成员的访问，用来引用当前对象的父类；</li>\n<li>final 关键字</li>\n</ol>\n<blockquote>\n<ul>\n<li>声明类则把类定义为不能继承的，即最终类；修饰方法，则该方法不能被子类重写；定义实例变量，则变量不能被修改；</li>\n<li>final 类的方法自动为 final 方法，但实例变量不自动是 final 变量。</li>\n</ul>\n</blockquote>\n<h3 id=\"14-java重写与重载\"><a class=\"anchor\" href=\"#14-java重写与重载\">#</a> 1.4 Java 重写与重载</h3>\n<blockquote>\n<p><strong>重写（Override）</strong></p>\n<ol>\n<li>重写是子类对父类的允许访问的方法的实现过程进行重新编写，返回值和形参都不能改变。即外壳不变，核心重写；</li>\n<li>重写的好处在于子类可以根据需要，定义特定于自己的行为。也就是说子类能够根据需要实现父类的方法；</li>\n<li>重写方法不能抛出新的检查异常或者比被重写方法声明更加宽泛的异常。</li>\n</ol>\n<p><strong>重载 (Overload)</strong></p>\n<ol>\n<li>重载是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同；</li>\n<li>每个重载的方法（或者构造函数）都必须有一个独一无二的参数类型列表。</li>\n</ol>\n</blockquote>\n<h4 id=\"构造器\"><a class=\"anchor\" href=\"#构造器\">#</a> 构造器</h4>\n<ol>\n<li>\n<p>子类不能继承父类的构造器（构造方法或者构造函数），但是父类的构造器带有参数的，则必须在子类的构造器中显式地通过 super 关键字调用父类的构造器并配以适当的参数列表；</p>\n</li>\n<li>\n<p>如果父类有无参构造器，则在子类的构造器中用 super 调用父类构造器不是必须的，如果没有使用 super 关键字，系统会自动调用父类的无参构造器。</p>\n</li>\n</ol>\n<h4 id=\"重写override\"><a class=\"anchor\" href=\"#重写override\">#</a> 重写（Override）</h4>\n<ol>\n<li>尽管 b 属于 Animal 类型，但是它运行的是 Dog 类的 move 方法；</li>\n<li>在编译阶段，只是检查参数的引用类型。在运行时，Java 虚拟机 (JVM) 指定对象的类型并且运行该对象的方法。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"动物可以移动\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Animal()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>   <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Animal(int)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Animal</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">B</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>   <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"旺财\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   <span class=\"token keyword\">final</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finalFun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"狗可以跳墙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>       <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这只狗可以跳\"</span><span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token string\">\"米的墙\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>       <span class=\"token comment\">//1.3.1 通过 super 关键字来实现对父类成员的访问，用来引用当前对象的父类。</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>       <span class=\"token keyword\">return</span> <span class=\"token string\">\"I am a Dog \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>          <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog()\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Dog(int)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>   <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testsuper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----testsuper----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>          <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>          <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testoverride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>          <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-----testoverride-----\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          <span class=\"token class-name\">Animal</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          <span class=\"token class-name\">Animal</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          a<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>          b<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>   <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">JavaDemo</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>          <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token function\">testsuper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>          <span class=\"token class-name\">Test</span><span class=\"token punctuation\">.</span><span class=\"token function\">testoverride</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"方法的重写规则\"><a class=\"anchor\" href=\"#方法的重写规则\">#</a> 方法的重写规则</h4>\n<p>1). 参数列表必须完全与被重写方法的相同；<br />\n2). 返回类型必须完全与被重写方法的返回类型相同；<br />\n3). 访问权限不能比父类中被重写的方法的访问权限更低；<br />\n4). 父类的成员方法只能被它的子类重写；<br />\n5). 声明为 final 的方法不能被重写；<br />\n6). 声明为 static 的方法不能被重写，但是能够被再次声明；<br />\n7). 子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法；<br />\n8). 子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法；<br />\n9). 重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常，但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以；<br />\n10). 构造方法不能被重写；<br />\n11). 如果不能继承一个方法，则不能重写这个方法。</p>\n<h4 id=\"重载规则\"><a class=\"anchor\" href=\"#重载规则\">#</a> 重载规则</h4>\n<p>1). 被重载的方法必须改变参数列表 (参数个数或类型或顺序不一样)；<br />\n2). 被重载的方法可以改变返回类型；<br />\n3). 被重载的方法可以改变访问修饰符；<br />\n4). 被重载的方法可以声明新的或更广的检查异常；<br />\n5). 方法能够在同一个类中或者在一个子类中被重载；<br />\n6). 无法以返回值类型作为重载函数的区分标准。</p>\n<h4 id=\"重写与重载之间的区别\"><a class=\"anchor\" href=\"#重写与重载之间的区别\">#</a> 重写与重载之间的区别</h4>\n<p>区别点            重载方法        重写方法<br />\n参数列表       必须修改        一定不能修改<br />\n返回类型       可以修改        一定不能修改<br />\n异常                可以修改        可以减少或删除，一定不能抛出新的或者更广的异常<br />\n访问                可以修改        一定不能做更严格的限制（可以降低限制）</p>\n<h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h4>\n<blockquote>\n<p>方法的重写和重载是 Java 多态性的不同表现，重写是父类与子类之间多态性的一种表现，重载是一类中多态性的一种表现。</p>\n</blockquote>\n<h2 id=\"2java多态\"><a class=\"anchor\" href=\"#2java多态\">#</a> 2.Java 多态</h2>\n<p><strong>多态就是同一个接口，使用不同的实例执行不同操作多态的实现方式：重写、接口、抽象类和抽象方法。</strong></p>\n<h4 id=\"java抽象类\"><a class=\"anchor\" href=\"#java抽象类\">#</a> Java 抽象类</h4>\n<p>1). 使用 abstract class 来定义抽象类，抽象类不能被实例化；<br />\n2). 抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类；<br />\n3). 抽象类中的抽象方法只是声明，不包含方法体；<br />\n4). 构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法；<br />\n5). 任何子类必须重写父类的抽象方法，或者声明自身为抽象类。</p>\n<h4 id=\"抽象方法\"><a class=\"anchor\" href=\"#抽象方法\">#</a> 抽象方法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">computePay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"继承抽象类\"><a class=\"anchor\" href=\"#继承抽象类\">#</a> 继承抽象类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Salary</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">computePay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>          <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"java接口\"><a class=\"anchor\" href=\"#java接口\">#</a> Java 接口</h4>\n<ol>\n<li>接口，在 Java 编程语言中是一个抽象类型，是抽象方法的集合，接口通常以 interface 来声明；</li>\n<li>一个实现接口的类，必须实现接口内所描述的所有方法，否则就必须声明为抽象类；</li>\n<li>接口不能包含成员变量，除了 static 和 final 变量；</li>\n<li>接口中每一个方法也是隐式抽象的，接口中的方法会被隐式的指定为 public abstract；</li>\n<li>接口中可以含有变量，但是接口中的变量会被隐式的指定为 public static final 变量；</li>\n<li>接口中的方法是不能在接口中实现的，只能由实现接口的类来实现接口中的方法；</li>\n<li>类在实现接口的方法时，不能抛出强制性异常，只能在接口中，或者继承接口的抽象类中抛出该强制性异常；</li>\n<li>类在重写方法时要保持一致的方法名，并且应该保持相同或者相兼容的返回值类型；</li>\n<li>接口的继承使用 extends 关键字，允许多重继承，可能定义或继承相同的方法。 <code> interface C extends A,B&#123;&#125;</code></li>\n</ol>\n<h2 id=\"3java封装\"><a class=\"anchor\" href=\"#3java封装\">#</a> 3.Java 封装</h2>\n<p><strong>封装（英语：Encapsulation）是指，一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。</strong></p>\n<h4 id=\"封装的优点\"><a class=\"anchor\" href=\"#封装的优点\">#</a> 封装的优点：</h4>\n<blockquote>\n<ol>\n<li>良好的封装能够减少耦合</li>\n<li>类内部的结构可以自由修改</li>\n<li>可以对成员变量进行更精确的控制</li>\n<li>隐藏信息，实现细节</li>\n</ol>\n</blockquote>\n<h4 id=\"实现java封装的步骤\"><a class=\"anchor\" href=\"#实现java封装的步骤\">#</a> 实现 Java 封装的步骤：</h4>\n<blockquote>\n<ol>\n<li>修改属性的可见性来限制对属性的访问</li>\n<li>对每个值属性提供对外的公共方法访问</li>\n</ol>\n</blockquote>\n<h4 id=\"访问控制修饰符\"><a class=\"anchor\" href=\"#访问控制修饰符\">#</a> 访问控制修饰符</h4>\n<p><strong>Java 中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</strong></p>\n<blockquote>\n<p>默认的，也称为 default，在同一包内可见，不使用任何修饰符；<br />\n私有的，以 private 修饰符指定，在同一类内可见；<br />\n共有的，以 public 修饰符指定，对所有类可见；<br />\n受保护的，以 protected 修饰符指定，对同一包内的类和所有子类可见。</p>\n</blockquote>\n<p><strong>我们可以可以通过以下表来说明访问控制权限：</strong></p>\n<blockquote>\n<p>修饰符      当前类      同一包内     子孙类      其他包<br />\n public             Y                   Y                  Y                   Y<br />\nprotected      Y                   Y                  Y                  N<br />\ndefault           Y                   Y                  N                 N<br />\nprivate            Y                  N                  N                 N</p>\n</blockquote>\n<h3 id=\"输出结果\"><a class=\"anchor\" href=\"#输出结果\">#</a> 输出结果：</h3>\n<p><code>-----testsuper----</code> <br />\n <code>Animal(int)</code> <br />\n <code>Dog()</code> <br />\n <code>Animal()</code> <br />\n <code>Dog(int)</code> <br />\n <code>-----testoverride-----</code> <br />\n <code>Animal()</code> <br />\n <code>Animal(int)</code> <br />\n <code>Dog()</code> <br />\n <code>动物可以移动</code> <br />\n <code>狗可以跳墙</code></p>\n<h3 id=\"实例代码\"><a class=\"anchor\" href=\"#实例代码\">#</a> 实例代码：</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">case3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Task3</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> pppName <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> pppAge <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> bpName <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> bpAge <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> ppcName <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> ppcAge <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> bcName <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> bcAge <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 测试运动员 (乒乓球运动员和篮球运动员)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 乒乓球运动员</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// 通过带参构造函数实例化 PingPangPlayer 对象 ppp</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">// 输出 'name---age'</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token comment\">// 分别调用 sleep ()、eat ()、study ()、speak () 方法</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token class-name\">PingPangPlayer</span> ppp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PingPangPlayer</span><span class=\"token punctuation\">(</span>pppName<span class=\"token punctuation\">,</span>pppAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\tppp<span class=\"token punctuation\">.</span><span class=\"token function\">nameage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tppp<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\tppp<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tppp<span class=\"token punctuation\">.</span><span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\tppp<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 篮球运动员</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 通过带参构造函数实例化 BasketballPlayer 对象 bp</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">// 输出 'name---age'</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token comment\">// 分别调用 sleep ()、eat ()、study () 方法</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token class-name\">BasketballPlayer</span> bp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasketballPlayer</span><span class=\"token punctuation\">(</span>bpName<span class=\"token punctuation\">,</span>bpAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\tbp<span class=\"token punctuation\">.</span><span class=\"token function\">nameage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\tbp<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t\tbp<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t\tbp<span class=\"token punctuation\">.</span><span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t\t<span class=\"token comment\">// 测试教练 (乒乓球教练和篮球教练)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\t<span class=\"token comment\">// 乒乓球教练</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t\t<span class=\"token comment\">// 通过带参构造函数实例化 PingPangCoach 对象 ppc</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t\t<span class=\"token comment\">// 输出 'name---age'</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t\t<span class=\"token comment\">// 分别调用 sleep ()、eat ()、teach ()、speak () 方法</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>\t\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>\t\t<span class=\"token class-name\">PingPangCoach</span> ppc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PingPangCoach</span><span class=\"token punctuation\">(</span>ppcName<span class=\"token punctuation\">,</span>ppcAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>\t\tppc<span class=\"token punctuation\">.</span><span class=\"token function\">nameage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>\t\tppc<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>\t\tppc<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>\t\tppc<span class=\"token punctuation\">.</span><span class=\"token function\">teach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t\tppc<span class=\"token punctuation\">.</span><span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>\t\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t\t<span class=\"token comment\">// 篮球教练</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t\t<span class=\"token comment\">// 通过带参构造函数实例化 BasketballCoach 对象 bc</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t\t<span class=\"token comment\">// 输出 'name---age'</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>\t\t<span class=\"token comment\">// 分别调用 sleep ()、eat ()、teach () 方法</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>\t\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t\t<span class=\"token class-name\">BasketballCoach</span> bc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BasketballCoach</span><span class=\"token punctuation\">(</span>bcName<span class=\"token punctuation\">,</span>bcAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>\t\tbc<span class=\"token punctuation\">.</span><span class=\"token function\">nameage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>\t\tbc<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>\t\tbc<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>\t\tbc<span class=\"token punctuation\">.</span><span class=\"token function\">teach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"----------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre><span class=\"token comment\">// 说英语接口 声明抽象方法 speak ()</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token keyword\">interface</span> <span class=\"token class-name\">SpeakEnglish</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre><span class=\"token comment\">// 定义人的抽象类 Person 封装 name 和 age</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\">// 无参构造函数</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">// 有参构造函数初始化 name 和 age</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">// 定义具体方法 sleep () 输出 ' 人都是要睡觉的'</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 抽象方法 eat ()（吃的不一样）</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tname <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tage <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"人都是要睡觉的\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">// 定义运动员 Player（抽象类）继承自 Person 类</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\">// 无参构造函数</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token comment\">// 有参构造函数初始化 name 和 age</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\">// 运动员学习内容不一样，抽取为抽象 定义抽象方法 study ()</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\">// 定义教练 Coach（抽象类）继承自 Person 类</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre><span class=\"token comment\">// 无参构造函数</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre><span class=\"token comment\">// 有参构造函数初始化 name 和 age</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\">// 教练教的不一样 定义抽象方法 teach ()</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Coach</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Coach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Coach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre>    <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">teach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token comment\">// 定义乒乓球运动员具体类 PingPangPlayer 继承自 Player 类并实现 SpeakEnglish 类（兵乓球运动员需要说英语）</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token comment\">// 无参构造函数</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token comment\">// 有参构造函数初始化 name 和 age</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token comment\">// 实现自己的 eat () 方法 输出 ' 乒乓球运动员吃大白菜，喝小米粥'</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token comment\">// 实现自己的 study () 方法 输出 ' 乒乓球运动员学习如何发球和接球'</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre><span class=\"token comment\">// 实现自己的 speak () 方法 输出 ' 乒乓球运动员说英语'</span></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PingPangPlayer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SpeakEnglish</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PingPangPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">PingPangPlayer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre>\t    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">nameage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"---\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"143\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"乒乓球运动员吃大白菜，喝小米粥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"144\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"146\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"乒乓球运动员学习如何发球和接球\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"147\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"乒乓球运动员说英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"150\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"151\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"152\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\">// 定义篮球运动员具体类 BasketballPlayer 继承自 Player 类 不需要继承接口，因为他不需要说英语</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre><span class=\"token comment\">// 无参构造函数</span></pre></td></tr><tr><td data-num=\"156\"></td><td><pre><span class=\"token comment\">// 有参构造函数初始化 name 和 age</span></pre></td></tr><tr><td data-num=\"157\"></td><td><pre><span class=\"token comment\">// 实现自己的 eat () 方法 输出 ' 篮球运动员吃牛肉，喝牛奶'</span></pre></td></tr><tr><td data-num=\"158\"></td><td><pre><span class=\"token comment\">// 实现自己的 study () 方法 输出 ' 篮球运动员学习如何运球和投篮'</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BasketballPlayer</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Player</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BasketballPlayer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">BasketballPlayer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"164\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"165\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">nameage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"166\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"---\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"167\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"168\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"169\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"篮球运动员吃牛肉，喝牛奶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"170\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"171\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"172\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"篮球运动员学习如何运球和投篮\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"173\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"174\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"175\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"176\"></td><td><pre></pre></td></tr><tr><td data-num=\"177\"></td><td><pre><span class=\"token comment\">// 定义乒乓球教练具体类 PingPangCoach 继承自 Coach 类并实现 SpeakEnglish 类（兵乓球教练需要说英语）</span></pre></td></tr><tr><td data-num=\"178\"></td><td><pre><span class=\"token comment\">// 无参构造函数</span></pre></td></tr><tr><td data-num=\"179\"></td><td><pre><span class=\"token comment\">// 有参构造函数初始化 name 和 age</span></pre></td></tr><tr><td data-num=\"180\"></td><td><pre><span class=\"token comment\">// 实现自己的 eat () 方法 输出 ' 乒乓球教练吃小白菜，喝大米粥'</span></pre></td></tr><tr><td data-num=\"181\"></td><td><pre><span class=\"token comment\">// 实现自己的 teach () 方法 输出 ' 乒乓球教练教如何发球和接球'</span></pre></td></tr><tr><td data-num=\"182\"></td><td><pre><span class=\"token comment\">// 实现自己的 speak () 方法 输出 ' 乒乓球教练说英语'</span></pre></td></tr><tr><td data-num=\"183\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">PingPangCoach</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Coach</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">SpeakEnglish</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"184\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"185\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PingPangCoach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"186\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">PingPangCoach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"187\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"188\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"189\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">nameage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"190\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"---\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"191\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"192\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"193\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"乒乓球教练吃小白菜，喝大米粥\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"194\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"195\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">teach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"196\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"乒乓球教练教如何发球和接球\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"197\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"198\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">speak</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"199\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"乒乓球教练说英语\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"200\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"201\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"202\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"203\"></td><td><pre></pre></td></tr><tr><td data-num=\"204\"></td><td><pre><span class=\"token comment\">// 定义篮球教练具体类 BasketballCoach 继承自 Coach 类 不需要继承接口，因为他不需要说英语</span></pre></td></tr><tr><td data-num=\"205\"></td><td><pre><span class=\"token comment\">// 无参构造函数</span></pre></td></tr><tr><td data-num=\"206\"></td><td><pre><span class=\"token comment\">// 有参构造函数初始化 name 和 age</span></pre></td></tr><tr><td data-num=\"207\"></td><td><pre><span class=\"token comment\">// 实现自己的 eat () 方法 输出 ' 篮球教练吃羊肉，喝羊奶'</span></pre></td></tr><tr><td data-num=\"208\"></td><td><pre><span class=\"token comment\">// 实现自己的 teach () 方法 输出 ' 篮球教练教如何运球和投篮'</span></pre></td></tr><tr><td data-num=\"209\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">BasketballCoach</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Coach</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"210\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"211\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">BasketballCoach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"212\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">BasketballCoach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"213\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"214\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"215\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">nameage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"216\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"---\"</span><span class=\"token operator\">+</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"217\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"218\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"219\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"篮球教练吃羊肉，喝羊奶\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"220\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"221\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">teach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"222\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"篮球教练教如何运球和投篮\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"223\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"224\"></td><td><pre>\t<span class=\"token comment\">/********* end  *********/</span></pre></td></tr><tr><td data-num=\"225\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "编程",
                "学习笔记",
                "Java"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/CentOS%20%E4%B8%8A%E5%AE%89%E8%A3%85%20Docker%20%E5%BC%95%E6%93%8E/",
            "url": "https://blog.debugsrc.top/2019/01/01/CentOS%20%E4%B8%8A%E5%AE%89%E8%A3%85%20Docker%20%E5%BC%95%E6%93%8E/",
            "title": "CentOS上安装Docker引擎",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<p><strong>要在 CentOS 上开始使用 Docker Engine，请确保 满足先决条件，然后 安装 Docker。</strong></p>\n<p><strong>先决条件</strong></p>\n<blockquote>\n<p>操作系统要求要安装 Docker 引擎，您需要 CentOS 7 或 8 的维护版本。不支持或测试存档版本。</p>\n</blockquote>\n<blockquote>\n<p>该 centos-extras 库必须启用。默认情况下启用此存储库，但如果您已禁用它，则需要重新启用它。</p>\n</blockquote>\n<blockquote>\n<p>overlay2 推荐使用存储驱动。</p>\n</blockquote>\n<p><strong>卸载旧版本</strong></p>\n<blockquote>\n<p>旧版本的 Docker 被称为 docker 或 docker-engine。如果安装了这些，请卸载它们以及相关的依赖项。</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token variable\">$sudo</span> yum remove docker <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                  docker-client <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>                  docker-client-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                  docker-common <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                  docker-latest <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                  docker-latest-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                  docker-logrotate <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                  docker-engine</pre></td></tr></table></figure><p><strong>安装方法</strong></p>\n<blockquote>\n<p>您可以根据需要以不同方式安装 Docker Engine：</p>\n</blockquote>\n<blockquote>\n<p>大多数用户 设置 Docker 的存储库并从中安装，以便于安装和升级任务。这是推荐的方法。</p>\n</blockquote>\n<blockquote>\n<p>一些用户下载 RPM 包并 手动安装并完全手动管理升级。这在某些情况下非常有用，例如在无法访问互联网的气隙系统上安装 Docker。</p>\n</blockquote>\n<blockquote>\n<p>在测试和开发环境中，部分用户选择使用自动化 便捷脚本来安装 Docker。</p>\n</blockquote>\n<p><strong>使用存储库安装</strong><br />\n在新主机上首次安装 Docker Engine 之前，您需要设置 Docker 存储库。之后，您可以从存储库安装和更新 Docker。</p>\n<p><strong>设置存储库</strong><br />\n安装 yum-utils 包（提供 yum-config-manager 实用程序）并设置稳定存储库。</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">sudo</span> yum <span class=\"token function\">install</span> -y yum-utils</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">sudo</span> yum-config-manager <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    --add-repo <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    https://download.docker.com/linux/centos/docker-ce.repo</pre></td></tr></table></figure><p><strong>可选：启用夜间或测试存储库</strong></p>\n<p>这些存储库包含在 docker.repo 上面的文件中，但默认情况下是禁用的。您可以在稳定存储库旁边启用它们。以下命令启用夜间存储库。</p>\n<p><code>$ sudo yum-config-manager --enable docker-ce-nightly</code></p>\n<p>要启用测试通道，请运行以下命令：</p>\n<p><code>$ sudo yum-config-manager --enable docker-ce-test</code></p>\n<p>您可以通过运行带有标志的命令来禁用夜间或测试存储库 。要重新启用它，请使用该标志。以下命令禁用夜间存储库。</p>\n<p><code>$ yum-config-manager--disable--enable</code></p>\n<p><code>$ sudo yum-config-manager --disable docker-ce-nightly</code></p>\n<p>了解 nightly 和 test 频道。</p>\n<p><strong>安装 Docker 引擎</strong></p>\n<p>安装最新版本的 Docker Engine 和 containerd，或者进入下一步安装特定版本：</p>\n<p><code>&amp; sudo yum install docker-ce docker-ce-cli containerd.io</code> <br />\n 如果提示接受 GPG 密钥，请验证指纹是否匹配 060A 61C5 1B55 8A7F 742B 77AA C52F EB6B 621E 9F35，如果匹配 ，请接受。</p>\n<p><strong>多个 Docker 存储库</strong></p>\n<p>如果您启用了多个 Docker 存储库，则在 yum install 或 yum update 命令中未指定版本的情况下安装或更新始终会安装可能的最高版本，这可能不适合您的稳定性需求。</p>\n<p>此命令会安装 Docker，但不会启动 Docker。它还会创建一个 docker 组，但是，默认情况下它不会向该组添加任何用户。</p>\n<p>要安装特定版本的 Docker Engine，请在 repo 中列出可用版本，然后选择并安装：</p>\n<p>一种。列出并排序您的存储库中可用的版本。本示例按版本号对结果进行排序，从高到低，并被截断：</p>\n<p><code>$ yum list docker-ce --showduplicates | sort -r</code></p>\n<p>返回的列表取决于启用的存储库，并且特定于您的 CentOS 版本（.el7 在本示例中由后缀表示）。</p>\n<p>通过完全限定的包名称安装特定版本，即包名称 (docker-ce) 加上从第一个冒号 ( :) 开始的版本字符串（第 2 列），直到第一个连字符，由连字符 ( -) 分隔。例如，docker-ce-18.09.1。</p>\n<p><code>$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</code> <br />\n 此命令会安装 Docker，但不会启动 Docker。它还会创建一个 docker 组，但是，默认情况下它不会向该组添加任何用户。</p>\n<p><strong>启动 Docker</strong></p>\n<p><code>$ sudo systemctl start docker</code> <br />\n 通过运行 hello-world 映像验证 Docker Engine 是否已正确安装。</p>\n<p><code>$ sudo docker run hello-world</code> <br />\n 此命令下载测试映像并在容器中运行它。当容器运行时，它会打印一条消息并退出。</p>\n<p>这将安装并运行 Docker 引擎。使用 sudo 运行泊坞窗命令。继续 Linux postinstall 以允许非特权用户运行 Docker 命令和其他可选配置步骤。</p>\n<p><strong>升级 Docker 引擎</strong><br />\n要升级 Docker Engine，请按照安装说明，选择要安装的新版本。</p>\n<p><strong>卸载 Docker 引擎</strong><br />\n卸载 Docker Engine、CLI 和 Containerd 包：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">sudo</span> yum remove docker-ce docker-ce-cli containerd.io</pre></td></tr></table></figure><p>主机上的映像、容器、卷或自定义配置文件不会自动删除。删除所有镜像、容器和卷：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ <span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf /var/lib/docker</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ <span class=\"token function\">sudo</span> <span class=\"token function\">rm</span> -rf /var/lib/containerd</pre></td></tr></table></figure><p>您必须手动删除任何已编辑的配置文件。</p>\n",
            "tags": [
                "环境搭建",
                "学习笔记",
                "CentOS",
                "Docker"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/Termux/",
            "url": "https://blog.debugsrc.top/2019/01/01/Termux/",
            "title": "Termux",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h4 id=\"更换国内源\"><a class=\"anchor\" href=\"#更换国内源\">#</a> 更换国内源</h4>\n<p>更换 Termux 清华大学源，加快软件包下载速度。</p>\n<p>设置默认编辑器</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">EDITOR</span><span class=\"token operator\">=</span>vi</pre></td></tr></table></figure><p>编辑源文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> edit-sources</pre></td></tr></table></figure><p>将原来的 https://termux.net 官方源替换为 http://mirrors.tuna.tsinghua.edu.cn/termux</p>\n<h4 id=\"安装基本工具\"><a class=\"anchor\" href=\"#安装基本工具\">#</a> 安装基本工具</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pkg update</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>pkg <span class=\"token function\">install</span> <span class=\"token function\">vim</span> <span class=\"token function\">curl</span> <span class=\"token function\">wget</span> <span class=\"token function\">git</span> <span class=\"token function\">unzip</span> <span class=\"token function\">unrar</span> nmap python</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>pip <span class=\"token function\">install</span> sqlmap requests</pre></td></tr></table></figure><h4 id=\"管理员身份\"><a class=\"anchor\" href=\"#管理员身份\">#</a> 管理员身份</h4>\n<p>手机没有 root, 可利用 proot 工具来模拟某些需要 root 的环境</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pkg <span class=\"token function\">install</span> proot</pre></td></tr></table></figure><p>然后终端下面输入:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>termux-chroot</pre></td></tr></table></figure><p>即可模拟 root 环境，在这个 proot 环境下面，相当于是进入了 home 目录，可以很方便地进行一些配置。在管理员身份下，输入 exit 可回到普通用户身份。</p>\n<p>参考：Termux 高级终端安装使用配置教程 url:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3V1dTk4Ny9hcnRpY2xlL2RldGFpbHMvODY3NzM3OTE=\">https://blog.csdn.net/uuu987/article/details/86773791</span></p>\n<h4 id=\"克隆metasploit\"><a class=\"anchor\" href=\"#克隆metasploit\">#</a> 克隆 metasploit</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> /usr</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/gushmazuko/metasploit_in_termux</pre></td></tr></table></figure><h4 id=\"安装metasploit\"><a class=\"anchor\" href=\"#安装metasploit\">#</a> 安装 metasploit</h4>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">chmod</span> +x *.sh <span class=\"token operator\">&amp;&amp;</span> ./metasploit.sh</pre></td></tr></table></figure><p>参考 url：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2OTMwMDkyOTg1Lw==\">https://www.bilibili.com/video/av930092985/</span></p>\n<h4 id=\"解决中文乱码问题\"><a class=\"anchor\" href=\"#解决中文乱码问题\">#</a> 解决中文乱码问题</h4>\n<p>在 home 目录下，新建.vimrc 文件</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">vim</span> .vimrc</pre></td></tr></table></figure><p>添加内容如下:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">fileencodings</span><span class=\"token operator\">=</span>utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">enc</span><span class=\"token operator\">=</span>utf8</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">set</span> <span class=\"token assign-left variable\">fencs</span><span class=\"token operator\">=</span>utf8,gbk,gb2312,gb18030</pre></td></tr></table></figure><p>然后 source 下变量:</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">source</span> .vimrc</pre></td></tr></table></figure>",
            "tags": [
                "环境搭建",
                "学习笔记",
                "Termux"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/kali%E5%AE%89%E8%A3%85python2%EF%BC%8Cpython3%E5%AF%B9%E5%BA%94%E7%9A%84pip/",
            "url": "https://blog.debugsrc.top/2019/01/01/kali%E5%AE%89%E8%A3%85python2%EF%BC%8Cpython3%E5%AF%B9%E5%BA%94%E7%9A%84pip/",
            "title": "kali安装python2，python3对应的pip",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h2 id=\"kali自带python2python3但都没有pip包管理器\"><a class=\"anchor\" href=\"#kali自带python2python3但都没有pip包管理器\">#</a> kali 自带 python2，python3，但都没有 pip 包管理器</h2>\n<pre><code class=\"language-sh\">python -V #查看python版本\npython3 -V #查看python3版本\n</code></pre>\n<h2 id=\"python2安装pip\"><a class=\"anchor\" href=\"#python2安装pip\">#</a> python2 安装 pip</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://bootstrap.pypa.io/pip/2.7/get-pip.py   <span class=\"token comment\">#下载 pip</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python get-pip.py   <span class=\"token comment\">#安装 pip</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>python -m pip -V    <span class=\"token comment\">#查看安装 pip 的版本</span></pre></td></tr></table></figure><h2 id=\"python3安装pip\"><a class=\"anchor\" href=\"#python3安装pip\">#</a> python3 安装 pip</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> -s https://bootstrap.pypa.io/get-pip.py <span class=\"token operator\">|</span> python3</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>python3 -m pip -V    <span class=\"token comment\">#查看安装 pip 的版本</span></pre></td></tr></table></figure>",
            "tags": [
                "环境搭建",
                "学习笔记",
                "kali",
                "python",
                "pip"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E8%BF%9B%E8%A1%8C%E8%B5%8B%E5%80%BC%E5%92%8C%E8%AE%BF%E9%97%AE/",
            "url": "https://blog.debugsrc.top/2019/01/01/%E7%B1%BB%E4%B8%AD%E7%9A%84%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E8%BF%9B%E8%A1%8C%E8%B5%8B%E5%80%BC%E5%92%8C%E8%AE%BF%E9%97%AE/",
            "title": "类中的私有成员变量进行赋值和访问",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h2 id=\"定义一个学生类提供成员变量姓名和年龄需要将成员变量私有化提供对外公共访问的成员方法\"><a class=\"anchor\" href=\"#定义一个学生类提供成员变量姓名和年龄需要将成员变量私有化提供对外公共访问的成员方法\">#</a> 定义一个学生类，提供成员变量姓名和年龄，需要将成员变量私有化，提供对外公共访问的成员方法</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 私有化成员变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 提供公共访问方法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 赋值并获取成员变量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 给姓名进行传参并赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setname</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>name <span class=\"token operator\">=</span> n <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 获取姓名的方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span>  <span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">return</span> name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 给年龄传参并赋值</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>age <span class=\"token operator\">=</span> a <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">// 获取年龄的方法</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">return</span> age <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"主方法\"><a class=\"anchor\" href=\"#主方法\">#</a> 主方法</h2>\n<h3 id=\"成员变量被私有化了无法通过实例化对象访问私有成员变量外界不可访问私有成员变量\"><a class=\"anchor\" href=\"#成员变量被私有化了无法通过实例化对象访问私有成员变量外界不可访问私有成员变量\">#</a> 成员变量被私有化了，无法通过实例化对象访问私有成员变量，外界不可访问私有成员变量</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 创建 Student 类的对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 获取值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"----\"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 给学生对象进行赋值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">setname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">setage</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"----\"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h2>\n<h3 id=\"学生类\"><a class=\"anchor\" href=\"#学生类\">#</a> 学生类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">project1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setname</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tname <span class=\"token operator\">=</span> n <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">return</span> name <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tage <span class=\"token operator\">=</span> a <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">return</span> age <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试类\"><a class=\"anchor\" href=\"#测试类\">#</a> 测试类</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">project1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dumo</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"----\"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"---------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">setname</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">setage</span><span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getname</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"----\"</span><span class=\"token operator\">+</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "Java",
                "学习笔记",
                "Java"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%92%8C%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B/",
            "url": "https://blog.debugsrc.top/2019/01/01/%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B%E5%92%8C%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B/",
            "title": "向上转型和向下转型",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h1 id=\"java转型记住一句话父类引用指向子类对象\"><a class=\"anchor\" href=\"#java转型记住一句话父类引用指向子类对象\">#</a> Java 转型记住一句话：父类引用指向子类对象。</h1>\n<h2 id=\"父类引用指向子类对象\"><a class=\"anchor\" href=\"#父类引用指向子类对象\">#</a> 父类引用指向子类对象</h2>\n<p>向上转型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Father</span> f1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Son</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 向上转型不用强制转换，将子类对象转为父类对象，父类对象可以是接口。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 现在 f1 引用指向一个 Son 对象</span></pre></td></tr></table></figure><p>向下转型</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Son</span> s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">)</span>f1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 指向子类对象的父类引用赋给子类引用叫向下转型，要强制转换，与向上转型相反，即是把父类对象转为子类对象。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//f1 就是一个指向子类对象的父类引用。把 f1 赋给子类引用 s1 即 Son s1 = (Son) f1;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 其中 f1 前面的 (Son) 必须加上，进行强制转换。</span></pre></td></tr></table></figure><p>父类引用能指向子类对象，而子类引用不能指向父类对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Father</span> f2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Son</span> s2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Son</span><span class=\"token punctuation\">)</span>f2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 出错，父类引用能指向子类对象，而子类引用不能指向父类对象</span></pre></td></tr></table></figure><h2 id=\"实例代码\"><a class=\"anchor\" href=\"#实例代码\">#</a> 实例代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">case2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Task2</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> cName <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> cSex <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> cAge <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> eName <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> eSex <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token keyword\">int</span> eAge <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token comment\">// 创建测试类对象 test</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token comment\">// 创建 Person 类对象 person1, 引用指向中国人，通过有参构造函数实例化中国人类对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t<span class=\"token comment\">// 通过 showEat () 方法调用 Chinese 的 eat () 方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token comment\">// 创建 Person 类对象 person2, 引用指向英国人，通过有参构造函数实例化英国人类对象</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token comment\">// 通过 showEat () 方法调用 English 的 eat () 方法</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token class-name\">Person</span> person1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Chinese</span><span class=\"token punctuation\">(</span>cName<span class=\"token punctuation\">,</span>cSex<span class=\"token punctuation\">,</span>cAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\tperson1<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处将调用子类的 eat () 方法。原因：person1 实际指向的是 Chinese 子类，故调用时会调用子类本身的方法。</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 需要注意的是向上转型时 person1 会遗失除与父类对象共有的其他方法。如本例中的 shadowBoxing () 方法不再为 person1 所有。</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token function\">showEat</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t<span class=\"token class-name\">Person</span> person2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">English</span><span class=\"token punctuation\">(</span>eName<span class=\"token punctuation\">,</span>eSex<span class=\"token punctuation\">,</span>eAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\tperson2<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t\t<span class=\"token function\">showEat</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t\t<span class=\"token comment\">// 强制类型转换 (向下转型) 调用 Chinese 类特有的方法 shadowBoxing ()</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t<span class=\"token comment\">// 强制类型转换 (向下转型) 调用 English 类特有的方法 horseRiding ()</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">Chinese</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Chinese</span><span class=\"token punctuation\">)</span> person1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t\tc<span class=\"token punctuation\">.</span><span class=\"token function\">shadowBoxing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t\t<span class=\"token class-name\">English</span> e <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">English</span><span class=\"token punctuation\">)</span> person2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">horseRiding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\t<span class=\"token comment\">// 定义 showEat 方法，使用父类作为方法的形参，实现多态，传入的是哪个具体对象就调用哪个对象的 eat () 方法</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">showEat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span> p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t\tp<span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>\t<span class=\"token comment\">// 这里以父类引用为参数，利用了向上转型，传入的是哪个具体对象就调用哪个对象的 eat () 方法，体现了 JAVA 的抽象编程思想。</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 抽象类 Person 封装属性 name、sex 和 age</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\">// 构造函数初始化 name、sex 和 age</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\">// 声明抽象方法 eat ()</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>\t<span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>\t<span class=\"token class-name\">String</span> sex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token comment\">// Chinese 类继承自 Person 类</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\">// 构造函数初始化 name、sex 和 age</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\">// 重写父类方法 eat () 输出 ' 姓名：name，性别：sex，年龄：age，我是中国人，我喜欢吃饭！'</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\">// 定义子类特有方法 shadowBoxing (), 当父类引用指向子类对象时无法调用该方法 输出 'name 在练习太极拳！'</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Chinese</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Chinese</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>\t\tname <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>\t\tsex <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>\t\tage <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名：\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"，性别：\"</span><span class=\"token operator\">+</span>sex<span class=\"token operator\">+</span><span class=\"token string\">\"，年龄：\"</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">\"，我是中国人，我喜欢吃饭！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shadowBoxing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"在练习太极拳！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre><span class=\"token comment\">// English 类继承自 Person 类</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\">// 构造函数初始化 name、sex 和 age</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\">// 重写父类方法 eat () 输出 ' 姓名：name，性别：sex，年龄：age，我是英国人，我喜欢吃三明治！'</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">// 定义子类特有方法 horseRiding (), 当父类引用指向子类对象时无法调用该方法 输出 'name 在练习骑马！'</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">English</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>\t<span class=\"token comment\">/********* begin *********/</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">English</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>\t\tname <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>\t\tsex <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>\t\tage <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"姓名：\"</span><span class=\"token operator\">+</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"，性别：\"</span><span class=\"token operator\">+</span>sex<span class=\"token operator\">+</span><span class=\"token string\">\"，年龄：\"</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">\"，我是英国人，我喜欢吃三明治！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">horseRiding</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"在练习骑马！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>\t<span class=\"token comment\">/********* end *********/</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "编程",
                "学习笔记",
                "Java"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86samba%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "url": "https://blog.debugsrc.top/2019/01/01/%E9%85%8D%E7%BD%AE%E4%B8%8E%E7%AE%A1%E7%90%86samba%E6%9C%8D%E5%8A%A1%E5%99%A8/",
            "title": "配置与管理samba服务器",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h1 id=\"安装samba服务器\"><a class=\"anchor\" href=\"#安装samba服务器\">#</a> 安装 Samba 服务器；</h1>\n<h2 id=\"环境\"><a class=\"anchor\" href=\"#环境\">#</a> 环境</h2>\n<blockquote>\n<p>CentOS 8 boot 64 位<br />\n window 10 64 位<br />\n ##samba 软件包<br />\n检查是否安装了 samba 软件包</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">rpm</span> -qa <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> samba</pre></td></tr></table></figure><blockquote>\n<p>没有安装软件包，则使用 yum 命令安装</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>yum clean all</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>yum -y <span class=\"token function\">install</span> samba</pre></td></tr></table></figure><blockquote>\n<p>samba 软件包如下：</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>samba-4.11.2-13.el8.x86_64</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>samba-libs-4.11.2-13.el8.x86_64</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>samba-common-4.11.2-13.el8.noarch</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>samba-common-tools-4.11.2-13.el8.x86_64</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>samba-common-libs-4.11.2-13.el8.x86_64</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>samba-client-4.11.2-13.el8.x86_64</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>samba-client-libs-4.11.2-13.el8.x86_64</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>pcp-pmda-samba-5.0.2-5.el8.x86_64</pre></td></tr></table></figure><h2 id=\"samba服务\"><a class=\"anchor\" href=\"#samba服务\">#</a> samba 服务</h2>\n<blockquote>\n<p>启动 samba 服务</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl start smb.service</pre></td></tr></table></figure><blockquote>\n<p>停止 samba 服务</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl stop smb.service</pre></td></tr></table></figure><blockquote>\n<p>重启 samba 服务</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl restart smb.service</pre></td></tr></table></figure><blockquote>\n<p>查看 samba 服务状态</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl status smb.service</pre></td></tr></table></figure><blockquote>\n<p>开机自启 samba 服务器</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>systemctl list-unit-files <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> smb</pre></td></tr></table></figure><h1 id=\"配置samba服务器\"><a class=\"anchor\" href=\"#配置samba服务器\">#</a> 配置 Samba 服务器；</h1>\n<h2 id=\"samba主配置文件smbconf\"><a class=\"anchor\" href=\"#samba主配置文件smbconf\">#</a> samba 主配置文件 smb.conf</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>myshare<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>comment <span class=\"token operator\">=</span> share</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>path <span class=\"token operator\">=</span> /mnt/share</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>public <span class=\"token operator\">=</span> <span class=\"token function\">yes</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Read only <span class=\"token operator\">=</span> <span class=\"token function\">yes</span></pre></td></tr></table></figure><h1 id=\"设置samba服务的日志和账号\"><a class=\"anchor\" href=\"#设置samba服务的日志和账号\">#</a> 设置 samba 服务的日志和账号。</h1>\n<h2 id=\"日志\"><a class=\"anchor\" href=\"#日志\">#</a> 日志</h2>\n<blockquote>\n<p>设置日志文件储存路径</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>log <span class=\"token function\">file</span> <span class=\"token operator\">=</span> /var/log/samba/log.%m</pre></td></tr></table></figure><blockquote>\n<p>设置日志文件最大容量，单位为 KB</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>max log size <span class=\"token operator\">=</span> 50sh</pre></td></tr></table></figure><h2 id=\"账号\"><a class=\"anchor\" href=\"#账号\">#</a> 账号</h2>\n<blockquote>\n<p>samba 账号不能被直接创建，必须存在对应的同名系统账户。samba 中添加账号命令为 <code>smbpasswd</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>smbpasswd -a user<span class=\"token punctuation\">(</span>用户名<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>创建系统用户</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">useradd</span> user<span class=\"token punctuation\">(</span>用户名<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>修改系统用户密码</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">passwd</span> user<span class=\"token punctuation\">(</span>用户名<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>将系统用户建立为同名的 samba 账号并设置密码</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>smbpasswd -a user<span class=\"token punctuation\">(</span>用户名<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"关闭防火墙将selinux设置成允许permissive\"><a class=\"anchor\" href=\"#关闭防火墙将selinux设置成允许permissive\">#</a> 关闭防火墙，将 selinux 设置成允许 permissive。</h1>\n<h2 id=\"使用firewalld打开关闭防火墙与端口\"><a class=\"anchor\" href=\"#使用firewalld打开关闭防火墙与端口\">#</a> 使用 firewalld 打开关闭防火墙与端口</h2>\n<h3 id=\"firewalld的基本使用\"><a class=\"anchor\" href=\"#firewalld的基本使用\">#</a> firewalld 的基本使用</h3>\n<blockquote>\n<p>启动：  <code>systemctl start firewalld</code></p>\n</blockquote>\n<blockquote>\n<p>关闭：  <code>systemctl stop firewalld</code></p>\n</blockquote>\n<blockquote>\n<p>查看状态：  <code>systemctl status firewalld</code></p>\n</blockquote>\n<blockquote>\n<p>开机禁用：  <code>systemctl disable firewalld</code></p>\n</blockquote>\n<blockquote>\n<p>开机启用：  <code>systemctl enable firewalld</code></p>\n</blockquote>\n<h3 id=\"systemctl是centos7的服务管理工具中主要的工具它融合之前service和chkconfig的功能于一体\"><a class=\"anchor\" href=\"#systemctl是centos7的服务管理工具中主要的工具它融合之前service和chkconfig的功能于一体\">#</a> systemctl 是 CentOS7 的服务管理工具中主要的工具，它融合之前 service 和 chkconfig 的功能于一体。</h3>\n<blockquote>\n<p>启动一个服务： <code>systemctl start firewalld.service</code></p>\n</blockquote>\n<blockquote>\n<p>关闭一个服务： <code>systemctl stop firewalld.service</code></p>\n</blockquote>\n<blockquote>\n<p>重启一个服务： <code>systemctl restart firewalld.service</code></p>\n</blockquote>\n<blockquote>\n<p>显示一个服务的状态： <code>systemctl status firewalld.service</code></p>\n</blockquote>\n<blockquote>\n<p>在开机时启用一个服务： <code>systemctl enable firewalld.service</code></p>\n</blockquote>\n<blockquote>\n<p>在开机时禁用一个服务： <code>systemctl disable firewalld.service</code></p>\n</blockquote>\n<blockquote>\n<p>查看服务是否开机启动： <code>systemctl is-enabled firewalld.service</code></p>\n</blockquote>\n<blockquote>\n<p>查看已启动的服务列表： <code>systemctl list-unit-files|grep enabled</code></p>\n</blockquote>\n<blockquote>\n<p>查看启动失败的服务列表： <code>systemctl --failed</code></p>\n</blockquote>\n<h3 id=\"配置firewalld-cmd\"><a class=\"anchor\" href=\"#配置firewalld-cmd\">#</a> 配置 firewalld-cmd</h3>\n<blockquote>\n<p>查看版本：  <code>firewall-cmd --version</code></p>\n</blockquote>\n<blockquote>\n<p>查看帮助：  <code>firewall-cmd --help</code></p>\n</blockquote>\n<blockquote>\n<p>显示状态：  <code>firewall-cmd --state</code></p>\n</blockquote>\n<blockquote>\n<p>查看所有打开的端口：  <code>firewall-cmd --zone=public --list-ports</code></p>\n</blockquote>\n<blockquote>\n<p>更新防火墙规则：  <code>firewall-cmd --reload</code></p>\n</blockquote>\n<blockquote>\n<p>查看区域信息:   <code>firewall-cmd --get-active-zones</code></p>\n</blockquote>\n<blockquote>\n<p>查看指定接口所属区域：  <code>firewall-cmd --get-zone-of-interface=eth0</code></p>\n</blockquote>\n<blockquote>\n<p>拒绝所有包： <code>firewall-cmd --panic-on</code></p>\n</blockquote>\n<blockquote>\n<p>取消拒绝状态：  <code>firewall-cmd --panic-off</code></p>\n</blockquote>\n<blockquote>\n<p>查看是否拒绝：  <code>firewall-cmd --query-panic</code></p>\n</blockquote>\n<h3 id=\"开启一个端口\"><a class=\"anchor\" href=\"#开启一个端口\">#</a> 开启一个端口</h3>\n<blockquote>\n<p>添加</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --zone<span class=\"token operator\">=</span>public --add-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp --permanent（--permanent永久生效，没有此参数重启后失效）</pre></td></tr></table></figure><blockquote>\n<p>重新载入</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --reload</pre></td></tr></table></figure><blockquote>\n<p>查看</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --zone<span class=\"token operator\">=</span> public --query-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp</pre></td></tr></table></figure><blockquote>\n<p>删除</p>\n</blockquote>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>firewall-cmd --zone<span class=\"token operator\">=</span> public --remove-port<span class=\"token operator\">=</span><span class=\"token number\">80</span>/tcp --permanent</pre></td></tr></table></figure><h2 id=\"将selinux设置成允许permissive\"><a class=\"anchor\" href=\"#将selinux设置成允许permissive\">#</a> 将 selinux 设置成允许 permissive</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># getenforce</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Enforcing</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># setenforce 0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span>root@localhost ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># getenforce</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Permissive</pre></td></tr></table></figure><h1 id=\"在window系统中测试samba服务器\"><a class=\"anchor\" href=\"#在window系统中测试samba服务器\">#</a> 在 window 系统中测试 samba 服务器</h1>\n<blockquote>\n<p>在资源管理器地址栏中输入 `\\192.168.0.1・(samba 服务器 ip 地址)</p>\n</blockquote>\n",
            "tags": [
                "环境搭建",
                "学习笔记",
                "Linux",
                "samba"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/%E5%B0%81%E8%A3%85,%E7%BB%A7%E6%89%BF,%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0,super()%E5%92%8Cthis()/",
            "url": "https://blog.debugsrc.top/2019/01/01/%E5%B0%81%E8%A3%85,%E7%BB%A7%E6%89%BF,%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0,super()%E5%92%8Cthis()/",
            "title": "面向对象思想,封装,继承,构造函数,super()和this()",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h1 id=\"面向对象思想\"><a class=\"anchor\" href=\"#面向对象思想\">#</a> 面向对象思想</h1>\n<h3 id=\"构造器\"><a class=\"anchor\" href=\"#构造器\">#</a> 构造器:</h3>\n<blockquote>\n<p>new 就是一个构造器，作用是：<strong>①分配空间；②赋初始值</strong>（避免错误，简化输入）； <code>new Object(Parameters)</code>  构造器调用构造函数，传参为了赋初始值；</p>\n</blockquote>\n<h3 id=\"对象的基本元素\"><a class=\"anchor\" href=\"#对象的基本元素\">#</a> 对象的基本元素：</h3>\n<blockquote>\n<p><strong>属性和方法</strong> 类成员（属性和方法）。<strong>属性</strong>最为重要，&lt;u&gt; 属性的集合是一个状态，方法是一个状态到另一个状态的桥梁 &lt;/u&gt;；</p>\n</blockquote>\n<h3 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装：</h3>\n<blockquote>\n<p>属性和处理属性的方法集合起来。&lt;u&gt; 把数据及数据的操作方法放在一起，作为一个相互依存的整体 &lt;/u&gt;，即<strong>对象</strong>。<br />\n面向对象是基于面向过程而言的，&lt;u&gt; 面向对象是将功能等通过对象来实现，将功能封装进对象之中，让对象去实现具体的细节 &lt;/u&gt;；<br />\n这种思想是将数据作为第一位，而方法或者说是算法作为其次，这是对数据一种优化，操作起来更加的方便，简化了过程。</p>\n</blockquote>\n<h1 id=\"封装-2\"><a class=\"anchor\" href=\"#封装-2\">#</a> 封装</h1>\n<p>访问权限的控制常被称为是具体实现的隐藏。把数据和方法包装进类中，以及具体实现的隐藏共同被称为<strong>封装</strong>。</p>\n<blockquote>\n<p><code>public</code> ：可以被所有其他类访问；</p>\n</blockquote>\n<blockquote>\n<p><code>protected</code> ：自身、子类、及同一个包中类（接受包外的子类访问）；</p>\n</blockquote>\n<blockquote>\n<p><code>default</code> ：同一包中的类可以访问，声明时没有加修饰符，认为是 friendly（拒绝一切外包访问）；</p>\n</blockquote>\n<blockquote>\n<p><code>private</code> ：只能被自己访问和修改。</p>\n</blockquote>\n<p><strong>类的访问控制符只有三种: <code>public private protected</code>   <code>default</code>  是无访问控制符</strong></p>\n<h1 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h1>\n<blockquote>\n<p>在一个子类被创建的时候，<strong>首先会在内存中创建一个父类对象，然后在父类对象外部放上子类独有的属性</strong>，两者合起来形成一个<strong>子类的对象</strong>。<br />\n继承使子类拥有父类所有的属性和方法，但是父类对象中的私有属性和方法，子类是无法访问到的，<strong>只是拥有，但不能使用</strong>。子类不能继承父类的构造函数，只是显式或隐式调用，可以从子类调用超类的构造函数。<br />\n用 <code>new</code>  创建子类的对象时，若子类没有带参构造函数，将先执行父类的无参构造函数，然后再执行自己的构造函数。父类定义了有参的构造函数后，可以不定义无参的构造函数，系统也不会提供默认的无参构造函数。这时子类只能调用父类的有参构造函数。<br />\n<strong>Java 类是单继承，Java 接口可以多继承</strong>。类可以实现多个接口，接口可以继承（扩展）多个接口。先继承后实现接口。</p>\n</blockquote>\n<h2 id=\"组合和继承\"><a class=\"anchor\" href=\"#组合和继承\">#</a> 组合和继承</h2>\n<blockquote>\n<p><strong>组合是指在新类里面创建原有的类的对象，重复利用已有类的功能。</strong>（“has-a”）<br />\n组合和继承都允许在新的类中设置子对象，只是组合是显式的，而继承是隐式的。组合中的整体类和继承中的子类对应，组合中的局部类和继承中的父类对应。<br />\n### 组合和继承的选择规则：<br />\n①除非两个类之间是 “is-a” 的关系，否则不要轻易地使用继承。过多的使用继承会破坏代码的可维护性，当父类修改时，会影响所有继承他的子类，增加了程序维护的难度和成本。<br />\n②不要仅仅为实现多态而使用继承，如果类之间没有 “is-a” 关系，可以通过实现接口与组合的方式来达到相同的目的。</p>\n</blockquote>\n<h1 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h1>\n<p><strong>用来在对象实例化时初始化对象的成员变量</strong></p>\n<h4 id=\"特点\"><a class=\"anchor\" href=\"#特点\">#</a> 特点：</h4>\n<blockquote>\n<p>①方法名必须和类名相同，&lt;u&gt; 不能有返回值（也不能为 <code>void</code> ）&lt;/u&gt;；<br />\n②一个类可以有多个构造函数，没有定义的话，编译器会在源代码编译成字节码文件的过程中会提供一个没有参数的默认的构造方法。若定义后，不会再创建默认的构造方法；<br />\n③构造函数的参数有（0 到多个）；<br />\n④构造函数在对象实例化时会被自动调用，且只运行一次；普通方法是在程序执行到时才调用且可以被该对象调用多次；<br />\n⑤构造函数的作用是完成对象的初始化；<br />\n⑥构造函数不能被继承，不能被覆盖，能被重载；<br />\n⑦子类可以通过 <code>super()</code>  关键字来显示调用父类的构造函数，父类没有提供无参构造，子类的构造函数中必须显式得调用父类的构造函数；<br />\n⑧父类和子类都没有定义构造函数时，编译器都会为父类生成一个默认的无参构造，给子类也生成一个默认的无参的构造函数；<br />\n⑨构造方法会在成员变量之后初始化；<br />\n⑩构造方法不能被 <code>static</code>   <code>final</code>   <code>synchronize</code>   <code>abstract</code>   <code>native</code>  修饰，但可以被 <code>public</code>   <code>private</code>   <code>protect</code>  修饰。</p>\n</blockquote>\n<blockquote>\n<p>在继承的时候，父类当然也有构造方法，如果你要创建子类的对象，那么执行的过程首先是调用父类的无参构造方法生成父类的对象，然后再调用子类的无参构造方法来生成子类对象。继承的时候都是先生成父类的对象，然后再生成子类的对象。<br />\n通过使用 this 关键字带上参数，可以在一个构造函数中调用另外一个构造函数。这是 this 除了单纯表示 “当前对象”(注意是针对对象而不是类的概念) 之外的第二个作用。<br />\n### 但是注意 3 点:<br />\n①必须放在第一行；<br />\n②只能调用一个其它的构造函数。(也许可以这样理解，正是因为有了第一点，如果可以调用多个的话，那么就无法放在 “第一行”，所以只能允许一次调用)；<br />\n③只能是构造函数调用构造函数，普通函数无法调用构造函数。</p>\n</blockquote>\n<h3 id=\"super和this\"><a class=\"anchor\" href=\"#super和this\">#</a> super () 和 this ()</h3>\n<blockquote>\n<p>① <code>super()</code>  关键字表示超类的意思，当前类是从超类继承而来。<br />\n② <code>this</code>  表示当前对象；</p>\n</blockquote>\n<blockquote>\n<p>只有在重写 (Override) 父类的方法中，<strong>子类要调用继承自父类的方法</strong>，才使用 <code>super</code>  关键字。<br />\n使用 <code>super()</code>  或者 <code>this()</code>  方法是必须放在构造函数的第一行；<br />\n调用父类构造方法：super (参数，参数);<br />\n 调用父类成员方法：super. 成员方法名 (参数，参数);<br />\n 调用父类成员变量赋值：super. 成员变量名 = 参数；</p>\n</blockquote>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">project1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"我是空参构造方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tname <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tage <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">+</span><span class=\"token string\">\"---\"</span><span class=\"token operator\">+</span>age<span class=\"token operator\">+</span><span class=\"token string\">\"---\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"人都是要睡觉的\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Player</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先调用父类空参构造方法，不向父类传递参数，再执行该构造方法的以下代码</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">19</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先向父类成员变量 age 赋值，再执行该构造方法的以下代码</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"张三\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> n<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先调用父类有参构造方法，并向父类传递两个参数，再执行该构造方法的以下代码</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">supercy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先调用父类 sleep 成员方法，不向父类 sleep 成员方法传递参数，再执行该构造方法的以下代码</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">package</span> <span class=\"token namespace\">project1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dumo</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token class-name\">Player</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\tp1<span class=\"token punctuation\">.</span><span class=\"token function\">supercy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"------------------------\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\t<span class=\"token class-name\">Player</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Player</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"李四\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>\tp2<span class=\"token punctuation\">.</span><span class=\"token function\">supercy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>我是空参构造方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>张三<span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token number\">19</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>人都是要睡觉的</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>李四<span class=\"token operator\">--</span><span class=\"token operator\">-</span><span class=\"token number\">20</span><span class=\"token operator\">--</span><span class=\"token operator\">-</span>人都是要睡觉的</pre></td></tr></table></figure><blockquote>\n<p>由于 <code>this</code>  函数指向的构造函数默认有 <code>super()</code>  方法，所以规定 <code>this()</code>  和 <code>super()</code>  不能同时出现在一个构造函数中<br />\n因为 <code>static</code>  方法或者语句块没有实例时可以使用，而此时不需要构造实例，所以不能用 <code>this()</code>  和 <code>super()</code> 。</p>\n</blockquote>\n",
            "tags": [
                "编程",
                "学习笔记",
                "Java"
            ]
        },
        {
            "id": "https://blog.debugsrc.top/2019/01/01/%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD,abstract(%E6%8A%BD%E8%B1%A1%E7%B1%BB)%E5%92%8Cinterface(%E6%8E%A5%E5%8F%A3),final,static%E5%85%B3%E9%94%AE%E5%AD%97,%E5%A4%9A%E6%80%81/",
            "url": "https://blog.debugsrc.top/2019/01/01/%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD,abstract(%E6%8A%BD%E8%B1%A1%E7%B1%BB)%E5%92%8Cinterface(%E6%8E%A5%E5%8F%A3),final,static%E5%85%B3%E9%94%AE%E5%AD%97,%E5%A4%9A%E6%80%81/",
            "title": "重写和重载,abstract(抽象类)和interface(接口),final,static关键字,多态",
            "date_published": "2018-12-31T16:00:00.000Z",
            "content_html": "<h1 id=\"重写和重载\"><a class=\"anchor\" href=\"#重写和重载\">#</a> 重写和重载</h1>\n<h3 id=\"方法重载overload\"><a class=\"anchor\" href=\"#方法重载overload\">#</a> 方法重载（overload）：</h3>\n<blockquote>\n<p>必须是同一个类；<br />\n方法名（也可以叫函数）一样；<br />\n参数类型不一样或参数数量或顺序不一样；<br />\n不能通过返回值来判断重载。</p>\n</blockquote>\n<h3 id=\"方法的重写override子类重写了父类的同名方法两同两小一大原则\"><a class=\"anchor\" href=\"#方法的重写override子类重写了父类的同名方法两同两小一大原则\">#</a> 方法的重写（override）子类重写了父类的同名方法，两同两小一大原则：</h3>\n<blockquote>\n<p>方法名相同，参数类型相同；<br />\n子类返回类型是父类返回类型的子类；<br />\n子类抛出异常小于等于父类方法抛出异常；<br />\n子类访问权限大于等于父类方法访问权限。<br />\n<img data-src=\"https://www.educoder.net/api/attachments/206833\" alt=\"\" /></p>\n</blockquote>\n<blockquote>\n<p><strong>在重写中，运用的是动态单分配，根据 <code>new</code>  的类型确定对象，从而确定调用的方法；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>在重载中，运用的是静态多分配，根据静态类型确定对象，不能根据 <code>new</code>  的类型确定调用方法；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>多态中，  <code>Father f = new Son()</code> 。</strong><br />\n成员变量：编译运行参考左边；<br />\n成员函数：编译看左边，运行看右边；<br />\n静态函数：编译运行看左边。</p>\n</blockquote>\n<p><strong> <code>abstract</code>  (抽象类) 和 <code>interface</code>  (接口)</strong></p>\n<h1 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h1>\n<blockquote>\n<p><strong>用  <code>abstract</code>  修饰的类表示抽象类，抽象类位于继承树的抽象层，抽象类不能被实例化。</strong><br />\n<strong>用  <code>abstract</code>  修饰的方法表示抽象方法，抽象方法没有方法体。抽象方法用来描述系统具有什么功能，但不提供具体的实现，把具体实现留给继承该类的子类。</strong></p>\n</blockquote>\n<h3 id=\"抽象类特点\"><a class=\"anchor\" href=\"#抽象类特点\">#</a> 抽象类特点：</h3>\n<blockquote>\n<p>含有抽象方法的类必须声明为抽象类（不管其中是否有其他方法）；<br />\n抽象类可以没有抽象方法，可以有普通方法；<br />\n抽象类必须被继承，抽象方法必须被重写（若子类还是抽象类，不需要重写）；<br />\n抽象类不能被实例化（不能直接构造一个该类的对象）。</p>\n</blockquote>\n<h3 id=\"抽象方法特点\"><a class=\"anchor\" href=\"#抽象方法特点\">#</a> 抽象方法特点：</h3>\n<blockquote>\n<p>在类中没有方法体（抽象方法只需声明，而不需实现某些功能）；<br />\n抽象类中的抽象方法必须被实现；<br />\n如果一个子类没有实现父类中的抽象方法，则子类也变成了一个抽象类。<br />\n接口  <code>interface</code>  中的方法默认为  <code>public abstract</code> （  <code>public</code>   <code>abstract</code>  可以省略），变量默认为  <code>public static final</code> ；类中的方法全部都是抽象方法。只有声明没有实现，在不同类中有不同的方法实现。</p>\n</blockquote>\n<h3 id=\"不同点\"><a class=\"anchor\" href=\"#不同点\">#</a> 不同点：</h3>\n<blockquote>\n<p>接口中只能包含抽象方法和默认方法，不能为普通方法提供方法实现；抽象类中可以包含普通方法；<br />\n接口里不能定义静态方法（ jdk1.8 下可以定义 static 方法），抽象类可以定义静态方法；<br />\n接口中只能定义静态常量，不能定义普通成员变量；抽象类即可以定义变量又可以定义静态常量；<br />\n接口中不包含构造器，抽象类里可以包含构造器，抽象类中的构造器并不是用于创建对象，而是让其他子类调用这些构造器来完成抽象类的初始化操作；<br />\n接口里不能包含初始化块，但抽象类可以包含；<br />\n一个类最多只能有一个父类，包括抽象类；但一个类可以直接实现多个接口，通过实现多个接口可以弥补 Java 单继承的不足。</p>\n</blockquote>\n<h3 id=\"共同点\"><a class=\"anchor\" href=\"#共同点\">#</a> 共同点：</h3>\n<blockquote>\n<p>接口和抽象类都不能被实例化，都位于继承树的顶端，用于被其他类实现的继承；<br />\n接口和抽象类都可以包含抽象方法，实现接口和继承抽象类的普通子类都必须实现这些方法。<br />\n<img data-src=\"https://www.educoder.net/api/attachments/206834\" alt=\"\" /></p>\n</blockquote>\n<p>#final 关键字</p>\n<blockquote>\n<p>final 修饰的类，就是最终类，不能被继承。<br />\nfinal 修饰的方法，就是最终方法，最终方法不能被重写。<br />\nfinal 修饰一个引用变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。修饰基本数据类型变量时，内容不能变。<br />\nfinal 成员变量必须在初始化代码块或在构造器中初始化。</p>\n</blockquote>\n<h3 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> 作用：</h3>\n<blockquote>\n<p>final 类：如果一个类不需要有子类，类的实现细节不允许改变，并且确信这个类不会再被扩展，那么就设计成  <code>final</code>  类。<br />\nfinal 方法：①把方法锁定，防止任何继承类修改它的意义和实现。②高效，编译器在遇到调用  <code>final</code>  方法时候会转入内嵌机制，大大提升执行效率。</p>\n</blockquote>\n<p>#static 关键字</p>\n<blockquote>\n<p>static 修饰的变量称为静态变量，静态变量属于整个类，而局部变量属于方法，只在该方法内有效。  <code>static</code>  不能修饰局部变量。  <code>static</code>  方法内部不能调用非静态方法。<br />\n静态变量只能在类主体中定义，不能在方法中定义；<br />\nstatic 变量只会创建一份，不管创建几个对象，都共用一个变量。<br />\n类方法指被  <code>static</code>  修饰的方法，无 this 指针。其他的就是实例方法。类方法可以调用其他类的  <code>static</code>  方法。</p>\n</blockquote>\n<h2 id=\"类方法和对象方法的区别\"><a class=\"anchor\" href=\"#类方法和对象方法的区别\">#</a> 类方法和对象方法的区别：</h2>\n<h3 id=\"类方法是属于整个类的而实例方法是属于类的某个对象的\"><a class=\"anchor\" href=\"#类方法是属于整个类的而实例方法是属于类的某个对象的\">#</a> 类方法是属于整个类的，而实例方法是属于类的某个对象的。</h3>\n<blockquote>\n<p><strong>由于类方法是属于整个类的，并不属于类的哪个对象，所以类方法的方法体中不能有与类的对象有关的内容。即类方法体有如下限制：</strong></p>\n</blockquote>\n<blockquote>\n<p>类方法中不能引用对象变量；<br />\n类方法中不能调用类的对象方法；<br />\n在类方法中不能使用  <code>super</code> 、  <code>this</code>  关键字。（  <code>this</code>  表示当前类的对象，由  <code>static</code>  修饰的方法是类直接调用，不需要创建对象，所以不能用  <code>this</code> ）；<br />\n类方法不能被覆盖。</p>\n</blockquote>\n<h3 id=\"与类方法相比对象方法几乎没有什么限制\"><a class=\"anchor\" href=\"#与类方法相比对象方法几乎没有什么限制\">#</a> 与类方法相比，对象方法几乎没有什么限制：</h3>\n<blockquote>\n<p>对象方法中可以引用对象变量，也可以引用类变量；<br />\n对象方法中可以调用类方法；<br />\n对象方法中可以使用  <code>super</code> 、  <code>this</code>  关键字。</p>\n</blockquote>\n<h3 id=\"static关键字的作用\"><a class=\"anchor\" href=\"#static关键字的作用\">#</a> static 关键字的作用:</h3>\n<blockquote>\n<p>为某特定数据类型或对象分配单一的存储空间，而与创建对象的个数无关；实现某个方法或属性与类而不是对象关联在一起；<br />\n静态变量属于类，在内存中只有一个复制，只要静态变量所在的类被加载，这个静态变量就会被分配空间。</p>\n</blockquote>\n<h1 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h1>\n<blockquote>\n<p><strong>定义：不同类的对象对同一消息做出响应。同一消息可以根据发送对象的不同而采用多种不同的行为方式；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>多态存在的三个必要条件：继承、重写、父类引用指向子类对象；</strong></p>\n</blockquote>\n<blockquote>\n<p><strong>Java 中多态的实现方式：接口实现，继承父类进行方法重写，同一个类中进行方法重载；</strong></p>\n</blockquote>\n<blockquote>\n<p>父类引用指向子类对象，该引用不能再访问子类新增的成员。  <code>Animal cat = new Cat()</code>  与直接  <code>new</code>  一个父类实例 (  <code>Animal a = new Animal()</code> ) 的区别？<br />\n答：当父类是接口和抽象类时，不能实例化，只能运用多态，向上转型。普通类中，可以在子类中重写父类中的方法，这样就可以访问子类中的重写方法。</p>\n</blockquote>\n",
            "tags": [
                "编程",
                "学习笔记",
                "Java"
            ]
        }
    ]
}